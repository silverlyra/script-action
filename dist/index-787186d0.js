var Uo = (e, t, r) => {
  if (!t.has(e))
    throw TypeError("Cannot " + r);
};
var Te = (e, t, r) => (Uo(e, t, "read from private field"), r ? r.call(e) : t.get(e)), Mt = (e, t, r) => {
  if (t.has(e))
    throw TypeError("Cannot add the same private member more than once");
  t instanceof WeakSet ? t.add(e) : t.set(e, r);
}, gt = (e, t, r, a) => (Uo(e, t, "write to private field"), a ? a.call(e, r) : t.set(e, r), r);
import { readFile as P0 } from "fs/promises";
import Ga from "node:http";
import B0 from "node:https";
import Ir from "node:zlib";
import _t, { PassThrough as ri, pipeline as Gr } from "node:stream";
import { Buffer as Ge } from "node:buffer";
import { types as ai, promisify as F0, deprecate as hi } from "node:util";
import { format as N0 } from "node:url";
import { isIP as k0 } from "node:net";
import "node:fs";
import "node:path";
import as, { randomBytes as I0 } from "crypto";
import ar from "os";
import Pe from "fs";
import ye from "path";
import gi from "http";
import is from "https";
import "net";
import G0 from "tls";
import ns from "events";
import Sr from "assert";
import Qa from "util";
import Ze from "stream";
import ta from "url";
import id from "perf_hooks";
import Ot from "zlib";
import $0 from "string_decoder";
import U0 from "child_process";
import x0 from "timers";
function Ya(e, t) {
  for (var r = 0; r < t.length; r++) {
    const a = t[r];
    if (typeof a != "string" && !Array.isArray(a)) {
      for (const i in a)
        if (i !== "default" && !(i in e)) {
          const s = Object.getOwnPropertyDescriptor(a, i);
          s && Object.defineProperty(e, i, s.get ? s : {
            enumerable: !0,
            get: () => a[i]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }));
}
function V0(e) {
  if (!/^data:/i.test(e))
    throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
  e = e.replace(/\r?\n/g, "");
  const t = e.indexOf(",");
  if (t === -1 || t <= 4)
    throw new TypeError("malformed data: URI");
  const r = e.substring(5, t).split(";");
  let a = "", i = !1;
  const s = r[0] || "text/plain";
  let o = s;
  for (let c = 1; c < r.length; c++)
    r[c] === "base64" ? i = !0 : r[c] && (o += `;${r[c]}`, r[c].indexOf("charset=") === 0 && (a = r[c].substring(8)));
  !r[0] && !a.length && (o += ";charset=US-ASCII", a = "US-ASCII");
  const d = i ? "base64" : "ascii", l = unescape(e.substring(t + 1)), u = Buffer.from(l, d);
  return u.type = s, u.typeFull = o, u.charset = a, u;
}
var D = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof globalThis < "u" ? globalThis : {};
function nd(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
function Ja(e) {
  if (e.__esModule)
    return e;
  var t = e.default;
  if (typeof t == "function") {
    var r = function a() {
      if (this instanceof a) {
        var i = [null];
        i.push.apply(i, arguments);
        var s = Function.bind.apply(t, i);
        return new s();
      }
      return t.apply(this, arguments);
    };
    r.prototype = t.prototype;
  } else
    r = {};
  return Object.defineProperty(r, "__esModule", { value: !0 }), Object.keys(e).forEach(function(a) {
    var i = Object.getOwnPropertyDescriptor(e, a);
    Object.defineProperty(r, a, i.get ? i : {
      enumerable: !0,
      get: function() {
        return e[a];
      }
    });
  }), r;
}
var $1 = { exports: {} }, xo;
function L0() {
  return xo || (xo = 1, function(e, t) {
    (function(r, a) {
      a(t);
    })(D, function(r) {
      const a = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? Symbol : (n) => `Symbol(${n})`;
      function i() {
      }
      function s() {
        if (typeof globalThis < "u")
          return globalThis;
        if (typeof window < "u")
          return window;
        if (typeof D < "u")
          return D;
      }
      const o = s();
      function d(n) {
        return typeof n == "object" && n !== null || typeof n == "function";
      }
      const l = i, u = Promise, c = Promise.prototype.then, v = Promise.resolve.bind(u), T = Promise.reject.bind(u);
      function g(n) {
        return new u(n);
      }
      function w(n) {
        return v(n);
      }
      function f(n) {
        return T(n);
      }
      function b(n, p, m) {
        return c.call(n, p, m);
      }
      function y(n, p, m) {
        b(b(n, p, m), void 0, l);
      }
      function k(n, p) {
        y(n, p);
      }
      function N(n, p) {
        y(n, void 0, p);
      }
      function $(n, p, m) {
        return b(n, p, m);
      }
      function O(n) {
        b(n, void 0, l);
      }
      const P = (() => {
        const n = o && o.queueMicrotask;
        if (typeof n == "function")
          return n;
        const p = w(void 0);
        return (m) => b(p, m);
      })();
      function C(n, p, m) {
        if (typeof n != "function")
          throw new TypeError("Argument is not a function");
        return Function.prototype.apply.call(n, p, m);
      }
      function A(n, p, m) {
        try {
          return w(C(n, p, m));
        } catch (E) {
          return f(E);
        }
      }
      const S = 16384;
      class R {
        constructor() {
          this._cursor = 0, this._size = 0, this._front = {
            _elements: [],
            _next: void 0
          }, this._back = this._front, this._cursor = 0, this._size = 0;
        }
        get length() {
          return this._size;
        }
        // For exception safety, this method is structured in order:
        // 1. Read state
        // 2. Calculate required state mutations
        // 3. Perform state mutations
        push(p) {
          const m = this._back;
          let E = m;
          m._elements.length === S - 1 && (E = {
            _elements: [],
            _next: void 0
          }), m._elements.push(p), E !== m && (this._back = E, m._next = E), ++this._size;
        }
        // Like push(), shift() follows the read -> calculate -> mutate pattern for
        // exception safety.
        shift() {
          const p = this._front;
          let m = p;
          const E = this._cursor;
          let B = E + 1;
          const G = p._elements, V = G[E];
          return B === S && (m = p._next, B = 0), --this._size, this._cursor = B, p !== m && (this._front = m), G[E] = void 0, V;
        }
        // The tricky thing about forEach() is that it can be called
        // re-entrantly. The queue may be mutated inside the callback. It is easy to
        // see that push() within the callback has no negative effects since the end
        // of the queue is checked for on every iteration. If shift() is called
        // repeatedly within the callback then the next iteration may return an
        // element that has been removed. In this case the callback will be called
        // with undefined values until we either "catch up" with elements that still
        // exist or reach the back of the queue.
        forEach(p) {
          let m = this._cursor, E = this._front, B = E._elements;
          for (; (m !== B.length || E._next !== void 0) && !(m === B.length && (E = E._next, B = E._elements, m = 0, B.length === 0)); )
            p(B[m]), ++m;
        }
        // Return the element that would be returned if shift() was called now,
        // without modifying the queue.
        peek() {
          const p = this._front, m = this._cursor;
          return p._elements[m];
        }
      }
      function U(n, p) {
        n._ownerReadableStream = p, p._reader = n, p._state === "readable" ? X(n) : p._state === "closed" ? ne(n) : Y(n, p._storedError);
      }
      function L(n, p) {
        const m = n._ownerReadableStream;
        return st(m, p);
      }
      function M(n) {
        n._ownerReadableStream._state === "readable" ? ee(n, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")) : H(n, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")), n._ownerReadableStream._reader = void 0, n._ownerReadableStream = void 0;
      }
      function J(n) {
        return new TypeError("Cannot " + n + " a stream using a released reader");
      }
      function X(n) {
        n._closedPromise = g((p, m) => {
          n._closedPromise_resolve = p, n._closedPromise_reject = m;
        });
      }
      function Y(n, p) {
        X(n), ee(n, p);
      }
      function ne(n) {
        X(n), j(n);
      }
      function ee(n, p) {
        n._closedPromise_reject !== void 0 && (O(n._closedPromise), n._closedPromise_reject(p), n._closedPromise_resolve = void 0, n._closedPromise_reject = void 0);
      }
      function H(n, p) {
        Y(n, p);
      }
      function j(n) {
        n._closedPromise_resolve !== void 0 && (n._closedPromise_resolve(void 0), n._closedPromise_resolve = void 0, n._closedPromise_reject = void 0);
      }
      const K = a("[[AbortSteps]]"), re = a("[[ErrorSteps]]"), me = a("[[CancelSteps]]"), Me = a("[[PullSteps]]"), Ve = Number.isFinite || function(n) {
        return typeof n == "number" && isFinite(n);
      }, it = Math.trunc || function(n) {
        return n < 0 ? Math.ceil(n) : Math.floor(n);
      };
      function Tt(n) {
        return typeof n == "object" || typeof n == "function";
      }
      function Be(n, p) {
        if (n !== void 0 && !Tt(n))
          throw new TypeError(`${p} is not an object.`);
      }
      function ae(n, p) {
        if (typeof n != "function")
          throw new TypeError(`${p} is not a function.`);
      }
      function qe(n) {
        return typeof n == "object" && n !== null || typeof n == "function";
      }
      function F(n, p) {
        if (!qe(n))
          throw new TypeError(`${p} is not an object.`);
      }
      function W(n, p, m) {
        if (n === void 0)
          throw new TypeError(`Parameter ${p} is required in '${m}'.`);
      }
      function h(n, p, m) {
        if (n === void 0)
          throw new TypeError(`${p} is required in '${m}'.`);
      }
      function _(n) {
        return Number(n);
      }
      function I(n) {
        return n === 0 ? 0 : n;
      }
      function x(n) {
        return I(it(n));
      }
      function q(n, p) {
        const E = Number.MAX_SAFE_INTEGER;
        let B = Number(n);
        if (B = I(B), !Ve(B))
          throw new TypeError(`${p} is not a finite number`);
        if (B = x(B), B < 0 || B > E)
          throw new TypeError(`${p} is outside the accepted range of 0 to ${E}, inclusive`);
        return !Ve(B) || B === 0 ? 0 : B;
      }
      function Q(n, p) {
        if (!Vt(n))
          throw new TypeError(`${p} is not a ReadableStream.`);
      }
      function pe(n) {
        return new oa(n);
      }
      function Ce(n, p) {
        n._reader._readRequests.push(p);
      }
      function Ee(n, p, m) {
        const B = n._reader._readRequests.shift();
        m ? B._closeSteps() : B._chunkSteps(p);
      }
      function ft(n) {
        return n._reader._readRequests.length;
      }
      function n1(n) {
        const p = n._reader;
        return !(p === void 0 || !Gt(p));
      }
      class oa {
        constructor(p) {
          if (W(p, 1, "ReadableStreamDefaultReader"), Q(p, "First parameter"), Lt(p))
            throw new TypeError("This stream has already been locked for exclusive reading by another reader");
          U(this, p), this._readRequests = new R();
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed,
         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.
         */
        get closed() {
          return Gt(this) ? this._closedPromise : f(s1("closed"));
        }
        /**
         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
         */
        cancel(p = void 0) {
          return Gt(this) ? this._ownerReadableStream === void 0 ? f(J("cancel")) : L(this, p) : f(s1("cancel"));
        }
        /**
         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.
         *
         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.
         */
        read() {
          if (!Gt(this))
            return f(s1("read"));
          if (this._ownerReadableStream === void 0)
            return f(J("read from"));
          let p, m;
          const E = g((G, V) => {
            p = G, m = V;
          });
          return pa(this, {
            _chunkSteps: (G) => p({ value: G, done: !1 }),
            _closeSteps: () => p({ value: void 0, done: !0 }),
            _errorSteps: (G) => m(G)
          }), E;
        }
        /**
         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
         * from now on; otherwise, the reader will appear closed.
         *
         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to
         * do so will throw a `TypeError` and leave the reader locked to the stream.
         */
        releaseLock() {
          if (!Gt(this))
            throw s1("releaseLock");
          if (this._ownerReadableStream !== void 0) {
            if (this._readRequests.length > 0)
              throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
            M(this);
          }
        }
      }
      Object.defineProperties(oa.prototype, {
        cancel: { enumerable: !0 },
        read: { enumerable: !0 },
        releaseLock: { enumerable: !0 },
        closed: { enumerable: !0 }
      }), typeof a.toStringTag == "symbol" && Object.defineProperty(oa.prototype, a.toStringTag, {
        value: "ReadableStreamDefaultReader",
        configurable: !0
      });
      function Gt(n) {
        return !d(n) || !Object.prototype.hasOwnProperty.call(n, "_readRequests") ? !1 : n instanceof oa;
      }
      function pa(n, p) {
        const m = n._ownerReadableStream;
        m._disturbed = !0, m._state === "closed" ? p._closeSteps() : m._state === "errored" ? p._errorSteps(m._storedError) : m._readableStreamController[Me](p);
      }
      function s1(n) {
        return new TypeError(`ReadableStreamDefaultReader.prototype.${n} can only be used on a ReadableStreamDefaultReader`);
      }
      const Ns = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {
      }).prototype);
      class ks {
        constructor(p, m) {
          this._ongoingPromise = void 0, this._isFinished = !1, this._reader = p, this._preventCancel = m;
        }
        next() {
          const p = () => this._nextSteps();
          return this._ongoingPromise = this._ongoingPromise ? $(this._ongoingPromise, p, p) : p(), this._ongoingPromise;
        }
        return(p) {
          const m = () => this._returnSteps(p);
          return this._ongoingPromise ? $(this._ongoingPromise, m, m) : m();
        }
        _nextSteps() {
          if (this._isFinished)
            return Promise.resolve({ value: void 0, done: !0 });
          const p = this._reader;
          if (p._ownerReadableStream === void 0)
            return f(J("iterate"));
          let m, E;
          const B = g((V, z) => {
            m = V, E = z;
          });
          return pa(p, {
            _chunkSteps: (V) => {
              this._ongoingPromise = void 0, P(() => m({ value: V, done: !1 }));
            },
            _closeSteps: () => {
              this._ongoingPromise = void 0, this._isFinished = !0, M(p), m({ value: void 0, done: !0 });
            },
            _errorSteps: (V) => {
              this._ongoingPromise = void 0, this._isFinished = !0, M(p), E(V);
            }
          }), B;
        }
        _returnSteps(p) {
          if (this._isFinished)
            return Promise.resolve({ value: p, done: !0 });
          this._isFinished = !0;
          const m = this._reader;
          if (m._ownerReadableStream === void 0)
            return f(J("finish iterating"));
          if (!this._preventCancel) {
            const E = L(m, p);
            return M(m), $(E, () => ({ value: p, done: !0 }));
          }
          return M(m), w({ value: p, done: !0 });
        }
      }
      const Is = {
        next() {
          return Gs(this) ? this._asyncIteratorImpl.next() : f($s("next"));
        },
        return(n) {
          return Gs(this) ? this._asyncIteratorImpl.return(n) : f($s("return"));
        }
      };
      Ns !== void 0 && Object.setPrototypeOf(Is, Ns);
      function u2(n, p) {
        const m = pe(n), E = new ks(m, p), B = Object.create(Is);
        return B._asyncIteratorImpl = E, B;
      }
      function Gs(n) {
        if (!d(n) || !Object.prototype.hasOwnProperty.call(n, "_asyncIteratorImpl"))
          return !1;
        try {
          return n._asyncIteratorImpl instanceof ks;
        } catch {
          return !1;
        }
      }
      function $s(n) {
        return new TypeError(`ReadableStreamAsyncIterator.${n} can only be used on a ReadableSteamAsyncIterator`);
      }
      const Us = Number.isNaN || function(n) {
        return n !== n;
      };
      function da(n) {
        return n.slice();
      }
      function xs(n, p, m, E, B) {
        new Uint8Array(n).set(new Uint8Array(m, E, B), p);
      }
      function xc(n) {
        return n;
      }
      function o1(n) {
        return !1;
      }
      function Vs(n, p, m) {
        if (n.slice)
          return n.slice(p, m);
        const E = m - p, B = new ArrayBuffer(E);
        return xs(B, 0, n, p, E), B;
      }
      function m2(n) {
        return !(typeof n != "number" || Us(n) || n < 0);
      }
      function Ls(n) {
        const p = Vs(n.buffer, n.byteOffset, n.byteOffset + n.byteLength);
        return new Uint8Array(p);
      }
      function Vi(n) {
        const p = n._queue.shift();
        return n._queueTotalSize -= p.size, n._queueTotalSize < 0 && (n._queueTotalSize = 0), p.value;
      }
      function Li(n, p, m) {
        if (!m2(m) || m === 1 / 0)
          throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
        n._queue.push({ value: p, size: m }), n._queueTotalSize += m;
      }
      function c2(n) {
        return n._queue.peek().value;
      }
      function $t(n) {
        n._queue = new R(), n._queueTotalSize = 0;
      }
      class la {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.
         */
        get view() {
          if (!ji(this))
            throw zi("view");
          return this._view;
        }
        respond(p) {
          if (!ji(this))
            throw zi("respond");
          if (W(p, 1, "respond"), p = q(p, "First parameter"), this._associatedReadableByteStreamController === void 0)
            throw new TypeError("This BYOB request has been invalidated");
          o1(this._view.buffer), m1(this._associatedReadableByteStreamController, p);
        }
        respondWithNewView(p) {
          if (!ji(this))
            throw zi("respondWithNewView");
          if (W(p, 1, "respondWithNewView"), !ArrayBuffer.isView(p))
            throw new TypeError("You can only respond with array buffer views");
          if (this._associatedReadableByteStreamController === void 0)
            throw new TypeError("This BYOB request has been invalidated");
          o1(p.buffer), c1(this._associatedReadableByteStreamController, p);
        }
      }
      Object.defineProperties(la.prototype, {
        respond: { enumerable: !0 },
        respondWithNewView: { enumerable: !0 },
        view: { enumerable: !0 }
      }), typeof a.toStringTag == "symbol" && Object.defineProperty(la.prototype, a.toStringTag, {
        value: "ReadableStreamBYOBRequest",
        configurable: !0
      });
      class Ar {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * Returns the current BYOB pull request, or `null` if there isn't one.
         */
        get byobRequest() {
          if (!sr(this))
            throw ma("byobRequest");
          return Wi(this);
        }
        /**
         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.
         */
        get desiredSize() {
          if (!sr(this))
            throw ma("desiredSize");
          return Qs(this);
        }
        /**
         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
         * the stream, but once those are read, the stream will become closed.
         */
        close() {
          if (!sr(this))
            throw ma("close");
          if (this._closeRequested)
            throw new TypeError("The stream has already been closed; do not close it again!");
          const p = this._controlledReadableByteStream._state;
          if (p !== "readable")
            throw new TypeError(`The stream (in ${p} state) is not in the readable state and cannot be closed`);
          ua(this);
        }
        enqueue(p) {
          if (!sr(this))
            throw ma("enqueue");
          if (W(p, 1, "enqueue"), !ArrayBuffer.isView(p))
            throw new TypeError("chunk must be an array buffer view");
          if (p.byteLength === 0)
            throw new TypeError("chunk must have non-zero byteLength");
          if (p.buffer.byteLength === 0)
            throw new TypeError("chunk's buffer must have non-zero byteLength");
          if (this._closeRequested)
            throw new TypeError("stream is closed or draining");
          const m = this._controlledReadableByteStream._state;
          if (m !== "readable")
            throw new TypeError(`The stream (in ${m} state) is not in the readable state and cannot be enqueued to`);
          u1(this, p);
        }
        /**
         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
         */
        error(p = void 0) {
          if (!sr(this))
            throw ma("error");
          nt(this, p);
        }
        /** @internal */
        [me](p) {
          js(this), $t(this);
          const m = this._cancelAlgorithm(p);
          return l1(this), m;
        }
        /** @internal */
        [Me](p) {
          const m = this._controlledReadableByteStream;
          if (this._queueTotalSize > 0) {
            const B = this._queue.shift();
            this._queueTotalSize -= B.byteLength, zs(this);
            const G = new Uint8Array(B.buffer, B.byteOffset, B.byteLength);
            p._chunkSteps(G);
            return;
          }
          const E = this._autoAllocateChunkSize;
          if (E !== void 0) {
            let B;
            try {
              B = new ArrayBuffer(E);
            } catch (V) {
              p._errorSteps(V);
              return;
            }
            const G = {
              buffer: B,
              bufferByteLength: E,
              byteOffset: 0,
              byteLength: E,
              bytesFilled: 0,
              elementSize: 1,
              viewConstructor: Uint8Array,
              readerType: "default"
            };
            this._pendingPullIntos.push(G);
          }
          Ce(m, p), or(this);
        }
      }
      Object.defineProperties(Ar.prototype, {
        close: { enumerable: !0 },
        enqueue: { enumerable: !0 },
        error: { enumerable: !0 },
        byobRequest: { enumerable: !0 },
        desiredSize: { enumerable: !0 }
      }), typeof a.toStringTag == "symbol" && Object.defineProperty(Ar.prototype, a.toStringTag, {
        value: "ReadableByteStreamController",
        configurable: !0
      });
      function sr(n) {
        return !d(n) || !Object.prototype.hasOwnProperty.call(n, "_controlledReadableByteStream") ? !1 : n instanceof Ar;
      }
      function ji(n) {
        return !d(n) || !Object.prototype.hasOwnProperty.call(n, "_associatedReadableByteStreamController") ? !1 : n instanceof la;
      }
      function or(n) {
        if (!v2(n))
          return;
        if (n._pulling) {
          n._pullAgain = !0;
          return;
        }
        n._pulling = !0;
        const m = n._pullAlgorithm();
        y(m, () => {
          n._pulling = !1, n._pullAgain && (n._pullAgain = !1, or(n));
        }, (E) => {
          nt(n, E);
        });
      }
      function js(n) {
        qi(n), n._pendingPullIntos = new R();
      }
      function Mi(n, p) {
        let m = !1;
        n._state === "closed" && (m = !0);
        const E = Ms(p);
        p.readerType === "default" ? Ee(n, E, m) : b2(n, E, m);
      }
      function Ms(n) {
        const p = n.bytesFilled, m = n.elementSize;
        return new n.viewConstructor(n.buffer, n.byteOffset, p / m);
      }
      function p1(n, p, m, E) {
        n._queue.push({ buffer: p, byteOffset: m, byteLength: E }), n._queueTotalSize += E;
      }
      function qs(n, p) {
        const m = p.elementSize, E = p.bytesFilled - p.bytesFilled % m, B = Math.min(n._queueTotalSize, p.byteLength - p.bytesFilled), G = p.bytesFilled + B, V = G - G % m;
        let z = B, ie = !1;
        V > E && (z = V - p.bytesFilled, ie = !0);
        const oe = n._queue;
        for (; z > 0; ) {
          const de = oe.peek(), le = Math.min(z, de.byteLength), be = p.byteOffset + p.bytesFilled;
          xs(p.buffer, be, de.buffer, de.byteOffset, le), de.byteLength === le ? oe.shift() : (de.byteOffset += le, de.byteLength -= le), n._queueTotalSize -= le, Ws(n, le, p), z -= le;
        }
        return ie;
      }
      function Ws(n, p, m) {
        m.bytesFilled += p;
      }
      function zs(n) {
        n._queueTotalSize === 0 && n._closeRequested ? (l1(n), ba(n._controlledReadableByteStream)) : or(n);
      }
      function qi(n) {
        n._byobRequest !== null && (n._byobRequest._associatedReadableByteStreamController = void 0, n._byobRequest._view = null, n._byobRequest = null);
      }
      function Hs(n) {
        for (; n._pendingPullIntos.length > 0; ) {
          if (n._queueTotalSize === 0)
            return;
          const p = n._pendingPullIntos.peek();
          qs(n, p) && (d1(n), Mi(n._controlledReadableByteStream, p));
        }
      }
      function f2(n, p, m) {
        const E = n._controlledReadableByteStream;
        let B = 1;
        p.constructor !== DataView && (B = p.constructor.BYTES_PER_ELEMENT);
        const G = p.constructor, V = p.buffer, z = {
          buffer: V,
          bufferByteLength: V.byteLength,
          byteOffset: p.byteOffset,
          byteLength: p.byteLength,
          bytesFilled: 0,
          elementSize: B,
          viewConstructor: G,
          readerType: "byob"
        };
        if (n._pendingPullIntos.length > 0) {
          n._pendingPullIntos.push(z), Zs(E, m);
          return;
        }
        if (E._state === "closed") {
          const ie = new G(z.buffer, z.byteOffset, 0);
          m._closeSteps(ie);
          return;
        }
        if (n._queueTotalSize > 0) {
          if (qs(n, z)) {
            const ie = Ms(z);
            zs(n), m._chunkSteps(ie);
            return;
          }
          if (n._closeRequested) {
            const ie = new TypeError("Insufficient bytes to fill elements in the given buffer");
            nt(n, ie), m._errorSteps(ie);
            return;
          }
        }
        n._pendingPullIntos.push(z), Zs(E, m), or(n);
      }
      function h2(n, p) {
        const m = n._controlledReadableByteStream;
        if (Hi(m))
          for (; Xs(m) > 0; ) {
            const E = d1(n);
            Mi(m, E);
          }
      }
      function g2(n, p, m) {
        if (Ws(n, p, m), m.bytesFilled < m.elementSize)
          return;
        d1(n);
        const E = m.bytesFilled % m.elementSize;
        if (E > 0) {
          const B = m.byteOffset + m.bytesFilled, G = Vs(m.buffer, B - E, B);
          p1(n, G, 0, G.byteLength);
        }
        m.bytesFilled -= E, Mi(n._controlledReadableByteStream, m), Hs(n);
      }
      function Ks(n, p) {
        const m = n._pendingPullIntos.peek();
        qi(n), n._controlledReadableByteStream._state === "closed" ? h2(n) : g2(n, p, m), or(n);
      }
      function d1(n) {
        return n._pendingPullIntos.shift();
      }
      function v2(n) {
        const p = n._controlledReadableByteStream;
        return p._state !== "readable" || n._closeRequested || !n._started ? !1 : !!(n1(p) && ft(p) > 0 || Hi(p) && Xs(p) > 0 || Qs(n) > 0);
      }
      function l1(n) {
        n._pullAlgorithm = void 0, n._cancelAlgorithm = void 0;
      }
      function ua(n) {
        const p = n._controlledReadableByteStream;
        if (!(n._closeRequested || p._state !== "readable")) {
          if (n._queueTotalSize > 0) {
            n._closeRequested = !0;
            return;
          }
          if (n._pendingPullIntos.length > 0 && n._pendingPullIntos.peek().bytesFilled > 0) {
            const E = new TypeError("Insufficient bytes to fill elements in the given buffer");
            throw nt(n, E), E;
          }
          l1(n), ba(p);
        }
      }
      function u1(n, p) {
        const m = n._controlledReadableByteStream;
        if (n._closeRequested || m._state !== "readable")
          return;
        const E = p.buffer, B = p.byteOffset, G = p.byteLength, V = E;
        if (n._pendingPullIntos.length > 0) {
          const z = n._pendingPullIntos.peek();
          o1(z.buffer), z.buffer = z.buffer;
        }
        if (qi(n), n1(m))
          if (ft(m) === 0)
            p1(n, V, B, G);
          else {
            n._pendingPullIntos.length > 0 && d1(n);
            const z = new Uint8Array(V, B, G);
            Ee(m, z, !1);
          }
        else
          Hi(m) ? (p1(n, V, B, G), Hs(n)) : p1(n, V, B, G);
        or(n);
      }
      function nt(n, p) {
        const m = n._controlledReadableByteStream;
        m._state === "readable" && (js(n), $t(n), l1(n), So(m, p));
      }
      function Wi(n) {
        if (n._byobRequest === null && n._pendingPullIntos.length > 0) {
          const p = n._pendingPullIntos.peek(), m = new Uint8Array(p.buffer, p.byteOffset + p.bytesFilled, p.byteLength - p.bytesFilled), E = Object.create(la.prototype);
          _2(E, n, m), n._byobRequest = E;
        }
        return n._byobRequest;
      }
      function Qs(n) {
        const p = n._controlledReadableByteStream._state;
        return p === "errored" ? null : p === "closed" ? 0 : n._strategyHWM - n._queueTotalSize;
      }
      function m1(n, p) {
        const m = n._pendingPullIntos.peek();
        if (n._controlledReadableByteStream._state === "closed") {
          if (p !== 0)
            throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
        } else {
          if (p === 0)
            throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
          if (m.bytesFilled + p > m.byteLength)
            throw new RangeError("bytesWritten out of range");
        }
        m.buffer = m.buffer, Ks(n, p);
      }
      function c1(n, p) {
        const m = n._pendingPullIntos.peek();
        if (n._controlledReadableByteStream._state === "closed") {
          if (p.byteLength !== 0)
            throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream");
        } else if (p.byteLength === 0)
          throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");
        if (m.byteOffset + m.bytesFilled !== p.byteOffset)
          throw new RangeError("The region specified by view does not match byobRequest");
        if (m.bufferByteLength !== p.buffer.byteLength)
          throw new RangeError("The buffer of view has different capacity than byobRequest");
        if (m.bytesFilled + p.byteLength > m.byteLength)
          throw new RangeError("The region specified by view is larger than byobRequest");
        const B = p.byteLength;
        m.buffer = p.buffer, Ks(n, B);
      }
      function Ys(n, p, m, E, B, G, V) {
        p._controlledReadableByteStream = n, p._pullAgain = !1, p._pulling = !1, p._byobRequest = null, p._queue = p._queueTotalSize = void 0, $t(p), p._closeRequested = !1, p._started = !1, p._strategyHWM = G, p._pullAlgorithm = E, p._cancelAlgorithm = B, p._autoAllocateChunkSize = V, p._pendingPullIntos = new R(), n._readableStreamController = p;
        const z = m();
        y(w(z), () => {
          p._started = !0, or(p);
        }, (ie) => {
          nt(p, ie);
        });
      }
      function w2(n, p, m) {
        const E = Object.create(Ar.prototype);
        let B = () => {
        }, G = () => w(void 0), V = () => w(void 0);
        p.start !== void 0 && (B = () => p.start(E)), p.pull !== void 0 && (G = () => p.pull(E)), p.cancel !== void 0 && (V = (ie) => p.cancel(ie));
        const z = p.autoAllocateChunkSize;
        if (z === 0)
          throw new TypeError("autoAllocateChunkSize must be greater than 0");
        Ys(n, E, B, G, V, m, z);
      }
      function _2(n, p, m) {
        n._associatedReadableByteStreamController = p, n._view = m;
      }
      function zi(n) {
        return new TypeError(`ReadableStreamBYOBRequest.prototype.${n} can only be used on a ReadableStreamBYOBRequest`);
      }
      function ma(n) {
        return new TypeError(`ReadableByteStreamController.prototype.${n} can only be used on a ReadableByteStreamController`);
      }
      function Js(n) {
        return new ca(n);
      }
      function Zs(n, p) {
        n._reader._readIntoRequests.push(p);
      }
      function b2(n, p, m) {
        const B = n._reader._readIntoRequests.shift();
        m ? B._closeSteps(p) : B._chunkSteps(p);
      }
      function Xs(n) {
        return n._reader._readIntoRequests.length;
      }
      function Hi(n) {
        const p = n._reader;
        return !(p === void 0 || !pr(p));
      }
      class ca {
        constructor(p) {
          if (W(p, 1, "ReadableStreamBYOBReader"), Q(p, "First parameter"), Lt(p))
            throw new TypeError("This stream has already been locked for exclusive reading by another reader");
          if (!sr(p._readableStreamController))
            throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
          U(this, p), this._readIntoRequests = new R();
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
         * the reader's lock is released before the stream finishes closing.
         */
        get closed() {
          return pr(this) ? this._closedPromise : f(f1("closed"));
        }
        /**
         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
         */
        cancel(p = void 0) {
          return pr(this) ? this._ownerReadableStream === void 0 ? f(J("cancel")) : L(this, p) : f(f1("cancel"));
        }
        /**
         * Attempts to reads bytes into view, and returns a promise resolved with the result.
         *
         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.
         */
        read(p) {
          if (!pr(this))
            return f(f1("read"));
          if (!ArrayBuffer.isView(p))
            return f(new TypeError("view must be an array buffer view"));
          if (p.byteLength === 0)
            return f(new TypeError("view must have non-zero byteLength"));
          if (p.buffer.byteLength === 0)
            return f(new TypeError("view's buffer must have non-zero byteLength"));
          if (o1(p.buffer), this._ownerReadableStream === void 0)
            return f(J("read from"));
          let m, E;
          const B = g((V, z) => {
            m = V, E = z;
          });
          return eo(this, p, {
            _chunkSteps: (V) => m({ value: V, done: !1 }),
            _closeSteps: (V) => m({ value: V, done: !0 }),
            _errorSteps: (V) => E(V)
          }), B;
        }
        /**
         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
         * from now on; otherwise, the reader will appear closed.
         *
         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to
         * do so will throw a `TypeError` and leave the reader locked to the stream.
         */
        releaseLock() {
          if (!pr(this))
            throw f1("releaseLock");
          if (this._ownerReadableStream !== void 0) {
            if (this._readIntoRequests.length > 0)
              throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
            M(this);
          }
        }
      }
      Object.defineProperties(ca.prototype, {
        cancel: { enumerable: !0 },
        read: { enumerable: !0 },
        releaseLock: { enumerable: !0 },
        closed: { enumerable: !0 }
      }), typeof a.toStringTag == "symbol" && Object.defineProperty(ca.prototype, a.toStringTag, {
        value: "ReadableStreamBYOBReader",
        configurable: !0
      });
      function pr(n) {
        return !d(n) || !Object.prototype.hasOwnProperty.call(n, "_readIntoRequests") ? !1 : n instanceof ca;
      }
      function eo(n, p, m) {
        const E = n._ownerReadableStream;
        E._disturbed = !0, E._state === "errored" ? m._errorSteps(E._storedError) : f2(E._readableStreamController, p, m);
      }
      function f1(n) {
        return new TypeError(`ReadableStreamBYOBReader.prototype.${n} can only be used on a ReadableStreamBYOBReader`);
      }
      function fa(n, p) {
        const { highWaterMark: m } = n;
        if (m === void 0)
          return p;
        if (Us(m) || m < 0)
          throw new RangeError("Invalid highWaterMark");
        return m;
      }
      function h1(n) {
        const { size: p } = n;
        return p || (() => 1);
      }
      function g1(n, p) {
        Be(n, p);
        const m = n == null ? void 0 : n.highWaterMark, E = n == null ? void 0 : n.size;
        return {
          highWaterMark: m === void 0 ? void 0 : _(m),
          size: E === void 0 ? void 0 : y2(E, `${p} has member 'size' that`)
        };
      }
      function y2(n, p) {
        return ae(n, p), (m) => _(n(m));
      }
      function E2(n, p) {
        Be(n, p);
        const m = n == null ? void 0 : n.abort, E = n == null ? void 0 : n.close, B = n == null ? void 0 : n.start, G = n == null ? void 0 : n.type, V = n == null ? void 0 : n.write;
        return {
          abort: m === void 0 ? void 0 : T2(m, n, `${p} has member 'abort' that`),
          close: E === void 0 ? void 0 : S2(E, n, `${p} has member 'close' that`),
          start: B === void 0 ? void 0 : A2(B, n, `${p} has member 'start' that`),
          write: V === void 0 ? void 0 : C2(V, n, `${p} has member 'write' that`),
          type: G
        };
      }
      function T2(n, p, m) {
        return ae(n, m), (E) => A(n, p, [E]);
      }
      function S2(n, p, m) {
        return ae(n, m), () => A(n, p, []);
      }
      function A2(n, p, m) {
        return ae(n, m), (E) => C(n, p, [E]);
      }
      function C2(n, p, m) {
        return ae(n, m), (E, B) => A(n, p, [E, B]);
      }
      function to(n, p) {
        if (!Cr(n))
          throw new TypeError(`${p} is not a WritableStream.`);
      }
      function D2(n) {
        if (typeof n != "object" || n === null)
          return !1;
        try {
          return typeof n.aborted == "boolean";
        } catch {
          return !1;
        }
      }
      const R2 = typeof AbortController == "function";
      function O2() {
        if (R2)
          return new AbortController();
      }
      class ha {
        constructor(p = {}, m = {}) {
          p === void 0 ? p = null : F(p, "First parameter");
          const E = g1(m, "Second parameter"), B = E2(p, "First parameter");
          if (ao(this), B.type !== void 0)
            throw new RangeError("Invalid type is specified");
          const V = h1(E), z = fa(E, 1);
          M2(this, B, z, V);
        }
        /**
         * Returns whether or not the writable stream is locked to a writer.
         */
        get locked() {
          if (!Cr(this))
            throw y1("locked");
          return Dr(this);
        }
        /**
         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be
         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort
         * mechanism of the underlying sink.
         *
         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled
         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel
         * the stream) if the stream is currently locked.
         */
        abort(p = void 0) {
          return Cr(this) ? Dr(this) ? f(new TypeError("Cannot abort a stream that already has a writer")) : v1(this, p) : f(y1("abort"));
        }
        /**
         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its
         * close behavior. During this time any further attempts to write will fail (without erroring the stream).
         *
         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream
         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with
         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.
         */
        close() {
          return Cr(this) ? Dr(this) ? f(new TypeError("Cannot close a stream that already has a writer")) : ht(this) ? f(new TypeError("Cannot close an already-closing stream")) : io(this) : f(y1("close"));
        }
        /**
         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream
         * is locked, no other writer can be acquired until this one is released.
         *
         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream
         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at
         * the same time, which would cause the resulting written data to be unpredictable and probably useless.
         */
        getWriter() {
          if (!Cr(this))
            throw y1("getWriter");
          return ro(this);
        }
      }
      Object.defineProperties(ha.prototype, {
        abort: { enumerable: !0 },
        close: { enumerable: !0 },
        getWriter: { enumerable: !0 },
        locked: { enumerable: !0 }
      }), typeof a.toStringTag == "symbol" && Object.defineProperty(ha.prototype, a.toStringTag, {
        value: "WritableStream",
        configurable: !0
      });
      function ro(n) {
        return new ga(n);
      }
      function P2(n, p, m, E, B = 1, G = () => 1) {
        const V = Object.create(ha.prototype);
        ao(V);
        const z = Object.create(Rr.prototype);
        return uo(V, z, n, p, m, E, B, G), V;
      }
      function ao(n) {
        n._state = "writable", n._storedError = void 0, n._writer = void 0, n._writableStreamController = void 0, n._writeRequests = new R(), n._inFlightWriteRequest = void 0, n._closeRequest = void 0, n._inFlightCloseRequest = void 0, n._pendingAbortRequest = void 0, n._backpressure = !1;
      }
      function Cr(n) {
        return !d(n) || !Object.prototype.hasOwnProperty.call(n, "_writableStreamController") ? !1 : n instanceof ha;
      }
      function Dr(n) {
        return n._writer !== void 0;
      }
      function v1(n, p) {
        var m;
        if (n._state === "closed" || n._state === "errored")
          return w(void 0);
        n._writableStreamController._abortReason = p, (m = n._writableStreamController._abortController) === null || m === void 0 || m.abort();
        const E = n._state;
        if (E === "closed" || E === "errored")
          return w(void 0);
        if (n._pendingAbortRequest !== void 0)
          return n._pendingAbortRequest._promise;
        let B = !1;
        E === "erroring" && (B = !0, p = void 0);
        const G = g((V, z) => {
          n._pendingAbortRequest = {
            _promise: void 0,
            _resolve: V,
            _reject: z,
            _reason: p,
            _wasAlreadyErroring: B
          };
        });
        return n._pendingAbortRequest._promise = G, B || Qi(n, p), G;
      }
      function io(n) {
        const p = n._state;
        if (p === "closed" || p === "errored")
          return f(new TypeError(`The stream (in ${p} state) is not in the writable state and cannot be closed`));
        const m = g((B, G) => {
          const V = {
            _resolve: B,
            _reject: G
          };
          n._closeRequest = V;
        }), E = n._writer;
        return E !== void 0 && n._backpressure && p === "writable" && nn(E), q2(n._writableStreamController), m;
      }
      function B2(n) {
        return g((m, E) => {
          const B = {
            _resolve: m,
            _reject: E
          };
          n._writeRequests.push(B);
        });
      }
      function Ki(n, p) {
        if (n._state === "writable") {
          Qi(n, p);
          return;
        }
        Yi(n);
      }
      function Qi(n, p) {
        const m = n._writableStreamController;
        n._state = "erroring", n._storedError = p;
        const E = n._writer;
        E !== void 0 && so(E, p), !G2(n) && m._started && Yi(n);
      }
      function Yi(n) {
        n._state = "errored", n._writableStreamController[re]();
        const p = n._storedError;
        if (n._writeRequests.forEach((B) => {
          B._reject(p);
        }), n._writeRequests = new R(), n._pendingAbortRequest === void 0) {
          w1(n);
          return;
        }
        const m = n._pendingAbortRequest;
        if (n._pendingAbortRequest = void 0, m._wasAlreadyErroring) {
          m._reject(p), w1(n);
          return;
        }
        const E = n._writableStreamController[K](m._reason);
        y(E, () => {
          m._resolve(), w1(n);
        }, (B) => {
          m._reject(B), w1(n);
        });
      }
      function F2(n) {
        n._inFlightWriteRequest._resolve(void 0), n._inFlightWriteRequest = void 0;
      }
      function N2(n, p) {
        n._inFlightWriteRequest._reject(p), n._inFlightWriteRequest = void 0, Ki(n, p);
      }
      function k2(n) {
        n._inFlightCloseRequest._resolve(void 0), n._inFlightCloseRequest = void 0, n._state === "erroring" && (n._storedError = void 0, n._pendingAbortRequest !== void 0 && (n._pendingAbortRequest._resolve(), n._pendingAbortRequest = void 0)), n._state = "closed";
        const m = n._writer;
        m !== void 0 && ho(m);
      }
      function I2(n, p) {
        n._inFlightCloseRequest._reject(p), n._inFlightCloseRequest = void 0, n._pendingAbortRequest !== void 0 && (n._pendingAbortRequest._reject(p), n._pendingAbortRequest = void 0), Ki(n, p);
      }
      function ht(n) {
        return !(n._closeRequest === void 0 && n._inFlightCloseRequest === void 0);
      }
      function G2(n) {
        return !(n._inFlightWriteRequest === void 0 && n._inFlightCloseRequest === void 0);
      }
      function $2(n) {
        n._inFlightCloseRequest = n._closeRequest, n._closeRequest = void 0;
      }
      function U2(n) {
        n._inFlightWriteRequest = n._writeRequests.shift();
      }
      function w1(n) {
        n._closeRequest !== void 0 && (n._closeRequest._reject(n._storedError), n._closeRequest = void 0);
        const p = n._writer;
        p !== void 0 && rn(p, n._storedError);
      }
      function Ji(n, p) {
        const m = n._writer;
        m !== void 0 && p !== n._backpressure && (p ? J2(m) : nn(m)), n._backpressure = p;
      }
      class ga {
        constructor(p) {
          if (W(p, 1, "WritableStreamDefaultWriter"), to(p, "First parameter"), Dr(p))
            throw new TypeError("This stream has already been locked for exclusive writing by another writer");
          this._ownerWritableStream = p, p._writer = this;
          const m = p._state;
          if (m === "writable")
            !ht(p) && p._backpressure ? T1(this) : go(this), E1(this);
          else if (m === "erroring")
            an(this, p._storedError), E1(this);
          else if (m === "closed")
            go(this), Q2(this);
          else {
            const E = p._storedError;
            an(this, E), fo(this, E);
          }
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
         * the writer’s lock is released before the stream finishes closing.
         */
        get closed() {
          return dr(this) ? this._closedPromise : f(lr("closed"));
        }
        /**
         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.
         * A producer can use this information to determine the right amount of data to write.
         *
         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort
         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when
         * the writer’s lock is released.
         */
        get desiredSize() {
          if (!dr(this))
            throw lr("desiredSize");
          if (this._ownerWritableStream === void 0)
            throw va("desiredSize");
          return j2(this);
        }
        /**
         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions
         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips
         * back to zero or below, the getter will return a new promise that stays pending until the next transition.
         *
         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become
         * rejected.
         */
        get ready() {
          return dr(this) ? this._readyPromise : f(lr("ready"));
        }
        /**
         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.
         */
        abort(p = void 0) {
          return dr(this) ? this._ownerWritableStream === void 0 ? f(va("abort")) : x2(this, p) : f(lr("abort"));
        }
        /**
         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.
         */
        close() {
          if (!dr(this))
            return f(lr("close"));
          const p = this._ownerWritableStream;
          return p === void 0 ? f(va("close")) : ht(p) ? f(new TypeError("Cannot close an already-closing stream")) : no(this);
        }
        /**
         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.
         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from
         * now on; otherwise, the writer will appear closed.
         *
         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the
         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).
         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents
         * other producers from writing in an interleaved manner.
         */
        releaseLock() {
          if (!dr(this))
            throw lr("releaseLock");
          this._ownerWritableStream !== void 0 && oo(this);
        }
        write(p = void 0) {
          return dr(this) ? this._ownerWritableStream === void 0 ? f(va("write to")) : po(this, p) : f(lr("write"));
        }
      }
      Object.defineProperties(ga.prototype, {
        abort: { enumerable: !0 },
        close: { enumerable: !0 },
        releaseLock: { enumerable: !0 },
        write: { enumerable: !0 },
        closed: { enumerable: !0 },
        desiredSize: { enumerable: !0 },
        ready: { enumerable: !0 }
      }), typeof a.toStringTag == "symbol" && Object.defineProperty(ga.prototype, a.toStringTag, {
        value: "WritableStreamDefaultWriter",
        configurable: !0
      });
      function dr(n) {
        return !d(n) || !Object.prototype.hasOwnProperty.call(n, "_ownerWritableStream") ? !1 : n instanceof ga;
      }
      function x2(n, p) {
        const m = n._ownerWritableStream;
        return v1(m, p);
      }
      function no(n) {
        const p = n._ownerWritableStream;
        return io(p);
      }
      function V2(n) {
        const p = n._ownerWritableStream, m = p._state;
        return ht(p) || m === "closed" ? w(void 0) : m === "errored" ? f(p._storedError) : no(n);
      }
      function L2(n, p) {
        n._closedPromiseState === "pending" ? rn(n, p) : Y2(n, p);
      }
      function so(n, p) {
        n._readyPromiseState === "pending" ? vo(n, p) : Z2(n, p);
      }
      function j2(n) {
        const p = n._ownerWritableStream, m = p._state;
        return m === "errored" || m === "erroring" ? null : m === "closed" ? 0 : mo(p._writableStreamController);
      }
      function oo(n) {
        const p = n._ownerWritableStream, m = new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");
        so(n, m), L2(n, m), p._writer = void 0, n._ownerWritableStream = void 0;
      }
      function po(n, p) {
        const m = n._ownerWritableStream, E = m._writableStreamController, B = W2(E, p);
        if (m !== n._ownerWritableStream)
          return f(va("write to"));
        const G = m._state;
        if (G === "errored")
          return f(m._storedError);
        if (ht(m) || G === "closed")
          return f(new TypeError("The stream is closing or closed and cannot be written to"));
        if (G === "erroring")
          return f(m._storedError);
        const V = B2(m);
        return z2(E, p, B), V;
      }
      const lo = {};
      class Rr {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.
         *
         * @deprecated
         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.
         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.
         */
        get abortReason() {
          if (!Zi(this))
            throw tn("abortReason");
          return this._abortReason;
        }
        /**
         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.
         */
        get signal() {
          if (!Zi(this))
            throw tn("signal");
          if (this._abortController === void 0)
            throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
          return this._abortController.signal;
        }
        /**
         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.
         *
         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying
         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the
         * normal lifecycle of interactions with the underlying sink.
         */
        error(p = void 0) {
          if (!Zi(this))
            throw tn("error");
          this._controlledWritableStream._state === "writable" && co(this, p);
        }
        /** @internal */
        [K](p) {
          const m = this._abortAlgorithm(p);
          return _1(this), m;
        }
        /** @internal */
        [re]() {
          $t(this);
        }
      }
      Object.defineProperties(Rr.prototype, {
        abortReason: { enumerable: !0 },
        signal: { enumerable: !0 },
        error: { enumerable: !0 }
      }), typeof a.toStringTag == "symbol" && Object.defineProperty(Rr.prototype, a.toStringTag, {
        value: "WritableStreamDefaultController",
        configurable: !0
      });
      function Zi(n) {
        return !d(n) || !Object.prototype.hasOwnProperty.call(n, "_controlledWritableStream") ? !1 : n instanceof Rr;
      }
      function uo(n, p, m, E, B, G, V, z) {
        p._controlledWritableStream = n, n._writableStreamController = p, p._queue = void 0, p._queueTotalSize = void 0, $t(p), p._abortReason = void 0, p._abortController = O2(), p._started = !1, p._strategySizeAlgorithm = z, p._strategyHWM = V, p._writeAlgorithm = E, p._closeAlgorithm = B, p._abortAlgorithm = G;
        const ie = en(p);
        Ji(n, ie);
        const oe = m(), de = w(oe);
        y(de, () => {
          p._started = !0, b1(p);
        }, (le) => {
          p._started = !0, Ki(n, le);
        });
      }
      function M2(n, p, m, E) {
        const B = Object.create(Rr.prototype);
        let G = () => {
        }, V = () => w(void 0), z = () => w(void 0), ie = () => w(void 0);
        p.start !== void 0 && (G = () => p.start(B)), p.write !== void 0 && (V = (oe) => p.write(oe, B)), p.close !== void 0 && (z = () => p.close()), p.abort !== void 0 && (ie = (oe) => p.abort(oe)), uo(n, B, G, V, z, ie, m, E);
      }
      function _1(n) {
        n._writeAlgorithm = void 0, n._closeAlgorithm = void 0, n._abortAlgorithm = void 0, n._strategySizeAlgorithm = void 0;
      }
      function q2(n) {
        Li(n, lo, 0), b1(n);
      }
      function W2(n, p) {
        try {
          return n._strategySizeAlgorithm(p);
        } catch (m) {
          return Xi(n, m), 1;
        }
      }
      function mo(n) {
        return n._strategyHWM - n._queueTotalSize;
      }
      function z2(n, p, m) {
        try {
          Li(n, p, m);
        } catch (B) {
          Xi(n, B);
          return;
        }
        const E = n._controlledWritableStream;
        if (!ht(E) && E._state === "writable") {
          const B = en(n);
          Ji(E, B);
        }
        b1(n);
      }
      function b1(n) {
        const p = n._controlledWritableStream;
        if (!n._started || p._inFlightWriteRequest !== void 0)
          return;
        if (p._state === "erroring") {
          Yi(p);
          return;
        }
        if (n._queue.length === 0)
          return;
        const E = c2(n);
        E === lo ? H2(n) : K2(n, E);
      }
      function Xi(n, p) {
        n._controlledWritableStream._state === "writable" && co(n, p);
      }
      function H2(n) {
        const p = n._controlledWritableStream;
        $2(p), Vi(n);
        const m = n._closeAlgorithm();
        _1(n), y(m, () => {
          k2(p);
        }, (E) => {
          I2(p, E);
        });
      }
      function K2(n, p) {
        const m = n._controlledWritableStream;
        U2(m);
        const E = n._writeAlgorithm(p);
        y(E, () => {
          F2(m);
          const B = m._state;
          if (Vi(n), !ht(m) && B === "writable") {
            const G = en(n);
            Ji(m, G);
          }
          b1(n);
        }, (B) => {
          m._state === "writable" && _1(n), N2(m, B);
        });
      }
      function en(n) {
        return mo(n) <= 0;
      }
      function co(n, p) {
        const m = n._controlledWritableStream;
        _1(n), Qi(m, p);
      }
      function y1(n) {
        return new TypeError(`WritableStream.prototype.${n} can only be used on a WritableStream`);
      }
      function tn(n) {
        return new TypeError(`WritableStreamDefaultController.prototype.${n} can only be used on a WritableStreamDefaultController`);
      }
      function lr(n) {
        return new TypeError(`WritableStreamDefaultWriter.prototype.${n} can only be used on a WritableStreamDefaultWriter`);
      }
      function va(n) {
        return new TypeError("Cannot " + n + " a stream using a released writer");
      }
      function E1(n) {
        n._closedPromise = g((p, m) => {
          n._closedPromise_resolve = p, n._closedPromise_reject = m, n._closedPromiseState = "pending";
        });
      }
      function fo(n, p) {
        E1(n), rn(n, p);
      }
      function Q2(n) {
        E1(n), ho(n);
      }
      function rn(n, p) {
        n._closedPromise_reject !== void 0 && (O(n._closedPromise), n._closedPromise_reject(p), n._closedPromise_resolve = void 0, n._closedPromise_reject = void 0, n._closedPromiseState = "rejected");
      }
      function Y2(n, p) {
        fo(n, p);
      }
      function ho(n) {
        n._closedPromise_resolve !== void 0 && (n._closedPromise_resolve(void 0), n._closedPromise_resolve = void 0, n._closedPromise_reject = void 0, n._closedPromiseState = "resolved");
      }
      function T1(n) {
        n._readyPromise = g((p, m) => {
          n._readyPromise_resolve = p, n._readyPromise_reject = m;
        }), n._readyPromiseState = "pending";
      }
      function an(n, p) {
        T1(n), vo(n, p);
      }
      function go(n) {
        T1(n), nn(n);
      }
      function vo(n, p) {
        n._readyPromise_reject !== void 0 && (O(n._readyPromise), n._readyPromise_reject(p), n._readyPromise_resolve = void 0, n._readyPromise_reject = void 0, n._readyPromiseState = "rejected");
      }
      function J2(n) {
        T1(n);
      }
      function Z2(n, p) {
        an(n, p);
      }
      function nn(n) {
        n._readyPromise_resolve !== void 0 && (n._readyPromise_resolve(void 0), n._readyPromise_resolve = void 0, n._readyPromise_reject = void 0, n._readyPromiseState = "fulfilled");
      }
      const wo = typeof DOMException < "u" ? DOMException : void 0;
      function X2(n) {
        if (!(typeof n == "function" || typeof n == "object"))
          return !1;
        try {
          return new n(), !0;
        } catch {
          return !1;
        }
      }
      function e0() {
        const n = function(m, E) {
          this.message = m || "", this.name = E || "Error", Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
        };
        return n.prototype = Object.create(Error.prototype), Object.defineProperty(n.prototype, "constructor", { value: n, writable: !0, configurable: !0 }), n;
      }
      const t0 = X2(wo) ? wo : e0();
      function _o(n, p, m, E, B, G) {
        const V = pe(n), z = ro(p);
        n._disturbed = !0;
        let ie = !1, oe = w(void 0);
        return g((de, le) => {
          let be;
          if (G !== void 0) {
            if (be = () => {
              const Z = new t0("Aborted", "AbortError"), se = [];
              E || se.push(() => p._state === "writable" ? v1(p, Z) : w(void 0)), B || se.push(() => n._state === "readable" ? st(n, Z) : w(void 0)), We(() => Promise.all(se.map((he) => he())), !0, Z);
            }, G.aborted) {
              be();
              return;
            }
            G.addEventListener("abort", be);
          }
          function ot() {
            return g((Z, se) => {
              function he(Ye) {
                Ye ? Z() : b(Br(), he, se);
              }
              he(!1);
            });
          }
          function Br() {
            return ie ? w(!0) : b(z._readyPromise, () => g((Z, se) => {
              pa(V, {
                _chunkSteps: (he) => {
                  oe = b(po(z, he), void 0, i), Z(!1);
                },
                _closeSteps: () => Z(!0),
                _errorSteps: se
              });
            }));
          }
          if (St(n, V._closedPromise, (Z) => {
            E ? et(!0, Z) : We(() => v1(p, Z), !0, Z);
          }), St(p, z._closedPromise, (Z) => {
            B ? et(!0, Z) : We(() => st(n, Z), !0, Z);
          }), Le(n, V._closedPromise, () => {
            m ? et() : We(() => V2(z));
          }), ht(p) || p._state === "closed") {
            const Z = new TypeError("the destination writable stream closed before all data could be piped to it");
            B ? et(!0, Z) : We(() => st(n, Z), !0, Z);
          }
          O(ot());
          function jt() {
            const Z = oe;
            return b(oe, () => Z !== oe ? jt() : void 0);
          }
          function St(Z, se, he) {
            Z._state === "errored" ? he(Z._storedError) : N(se, he);
          }
          function Le(Z, se, he) {
            Z._state === "closed" ? he() : k(se, he);
          }
          function We(Z, se, he) {
            if (ie)
              return;
            ie = !0, p._state === "writable" && !ht(p) ? k(jt(), Ye) : Ye();
            function Ye() {
              y(Z(), () => At(se, he), (Fr) => At(!0, Fr));
            }
          }
          function et(Z, se) {
            ie || (ie = !0, p._state === "writable" && !ht(p) ? k(jt(), () => At(Z, se)) : At(Z, se));
          }
          function At(Z, se) {
            oo(z), M(V), G !== void 0 && G.removeEventListener("abort", be), Z ? le(se) : de(void 0);
          }
        });
      }
      class Or {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.
         */
        get desiredSize() {
          if (!S1(this))
            throw D1("desiredSize");
          return sn(this);
        }
        /**
         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
         * the stream, but once those are read, the stream will become closed.
         */
        close() {
          if (!S1(this))
            throw D1("close");
          if (!Pr(this))
            throw new TypeError("The stream is not in a state that permits close");
          _a(this);
        }
        enqueue(p = void 0) {
          if (!S1(this))
            throw D1("enqueue");
          if (!Pr(this))
            throw new TypeError("The stream is not in a state that permits enqueue");
          return C1(this, p);
        }
        /**
         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
         */
        error(p = void 0) {
          if (!S1(this))
            throw D1("error");
          Ut(this, p);
        }
        /** @internal */
        [me](p) {
          $t(this);
          const m = this._cancelAlgorithm(p);
          return A1(this), m;
        }
        /** @internal */
        [Me](p) {
          const m = this._controlledReadableStream;
          if (this._queue.length > 0) {
            const E = Vi(this);
            this._closeRequested && this._queue.length === 0 ? (A1(this), ba(m)) : wa(this), p._chunkSteps(E);
          } else
            Ce(m, p), wa(this);
        }
      }
      Object.defineProperties(Or.prototype, {
        close: { enumerable: !0 },
        enqueue: { enumerable: !0 },
        error: { enumerable: !0 },
        desiredSize: { enumerable: !0 }
      }), typeof a.toStringTag == "symbol" && Object.defineProperty(Or.prototype, a.toStringTag, {
        value: "ReadableStreamDefaultController",
        configurable: !0
      });
      function S1(n) {
        return !d(n) || !Object.prototype.hasOwnProperty.call(n, "_controlledReadableStream") ? !1 : n instanceof Or;
      }
      function wa(n) {
        if (!bo(n))
          return;
        if (n._pulling) {
          n._pullAgain = !0;
          return;
        }
        n._pulling = !0;
        const m = n._pullAlgorithm();
        y(m, () => {
          n._pulling = !1, n._pullAgain && (n._pullAgain = !1, wa(n));
        }, (E) => {
          Ut(n, E);
        });
      }
      function bo(n) {
        const p = n._controlledReadableStream;
        return !Pr(n) || !n._started ? !1 : !!(Lt(p) && ft(p) > 0 || sn(n) > 0);
      }
      function A1(n) {
        n._pullAlgorithm = void 0, n._cancelAlgorithm = void 0, n._strategySizeAlgorithm = void 0;
      }
      function _a(n) {
        if (!Pr(n))
          return;
        const p = n._controlledReadableStream;
        n._closeRequested = !0, n._queue.length === 0 && (A1(n), ba(p));
      }
      function C1(n, p) {
        if (!Pr(n))
          return;
        const m = n._controlledReadableStream;
        if (Lt(m) && ft(m) > 0)
          Ee(m, p, !1);
        else {
          let E;
          try {
            E = n._strategySizeAlgorithm(p);
          } catch (B) {
            throw Ut(n, B), B;
          }
          try {
            Li(n, p, E);
          } catch (B) {
            throw Ut(n, B), B;
          }
        }
        wa(n);
      }
      function Ut(n, p) {
        const m = n._controlledReadableStream;
        m._state === "readable" && ($t(n), A1(n), So(m, p));
      }
      function sn(n) {
        const p = n._controlledReadableStream._state;
        return p === "errored" ? null : p === "closed" ? 0 : n._strategyHWM - n._queueTotalSize;
      }
      function r0(n) {
        return !bo(n);
      }
      function Pr(n) {
        const p = n._controlledReadableStream._state;
        return !n._closeRequested && p === "readable";
      }
      function yo(n, p, m, E, B, G, V) {
        p._controlledReadableStream = n, p._queue = void 0, p._queueTotalSize = void 0, $t(p), p._started = !1, p._closeRequested = !1, p._pullAgain = !1, p._pulling = !1, p._strategySizeAlgorithm = V, p._strategyHWM = G, p._pullAlgorithm = E, p._cancelAlgorithm = B, n._readableStreamController = p;
        const z = m();
        y(w(z), () => {
          p._started = !0, wa(p);
        }, (ie) => {
          Ut(p, ie);
        });
      }
      function a0(n, p, m, E) {
        const B = Object.create(Or.prototype);
        let G = () => {
        }, V = () => w(void 0), z = () => w(void 0);
        p.start !== void 0 && (G = () => p.start(B)), p.pull !== void 0 && (V = () => p.pull(B)), p.cancel !== void 0 && (z = (ie) => p.cancel(ie)), yo(n, B, G, V, z, m, E);
      }
      function D1(n) {
        return new TypeError(`ReadableStreamDefaultController.prototype.${n} can only be used on a ReadableStreamDefaultController`);
      }
      function i0(n, p) {
        return sr(n._readableStreamController) ? s0(n) : n0(n);
      }
      function n0(n, p) {
        const m = pe(n);
        let E = !1, B = !1, G = !1, V = !1, z, ie, oe, de, le;
        const be = g((Le) => {
          le = Le;
        });
        function ot() {
          return E ? (B = !0, w(void 0)) : (E = !0, pa(m, {
            _chunkSteps: (We) => {
              P(() => {
                B = !1;
                const et = We, At = We;
                G || C1(oe._readableStreamController, et), V || C1(de._readableStreamController, At), E = !1, B && ot();
              });
            },
            _closeSteps: () => {
              E = !1, G || _a(oe._readableStreamController), V || _a(de._readableStreamController), (!G || !V) && le(void 0);
            },
            _errorSteps: () => {
              E = !1;
            }
          }), w(void 0));
        }
        function Br(Le) {
          if (G = !0, z = Le, V) {
            const We = da([z, ie]), et = st(n, We);
            le(et);
          }
          return be;
        }
        function jt(Le) {
          if (V = !0, ie = Le, G) {
            const We = da([z, ie]), et = st(n, We);
            le(et);
          }
          return be;
        }
        function St() {
        }
        return oe = on(St, ot, Br), de = on(St, ot, jt), N(m._closedPromise, (Le) => {
          Ut(oe._readableStreamController, Le), Ut(de._readableStreamController, Le), (!G || !V) && le(void 0);
        }), [oe, de];
      }
      function s0(n) {
        let p = pe(n), m = !1, E = !1, B = !1, G = !1, V = !1, z, ie, oe, de, le;
        const be = g((Z) => {
          le = Z;
        });
        function ot(Z) {
          N(Z._closedPromise, (se) => {
            Z === p && (nt(oe._readableStreamController, se), nt(de._readableStreamController, se), (!G || !V) && le(void 0));
          });
        }
        function Br() {
          pr(p) && (M(p), p = pe(n), ot(p)), pa(p, {
            _chunkSteps: (se) => {
              P(() => {
                E = !1, B = !1;
                const he = se;
                let Ye = se;
                if (!G && !V)
                  try {
                    Ye = Ls(se);
                  } catch (Fr) {
                    nt(oe._readableStreamController, Fr), nt(de._readableStreamController, Fr), le(st(n, Fr));
                    return;
                  }
                G || u1(oe._readableStreamController, he), V || u1(de._readableStreamController, Ye), m = !1, E ? St() : B && Le();
              });
            },
            _closeSteps: () => {
              m = !1, G || ua(oe._readableStreamController), V || ua(de._readableStreamController), oe._readableStreamController._pendingPullIntos.length > 0 && m1(oe._readableStreamController, 0), de._readableStreamController._pendingPullIntos.length > 0 && m1(de._readableStreamController, 0), (!G || !V) && le(void 0);
            },
            _errorSteps: () => {
              m = !1;
            }
          });
        }
        function jt(Z, se) {
          Gt(p) && (M(p), p = Js(n), ot(p));
          const he = se ? de : oe, Ye = se ? oe : de;
          eo(p, Z, {
            _chunkSteps: (Nr) => {
              P(() => {
                E = !1, B = !1;
                const kr = se ? V : G;
                if (se ? G : V)
                  kr || c1(he._readableStreamController, Nr);
                else {
                  let $o;
                  try {
                    $o = Ls(Nr);
                  } catch (dn) {
                    nt(he._readableStreamController, dn), nt(Ye._readableStreamController, dn), le(st(n, dn));
                    return;
                  }
                  kr || c1(he._readableStreamController, Nr), u1(Ye._readableStreamController, $o);
                }
                m = !1, E ? St() : B && Le();
              });
            },
            _closeSteps: (Nr) => {
              m = !1;
              const kr = se ? V : G, G1 = se ? G : V;
              kr || ua(he._readableStreamController), G1 || ua(Ye._readableStreamController), Nr !== void 0 && (kr || c1(he._readableStreamController, Nr), !G1 && Ye._readableStreamController._pendingPullIntos.length > 0 && m1(Ye._readableStreamController, 0)), (!kr || !G1) && le(void 0);
            },
            _errorSteps: () => {
              m = !1;
            }
          });
        }
        function St() {
          if (m)
            return E = !0, w(void 0);
          m = !0;
          const Z = Wi(oe._readableStreamController);
          return Z === null ? Br() : jt(Z._view, !1), w(void 0);
        }
        function Le() {
          if (m)
            return B = !0, w(void 0);
          m = !0;
          const Z = Wi(de._readableStreamController);
          return Z === null ? Br() : jt(Z._view, !0), w(void 0);
        }
        function We(Z) {
          if (G = !0, z = Z, V) {
            const se = da([z, ie]), he = st(n, se);
            le(he);
          }
          return be;
        }
        function et(Z) {
          if (V = !0, ie = Z, G) {
            const se = da([z, ie]), he = st(n, se);
            le(he);
          }
          return be;
        }
        function At() {
        }
        return oe = To(At, St, We), de = To(At, Le, et), ot(p), [oe, de];
      }
      function o0(n, p) {
        Be(n, p);
        const m = n, E = m == null ? void 0 : m.autoAllocateChunkSize, B = m == null ? void 0 : m.cancel, G = m == null ? void 0 : m.pull, V = m == null ? void 0 : m.start, z = m == null ? void 0 : m.type;
        return {
          autoAllocateChunkSize: E === void 0 ? void 0 : q(E, `${p} has member 'autoAllocateChunkSize' that`),
          cancel: B === void 0 ? void 0 : p0(B, m, `${p} has member 'cancel' that`),
          pull: G === void 0 ? void 0 : d0(G, m, `${p} has member 'pull' that`),
          start: V === void 0 ? void 0 : l0(V, m, `${p} has member 'start' that`),
          type: z === void 0 ? void 0 : u0(z, `${p} has member 'type' that`)
        };
      }
      function p0(n, p, m) {
        return ae(n, m), (E) => A(n, p, [E]);
      }
      function d0(n, p, m) {
        return ae(n, m), (E) => A(n, p, [E]);
      }
      function l0(n, p, m) {
        return ae(n, m), (E) => C(n, p, [E]);
      }
      function u0(n, p) {
        if (n = `${n}`, n !== "bytes")
          throw new TypeError(`${p} '${n}' is not a valid enumeration value for ReadableStreamType`);
        return n;
      }
      function m0(n, p) {
        Be(n, p);
        const m = n == null ? void 0 : n.mode;
        return {
          mode: m === void 0 ? void 0 : c0(m, `${p} has member 'mode' that`)
        };
      }
      function c0(n, p) {
        if (n = `${n}`, n !== "byob")
          throw new TypeError(`${p} '${n}' is not a valid enumeration value for ReadableStreamReaderMode`);
        return n;
      }
      function f0(n, p) {
        return Be(n, p), { preventCancel: !!(n == null ? void 0 : n.preventCancel) };
      }
      function Eo(n, p) {
        Be(n, p);
        const m = n == null ? void 0 : n.preventAbort, E = n == null ? void 0 : n.preventCancel, B = n == null ? void 0 : n.preventClose, G = n == null ? void 0 : n.signal;
        return G !== void 0 && h0(G, `${p} has member 'signal' that`), {
          preventAbort: !!m,
          preventCancel: !!E,
          preventClose: !!B,
          signal: G
        };
      }
      function h0(n, p) {
        if (!D2(n))
          throw new TypeError(`${p} is not an AbortSignal.`);
      }
      function g0(n, p) {
        Be(n, p);
        const m = n == null ? void 0 : n.readable;
        h(m, "readable", "ReadableWritablePair"), Q(m, `${p} has member 'readable' that`);
        const E = n == null ? void 0 : n.writable;
        return h(E, "writable", "ReadableWritablePair"), to(E, `${p} has member 'writable' that`), { readable: m, writable: E };
      }
      class xt {
        constructor(p = {}, m = {}) {
          p === void 0 ? p = null : F(p, "First parameter");
          const E = g1(m, "Second parameter"), B = o0(p, "First parameter");
          if (pn(this), B.type === "bytes") {
            if (E.size !== void 0)
              throw new RangeError("The strategy for a byte stream cannot have a size function");
            const G = fa(E, 0);
            w2(this, B, G);
          } else {
            const G = h1(E), V = fa(E, 1);
            a0(this, B, V, G);
          }
        }
        /**
         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.
         */
        get locked() {
          if (!Vt(this))
            throw ur("locked");
          return Lt(this);
        }
        /**
         * Cancels the stream, signaling a loss of interest in the stream by a consumer.
         *
         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}
         * method, which might or might not use it.
         */
        cancel(p = void 0) {
          return Vt(this) ? Lt(this) ? f(new TypeError("Cannot cancel a stream that already has a reader")) : st(this, p) : f(ur("cancel"));
        }
        getReader(p = void 0) {
          if (!Vt(this))
            throw ur("getReader");
          return m0(p, "First parameter").mode === void 0 ? pe(this) : Js(this);
        }
        pipeThrough(p, m = {}) {
          if (!Vt(this))
            throw ur("pipeThrough");
          W(p, 1, "pipeThrough");
          const E = g0(p, "First parameter"), B = Eo(m, "Second parameter");
          if (Lt(this))
            throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
          if (Dr(E.writable))
            throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
          const G = _o(this, E.writable, B.preventClose, B.preventAbort, B.preventCancel, B.signal);
          return O(G), E.readable;
        }
        pipeTo(p, m = {}) {
          if (!Vt(this))
            return f(ur("pipeTo"));
          if (p === void 0)
            return f("Parameter 1 is required in 'pipeTo'.");
          if (!Cr(p))
            return f(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));
          let E;
          try {
            E = Eo(m, "Second parameter");
          } catch (B) {
            return f(B);
          }
          return Lt(this) ? f(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")) : Dr(p) ? f(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")) : _o(this, p, E.preventClose, E.preventAbort, E.preventCancel, E.signal);
        }
        /**
         * Tees this readable stream, returning a two-element array containing the two resulting branches as
         * new {@link ReadableStream} instances.
         *
         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.
         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be
         * propagated to the stream's underlying source.
         *
         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,
         * this could allow interference between the two branches.
         */
        tee() {
          if (!Vt(this))
            throw ur("tee");
          const p = i0(this);
          return da(p);
        }
        values(p = void 0) {
          if (!Vt(this))
            throw ur("values");
          const m = f0(p, "First parameter");
          return u2(this, m.preventCancel);
        }
      }
      Object.defineProperties(xt.prototype, {
        cancel: { enumerable: !0 },
        getReader: { enumerable: !0 },
        pipeThrough: { enumerable: !0 },
        pipeTo: { enumerable: !0 },
        tee: { enumerable: !0 },
        values: { enumerable: !0 },
        locked: { enumerable: !0 }
      }), typeof a.toStringTag == "symbol" && Object.defineProperty(xt.prototype, a.toStringTag, {
        value: "ReadableStream",
        configurable: !0
      }), typeof a.asyncIterator == "symbol" && Object.defineProperty(xt.prototype, a.asyncIterator, {
        value: xt.prototype.values,
        writable: !0,
        configurable: !0
      });
      function on(n, p, m, E = 1, B = () => 1) {
        const G = Object.create(xt.prototype);
        pn(G);
        const V = Object.create(Or.prototype);
        return yo(G, V, n, p, m, E, B), G;
      }
      function To(n, p, m) {
        const E = Object.create(xt.prototype);
        pn(E);
        const B = Object.create(Ar.prototype);
        return Ys(E, B, n, p, m, 0, void 0), E;
      }
      function pn(n) {
        n._state = "readable", n._reader = void 0, n._storedError = void 0, n._disturbed = !1;
      }
      function Vt(n) {
        return !d(n) || !Object.prototype.hasOwnProperty.call(n, "_readableStreamController") ? !1 : n instanceof xt;
      }
      function Lt(n) {
        return n._reader !== void 0;
      }
      function st(n, p) {
        if (n._disturbed = !0, n._state === "closed")
          return w(void 0);
        if (n._state === "errored")
          return f(n._storedError);
        ba(n);
        const m = n._reader;
        m !== void 0 && pr(m) && (m._readIntoRequests.forEach((B) => {
          B._closeSteps(void 0);
        }), m._readIntoRequests = new R());
        const E = n._readableStreamController[me](p);
        return $(E, i);
      }
      function ba(n) {
        n._state = "closed";
        const p = n._reader;
        p !== void 0 && (j(p), Gt(p) && (p._readRequests.forEach((m) => {
          m._closeSteps();
        }), p._readRequests = new R()));
      }
      function So(n, p) {
        n._state = "errored", n._storedError = p;
        const m = n._reader;
        m !== void 0 && (ee(m, p), Gt(m) ? (m._readRequests.forEach((E) => {
          E._errorSteps(p);
        }), m._readRequests = new R()) : (m._readIntoRequests.forEach((E) => {
          E._errorSteps(p);
        }), m._readIntoRequests = new R()));
      }
      function ur(n) {
        return new TypeError(`ReadableStream.prototype.${n} can only be used on a ReadableStream`);
      }
      function Ao(n, p) {
        Be(n, p);
        const m = n == null ? void 0 : n.highWaterMark;
        return h(m, "highWaterMark", "QueuingStrategyInit"), {
          highWaterMark: _(m)
        };
      }
      const Co = (n) => n.byteLength;
      try {
        Object.defineProperty(Co, "name", {
          value: "size",
          configurable: !0
        });
      } catch {
      }
      class R1 {
        constructor(p) {
          W(p, 1, "ByteLengthQueuingStrategy"), p = Ao(p, "First parameter"), this._byteLengthQueuingStrategyHighWaterMark = p.highWaterMark;
        }
        /**
         * Returns the high water mark provided to the constructor.
         */
        get highWaterMark() {
          if (!Ro(this))
            throw Do("highWaterMark");
          return this._byteLengthQueuingStrategyHighWaterMark;
        }
        /**
         * Measures the size of `chunk` by returning the value of its `byteLength` property.
         */
        get size() {
          if (!Ro(this))
            throw Do("size");
          return Co;
        }
      }
      Object.defineProperties(R1.prototype, {
        highWaterMark: { enumerable: !0 },
        size: { enumerable: !0 }
      }), typeof a.toStringTag == "symbol" && Object.defineProperty(R1.prototype, a.toStringTag, {
        value: "ByteLengthQueuingStrategy",
        configurable: !0
      });
      function Do(n) {
        return new TypeError(`ByteLengthQueuingStrategy.prototype.${n} can only be used on a ByteLengthQueuingStrategy`);
      }
      function Ro(n) {
        return !d(n) || !Object.prototype.hasOwnProperty.call(n, "_byteLengthQueuingStrategyHighWaterMark") ? !1 : n instanceof R1;
      }
      const Oo = () => 1;
      try {
        Object.defineProperty(Oo, "name", {
          value: "size",
          configurable: !0
        });
      } catch {
      }
      class O1 {
        constructor(p) {
          W(p, 1, "CountQueuingStrategy"), p = Ao(p, "First parameter"), this._countQueuingStrategyHighWaterMark = p.highWaterMark;
        }
        /**
         * Returns the high water mark provided to the constructor.
         */
        get highWaterMark() {
          if (!Bo(this))
            throw Po("highWaterMark");
          return this._countQueuingStrategyHighWaterMark;
        }
        /**
         * Measures the size of `chunk` by always returning 1.
         * This ensures that the total queue size is a count of the number of chunks in the queue.
         */
        get size() {
          if (!Bo(this))
            throw Po("size");
          return Oo;
        }
      }
      Object.defineProperties(O1.prototype, {
        highWaterMark: { enumerable: !0 },
        size: { enumerable: !0 }
      }), typeof a.toStringTag == "symbol" && Object.defineProperty(O1.prototype, a.toStringTag, {
        value: "CountQueuingStrategy",
        configurable: !0
      });
      function Po(n) {
        return new TypeError(`CountQueuingStrategy.prototype.${n} can only be used on a CountQueuingStrategy`);
      }
      function Bo(n) {
        return !d(n) || !Object.prototype.hasOwnProperty.call(n, "_countQueuingStrategyHighWaterMark") ? !1 : n instanceof O1;
      }
      function v0(n, p) {
        Be(n, p);
        const m = n == null ? void 0 : n.flush, E = n == null ? void 0 : n.readableType, B = n == null ? void 0 : n.start, G = n == null ? void 0 : n.transform, V = n == null ? void 0 : n.writableType;
        return {
          flush: m === void 0 ? void 0 : w0(m, n, `${p} has member 'flush' that`),
          readableType: E,
          start: B === void 0 ? void 0 : _0(B, n, `${p} has member 'start' that`),
          transform: G === void 0 ? void 0 : b0(G, n, `${p} has member 'transform' that`),
          writableType: V
        };
      }
      function w0(n, p, m) {
        return ae(n, m), (E) => A(n, p, [E]);
      }
      function _0(n, p, m) {
        return ae(n, m), (E) => C(n, p, [E]);
      }
      function b0(n, p, m) {
        return ae(n, m), (E, B) => A(n, p, [E, B]);
      }
      class P1 {
        constructor(p = {}, m = {}, E = {}) {
          p === void 0 && (p = null);
          const B = g1(m, "Second parameter"), G = g1(E, "Third parameter"), V = v0(p, "First parameter");
          if (V.readableType !== void 0)
            throw new RangeError("Invalid readableType specified");
          if (V.writableType !== void 0)
            throw new RangeError("Invalid writableType specified");
          const z = fa(G, 0), ie = h1(G), oe = fa(B, 1), de = h1(B);
          let le;
          const be = g((ot) => {
            le = ot;
          });
          y0(this, be, oe, de, z, ie), T0(this, V), V.start !== void 0 ? le(V.start(this._transformStreamController)) : le(void 0);
        }
        /**
         * The readable side of the transform stream.
         */
        get readable() {
          if (!Fo(this))
            throw Go("readable");
          return this._readable;
        }
        /**
         * The writable side of the transform stream.
         */
        get writable() {
          if (!Fo(this))
            throw Go("writable");
          return this._writable;
        }
      }
      Object.defineProperties(P1.prototype, {
        readable: { enumerable: !0 },
        writable: { enumerable: !0 }
      }), typeof a.toStringTag == "symbol" && Object.defineProperty(P1.prototype, a.toStringTag, {
        value: "TransformStream",
        configurable: !0
      });
      function y0(n, p, m, E, B, G) {
        function V() {
          return p;
        }
        function z(be) {
          return C0(n, be);
        }
        function ie(be) {
          return D0(n, be);
        }
        function oe() {
          return R0(n);
        }
        n._writable = P2(V, z, oe, ie, m, E);
        function de() {
          return O0(n);
        }
        function le(be) {
          return F1(n, be), w(void 0);
        }
        n._readable = on(V, de, le, B, G), n._backpressure = void 0, n._backpressureChangePromise = void 0, n._backpressureChangePromise_resolve = void 0, N1(n, !0), n._transformStreamController = void 0;
      }
      function Fo(n) {
        return !d(n) || !Object.prototype.hasOwnProperty.call(n, "_transformStreamController") ? !1 : n instanceof P1;
      }
      function B1(n, p) {
        Ut(n._readable._readableStreamController, p), F1(n, p);
      }
      function F1(n, p) {
        No(n._transformStreamController), Xi(n._writable._writableStreamController, p), n._backpressure && N1(n, !1);
      }
      function N1(n, p) {
        n._backpressureChangePromise !== void 0 && n._backpressureChangePromise_resolve(), n._backpressureChangePromise = g((m) => {
          n._backpressureChangePromise_resolve = m;
        }), n._backpressure = p;
      }
      class ya {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.
         */
        get desiredSize() {
          if (!k1(this))
            throw I1("desiredSize");
          const p = this._controlledTransformStream._readable._readableStreamController;
          return sn(p);
        }
        enqueue(p = void 0) {
          if (!k1(this))
            throw I1("enqueue");
          ko(this, p);
        }
        /**
         * Errors both the readable side and the writable side of the controlled transform stream, making all future
         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.
         */
        error(p = void 0) {
          if (!k1(this))
            throw I1("error");
          S0(this, p);
        }
        /**
         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the
         * transformer only needs to consume a portion of the chunks written to the writable side.
         */
        terminate() {
          if (!k1(this))
            throw I1("terminate");
          A0(this);
        }
      }
      Object.defineProperties(ya.prototype, {
        enqueue: { enumerable: !0 },
        error: { enumerable: !0 },
        terminate: { enumerable: !0 },
        desiredSize: { enumerable: !0 }
      }), typeof a.toStringTag == "symbol" && Object.defineProperty(ya.prototype, a.toStringTag, {
        value: "TransformStreamDefaultController",
        configurable: !0
      });
      function k1(n) {
        return !d(n) || !Object.prototype.hasOwnProperty.call(n, "_controlledTransformStream") ? !1 : n instanceof ya;
      }
      function E0(n, p, m, E) {
        p._controlledTransformStream = n, n._transformStreamController = p, p._transformAlgorithm = m, p._flushAlgorithm = E;
      }
      function T0(n, p) {
        const m = Object.create(ya.prototype);
        let E = (G) => {
          try {
            return ko(m, G), w(void 0);
          } catch (V) {
            return f(V);
          }
        }, B = () => w(void 0);
        p.transform !== void 0 && (E = (G) => p.transform(G, m)), p.flush !== void 0 && (B = () => p.flush(m)), E0(n, m, E, B);
      }
      function No(n) {
        n._transformAlgorithm = void 0, n._flushAlgorithm = void 0;
      }
      function ko(n, p) {
        const m = n._controlledTransformStream, E = m._readable._readableStreamController;
        if (!Pr(E))
          throw new TypeError("Readable side is not in a state that permits enqueue");
        try {
          C1(E, p);
        } catch (G) {
          throw F1(m, G), m._readable._storedError;
        }
        r0(E) !== m._backpressure && N1(m, !0);
      }
      function S0(n, p) {
        B1(n._controlledTransformStream, p);
      }
      function Io(n, p) {
        const m = n._transformAlgorithm(p);
        return $(m, void 0, (E) => {
          throw B1(n._controlledTransformStream, E), E;
        });
      }
      function A0(n) {
        const p = n._controlledTransformStream, m = p._readable._readableStreamController;
        _a(m);
        const E = new TypeError("TransformStream terminated");
        F1(p, E);
      }
      function C0(n, p) {
        const m = n._transformStreamController;
        if (n._backpressure) {
          const E = n._backpressureChangePromise;
          return $(E, () => {
            const B = n._writable;
            if (B._state === "erroring")
              throw B._storedError;
            return Io(m, p);
          });
        }
        return Io(m, p);
      }
      function D0(n, p) {
        return B1(n, p), w(void 0);
      }
      function R0(n) {
        const p = n._readable, m = n._transformStreamController, E = m._flushAlgorithm();
        return No(m), $(E, () => {
          if (p._state === "errored")
            throw p._storedError;
          _a(p._readableStreamController);
        }, (B) => {
          throw B1(n, B), p._storedError;
        });
      }
      function O0(n) {
        return N1(n, !1), n._backpressureChangePromise;
      }
      function I1(n) {
        return new TypeError(`TransformStreamDefaultController.prototype.${n} can only be used on a TransformStreamDefaultController`);
      }
      function Go(n) {
        return new TypeError(`TransformStream.prototype.${n} can only be used on a TransformStream`);
      }
      r.ByteLengthQueuingStrategy = R1, r.CountQueuingStrategy = O1, r.ReadableByteStreamController = Ar, r.ReadableStream = xt, r.ReadableStreamBYOBReader = ca, r.ReadableStreamBYOBRequest = la, r.ReadableStreamDefaultController = Or, r.ReadableStreamDefaultReader = oa, r.TransformStream = P1, r.TransformStreamDefaultController = ya, r.WritableStream = ha, r.WritableStreamDefaultController = Rr, r.WritableStreamDefaultWriter = ga, Object.defineProperty(r, "__esModule", { value: !0 });
    });
  }($1, $1.exports)), $1.exports;
}
const j0 = 65536;
if (!globalThis.ReadableStream)
  try {
    const e = require("node:process"), { emitWarning: t } = e;
    try {
      e.emitWarning = () => {
      }, Object.assign(globalThis, require("node:stream/web")), e.emitWarning = t;
    } catch (r) {
      throw e.emitWarning = t, r;
    }
  } catch {
    Object.assign(globalThis, L0());
  }
try {
  const { Blob: e } = require("buffer");
  e && !e.prototype.stream && (e.prototype.stream = function(r) {
    let a = 0;
    const i = this;
    return new ReadableStream({
      type: "bytes",
      async pull(s) {
        const d = await i.slice(a, Math.min(i.size, a + j0)).arrayBuffer();
        a += d.byteLength, s.enqueue(new Uint8Array(d)), a === i.size && s.close();
      }
    });
  });
} catch {
}
/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
const Vo = 65536;
async function* ln(e, t = !0) {
  for (const r of e)
    if ("stream" in r)
      yield* (
        /** @type {AsyncIterableIterator<Uint8Array>} */
        r.stream()
      );
    else if (ArrayBuffer.isView(r))
      if (t) {
        let a = r.byteOffset;
        const i = r.byteOffset + r.byteLength;
        for (; a !== i; ) {
          const s = Math.min(i - a, Vo), o = r.buffer.slice(a, a + s);
          a += o.byteLength, yield new Uint8Array(o);
        }
      } else
        yield r;
    else {
      let a = 0, i = (
        /** @type {Blob} */
        r
      );
      for (; a !== i.size; ) {
        const o = await i.slice(a, Math.min(i.size, a + Vo)).arrayBuffer();
        a += o.byteLength, yield new Uint8Array(o);
      }
    }
}
var Bt, za, zr, fi, ea;
const sd = (ea = class {
  /**
   * The Blob() constructor returns a new Blob object. The content
   * of the blob consists of the concatenation of the values given
   * in the parameter array.
   *
   * @param {*} blobParts
   * @param {{ type?: string, endings?: string }} [options]
   */
  constructor(t = [], r = {}) {
    /** @type {Array.<(Blob|Uint8Array)>} */
    Mt(this, Bt, []);
    Mt(this, za, "");
    Mt(this, zr, 0);
    Mt(this, fi, "transparent");
    if (typeof t != "object" || t === null)
      throw new TypeError("Failed to construct 'Blob': The provided value cannot be converted to a sequence.");
    if (typeof t[Symbol.iterator] != "function")
      throw new TypeError("Failed to construct 'Blob': The object must have a callable @@iterator property.");
    if (typeof r != "object" && typeof r != "function")
      throw new TypeError("Failed to construct 'Blob': parameter 2 cannot convert to dictionary.");
    r === null && (r = {});
    const a = new TextEncoder();
    for (const s of t) {
      let o;
      ArrayBuffer.isView(s) ? o = new Uint8Array(s.buffer.slice(s.byteOffset, s.byteOffset + s.byteLength)) : s instanceof ArrayBuffer ? o = new Uint8Array(s.slice(0)) : s instanceof ea ? o = s : o = a.encode(`${s}`), gt(this, zr, Te(this, zr) + (ArrayBuffer.isView(o) ? o.byteLength : o.size)), Te(this, Bt).push(o);
    }
    gt(this, fi, `${r.endings === void 0 ? "transparent" : r.endings}`);
    const i = r.type === void 0 ? "" : String(r.type);
    gt(this, za, /^[\x20-\x7E]*$/.test(i) ? i : "");
  }
  /**
   * The Blob interface's size property returns the
   * size of the Blob in bytes.
   */
  get size() {
    return Te(this, zr);
  }
  /**
   * The type property of a Blob object returns the MIME type of the file.
   */
  get type() {
    return Te(this, za);
  }
  /**
   * The text() method in the Blob interface returns a Promise
   * that resolves with a string containing the contents of
   * the blob, interpreted as UTF-8.
   *
   * @return {Promise<string>}
   */
  async text() {
    const t = new TextDecoder();
    let r = "";
    for await (const a of ln(Te(this, Bt), !1))
      r += t.decode(a, { stream: !0 });
    return r += t.decode(), r;
  }
  /**
   * The arrayBuffer() method in the Blob interface returns a
   * Promise that resolves with the contents of the blob as
   * binary data contained in an ArrayBuffer.
   *
   * @return {Promise<ArrayBuffer>}
   */
  async arrayBuffer() {
    const t = new Uint8Array(this.size);
    let r = 0;
    for await (const a of ln(Te(this, Bt), !1))
      t.set(a, r), r += a.length;
    return t.buffer;
  }
  stream() {
    const t = ln(Te(this, Bt), !0);
    return new globalThis.ReadableStream({
      // @ts-ignore
      type: "bytes",
      async pull(r) {
        const a = await t.next();
        a.done ? r.close() : r.enqueue(a.value);
      },
      async cancel() {
        await t.return();
      }
    });
  }
  /**
   * The Blob interface's slice() method creates and returns a
   * new Blob object which contains data from a subset of the
   * blob on which it's called.
   *
   * @param {number} [start]
   * @param {number} [end]
   * @param {string} [type]
   */
  slice(t = 0, r = this.size, a = "") {
    const { size: i } = this;
    let s = t < 0 ? Math.max(i + t, 0) : Math.min(t, i), o = r < 0 ? Math.max(i + r, 0) : Math.min(r, i);
    const d = Math.max(o - s, 0), l = Te(this, Bt), u = [];
    let c = 0;
    for (const T of l) {
      if (c >= d)
        break;
      const g = ArrayBuffer.isView(T) ? T.byteLength : T.size;
      if (s && g <= s)
        s -= g, o -= g;
      else {
        let w;
        ArrayBuffer.isView(T) ? (w = T.subarray(s, Math.min(g, o)), c += w.byteLength) : (w = T.slice(s, Math.min(g, o)), c += w.size), o -= g, u.push(w), s = 0;
      }
    }
    const v = new ea([], { type: String(a).toLowerCase() });
    return gt(v, zr, d), gt(v, Bt, u), v;
  }
  get [Symbol.toStringTag]() {
    return "Blob";
  }
  static [Symbol.hasInstance](t) {
    return t && typeof t == "object" && typeof t.constructor == "function" && (typeof t.stream == "function" || typeof t.arrayBuffer == "function") && /^(Blob|File)$/.test(t[Symbol.toStringTag]);
  }
}, Bt = new WeakMap(), za = new WeakMap(), zr = new WeakMap(), fi = new WeakMap(), ea);
Object.defineProperties(sd.prototype, {
  size: { enumerable: !0 },
  type: { enumerable: !0 },
  slice: { enumerable: !0 }
});
const M0 = sd, ii = M0;
var Ha, Ka, rd;
const q0 = (rd = class extends ii {
  /**
   * @param {*[]} fileBits
   * @param {string} fileName
   * @param {{lastModified?: number, type?: string}} options
   */
  // @ts-ignore
  constructor(r, a, i = {}) {
    if (arguments.length < 2)
      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);
    super(r, i);
    Mt(this, Ha, 0);
    Mt(this, Ka, "");
    i === null && (i = {});
    const s = i.lastModified === void 0 ? Date.now() : Number(i.lastModified);
    Number.isNaN(s) || gt(this, Ha, s), gt(this, Ka, String(a));
  }
  get name() {
    return Te(this, Ka);
  }
  get lastModified() {
    return Te(this, Ha);
  }
  get [Symbol.toStringTag]() {
    return "File";
  }
  static [Symbol.hasInstance](r) {
    return !!r && r instanceof ii && /^(File)$/.test(r[Symbol.toStringTag]);
  }
}, Ha = new WeakMap(), Ka = new WeakMap(), rd), W0 = q0;
/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
var { toStringTag: Ia, iterator: z0, hasInstance: H0 } = Symbol, Lo = Math.random, K0 = "append,set,get,getAll,delete,keys,values,entries,forEach,constructor".split(","), jo = (e, t, r) => (e += "", /^(Blob|File)$/.test(t && t[Ia]) ? [(r = r !== void 0 ? r + "" : t[Ia] == "File" ? t.name : "blob", e), t.name !== r || t[Ia] == "blob" ? new W0([t], r, t) : t] : [e, t + ""]), un = (e, t) => (t ? e : e.replace(/\r?\n|\r/g, `\r
`)).replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22"), mr = (e, t, r) => {
  if (t.length < r)
    throw new TypeError(`Failed to execute '${e}' on 'FormData': ${r} arguments required, but only ${t.length} present.`);
}, rt, ad;
const Ln = (ad = class {
  constructor(...t) {
    Mt(this, rt, []);
    if (t.length)
      throw new TypeError("Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.");
  }
  get [Ia]() {
    return "FormData";
  }
  [z0]() {
    return this.entries();
  }
  static [H0](t) {
    return t && typeof t == "object" && t[Ia] === "FormData" && !K0.some((r) => typeof t[r] != "function");
  }
  append(...t) {
    mr("append", arguments, 2), Te(this, rt).push(jo(...t));
  }
  delete(t) {
    mr("delete", arguments, 1), t += "", gt(this, rt, Te(this, rt).filter(([r]) => r !== t));
  }
  get(t) {
    mr("get", arguments, 1), t += "";
    for (var r = Te(this, rt), a = r.length, i = 0; i < a; i++)
      if (r[i][0] === t)
        return r[i][1];
    return null;
  }
  getAll(t, r) {
    return mr("getAll", arguments, 1), r = [], t += "", Te(this, rt).forEach((a) => a[0] === t && r.push(a[1])), r;
  }
  has(t) {
    return mr("has", arguments, 1), t += "", Te(this, rt).some((r) => r[0] === t);
  }
  forEach(t, r) {
    mr("forEach", arguments, 1);
    for (var [a, i] of this)
      t.call(r, i, a, this);
  }
  set(...t) {
    mr("set", arguments, 2);
    var r = [], a = !0;
    t = jo(...t), Te(this, rt).forEach((i) => {
      i[0] === t[0] ? a && (a = !r.push(t)) : r.push(i);
    }), a && r.push(t), gt(this, rt, r);
  }
  *entries() {
    yield* Te(this, rt);
  }
  *keys() {
    for (var [t] of this)
      yield t;
  }
  *values() {
    for (var [, t] of this)
      yield t;
  }
}, rt = new WeakMap(), ad);
function Q0(e, t = ii) {
  var r = `${Lo()}${Lo()}`.replace(/\./g, "").slice(-28).padStart(32, "-"), a = [], i = `--${r}\r
Content-Disposition: form-data; name="`;
  return e.forEach((s, o) => typeof s == "string" ? a.push(i + un(o) + `"\r
\r
${s.replace(new RegExp("\\r(?!\\n)|(?<!\\r)\\n", "g"), `\r
`)}\r
`) : a.push(i + un(o) + `"; filename="${un(s.name, 1)}"\r
Content-Type: ${s.type || "application/octet-stream"}\r
\r
`, s, `\r
`)), a.push(`--${r}--`), new t(a, { type: "multipart/form-data; boundary=" + r });
}
class vi extends Error {
  constructor(t, r) {
    super(t), Error.captureStackTrace(this, this.constructor), this.type = r;
  }
  get name() {
    return this.constructor.name;
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
}
let wt = class extends vi {
  /**
   * @param  {string} message -      Error message for human
   * @param  {string} [type] -        Error type for machine
   * @param  {SystemError} [systemError] - For Node.js system error
   */
  constructor(t, r, a) {
    super(t, r), a && (this.code = this.errno = a.code, this.erroredSysCall = a.syscall);
  }
};
const ni = Symbol.toStringTag, od = (e) => typeof e == "object" && typeof e.append == "function" && typeof e.delete == "function" && typeof e.get == "function" && typeof e.getAll == "function" && typeof e.has == "function" && typeof e.set == "function" && typeof e.sort == "function" && e[ni] === "URLSearchParams", si = (e) => e && typeof e == "object" && typeof e.arrayBuffer == "function" && typeof e.type == "string" && typeof e.stream == "function" && typeof e.constructor == "function" && /^(Blob|File)$/.test(e[ni]), Y0 = (e) => typeof e == "object" && (e[ni] === "AbortSignal" || e[ni] === "EventTarget"), J0 = (e, t) => {
  const r = new URL(t).hostname, a = new URL(e).hostname;
  return r === a || r.endsWith(`.${a}`);
}, Z0 = (e, t) => {
  const r = new URL(t).protocol, a = new URL(e).protocol;
  return r === a;
}, X0 = F0(_t.pipeline), Qe = Symbol("Body internals");
let $a = class {
  constructor(t, {
    size: r = 0
  } = {}) {
    let a = null;
    t === null ? t = null : od(t) ? t = Ge.from(t.toString()) : si(t) || Ge.isBuffer(t) || (ai.isAnyArrayBuffer(t) ? t = Ge.from(t) : ArrayBuffer.isView(t) ? t = Ge.from(t.buffer, t.byteOffset, t.byteLength) : t instanceof _t || (t instanceof Ln ? (t = Q0(t), a = t.type.split("=")[1]) : t = Ge.from(String(t))));
    let i = t;
    Ge.isBuffer(t) ? i = _t.Readable.from(t) : si(t) && (i = _t.Readable.from(t.stream())), this[Qe] = {
      body: t,
      stream: i,
      boundary: a,
      disturbed: !1,
      error: null
    }, this.size = r, t instanceof _t && t.on("error", (s) => {
      const o = s instanceof vi ? s : new wt(`Invalid response body while trying to fetch ${this.url}: ${s.message}`, "system", s);
      this[Qe].error = o;
    });
  }
  get body() {
    return this[Qe].stream;
  }
  get bodyUsed() {
    return this[Qe].disturbed;
  }
  /**
   * Decode response as ArrayBuffer
   *
   * @return  Promise
   */
  async arrayBuffer() {
    const { buffer: t, byteOffset: r, byteLength: a } = await mn(this);
    return t.slice(r, r + a);
  }
  async formData() {
    const t = this.headers.get("content-type");
    if (t.startsWith("application/x-www-form-urlencoded")) {
      const a = new Ln(), i = new URLSearchParams(await this.text());
      for (const [s, o] of i)
        a.append(s, o);
      return a;
    }
    const { toFormData: r } = await import("./multipart-parser-1a341c82.js");
    return r(this.body, t);
  }
  /**
   * Return raw response as Blob
   *
   * @return Promise
   */
  async blob() {
    const t = this.headers && this.headers.get("content-type") || this[Qe].body && this[Qe].body.type || "", r = await this.arrayBuffer();
    return new ii([r], {
      type: t
    });
  }
  /**
   * Decode response as json
   *
   * @return  Promise
   */
  async json() {
    const t = await this.text();
    return JSON.parse(t);
  }
  /**
   * Decode response as text
   *
   * @return  Promise
   */
  async text() {
    const t = await mn(this);
    return new TextDecoder().decode(t);
  }
  /**
   * Decode response as buffer (non-spec api)
   *
   * @return  Promise
   */
  buffer() {
    return mn(this);
  }
};
$a.prototype.buffer = hi($a.prototype.buffer, "Please use 'response.arrayBuffer()' instead of 'response.buffer()'", "node-fetch#buffer");
Object.defineProperties($a.prototype, {
  body: { enumerable: !0 },
  bodyUsed: { enumerable: !0 },
  arrayBuffer: { enumerable: !0 },
  blob: { enumerable: !0 },
  json: { enumerable: !0 },
  text: { enumerable: !0 },
  data: { get: hi(
    () => {
    },
    "data doesn't exist, use json(), text(), arrayBuffer(), or body instead",
    "https://github.com/node-fetch/node-fetch/issues/1000 (response)"
  ) }
});
async function mn(e) {
  if (e[Qe].disturbed)
    throw new TypeError(`body used already for: ${e.url}`);
  if (e[Qe].disturbed = !0, e[Qe].error)
    throw e[Qe].error;
  const { body: t } = e;
  if (t === null)
    return Ge.alloc(0);
  if (!(t instanceof _t))
    return Ge.alloc(0);
  const r = [];
  let a = 0;
  try {
    for await (const i of t) {
      if (e.size > 0 && a + i.length > e.size) {
        const s = new wt(`content size at ${e.url} over limit: ${e.size}`, "max-size");
        throw t.destroy(s), s;
      }
      a += i.length, r.push(i);
    }
  } catch (i) {
    throw i instanceof vi ? i : new wt(`Invalid response body while trying to fetch ${e.url}: ${i.message}`, "system", i);
  }
  if (t.readableEnded === !0 || t._readableState.ended === !0)
    try {
      return r.every((i) => typeof i == "string") ? Ge.from(r.join("")) : Ge.concat(r, a);
    } catch (i) {
      throw new wt(`Could not create Buffer from response body for ${e.url}: ${i.message}`, "system", i);
    }
  else
    throw new wt(`Premature close of server response while trying to fetch ${e.url}`);
}
const ss = (e, t) => {
  let r, a, { body: i } = e[Qe];
  if (e.bodyUsed)
    throw new Error("cannot clone body after it is used");
  return i instanceof _t && typeof i.getBoundary != "function" && (r = new ri({ highWaterMark: t }), a = new ri({ highWaterMark: t }), i.pipe(r), i.pipe(a), e[Qe].stream = r, i = a), i;
}, e6 = hi(
  (e) => e.getBoundary(),
  "form-data doesn't follow the spec and requires special treatment. Use alternative package",
  "https://github.com/node-fetch/node-fetch/issues/1167"
), pd = (e, t) => e === null ? null : typeof e == "string" ? "text/plain;charset=UTF-8" : od(e) ? "application/x-www-form-urlencoded;charset=UTF-8" : si(e) ? e.type || null : Ge.isBuffer(e) || ai.isAnyArrayBuffer(e) || ArrayBuffer.isView(e) ? null : e instanceof Ln ? `multipart/form-data; boundary=${t[Qe].boundary}` : e && typeof e.getBoundary == "function" ? `multipart/form-data;boundary=${e6(e)}` : e instanceof _t ? null : "text/plain;charset=UTF-8", t6 = (e) => {
  const { body: t } = e[Qe];
  return t === null ? 0 : si(t) ? t.size : Ge.isBuffer(t) ? t.length : t && typeof t.getLengthSync == "function" && t.hasKnownLength && t.hasKnownLength() ? t.getLengthSync() : null;
}, r6 = async (e, { body: t }) => {
  t === null ? e.end() : await X0(t, e);
}, Z1 = typeof Ga.validateHeaderName == "function" ? Ga.validateHeaderName : (e) => {
  if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(e)) {
    const t = new TypeError(`Header name must be a valid HTTP token [${e}]`);
    throw Object.defineProperty(t, "code", { value: "ERR_INVALID_HTTP_TOKEN" }), t;
  }
}, jn = typeof Ga.validateHeaderValue == "function" ? Ga.validateHeaderValue : (e, t) => {
  if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(t)) {
    const r = new TypeError(`Invalid character in header content ["${e}"]`);
    throw Object.defineProperty(r, "code", { value: "ERR_INVALID_CHAR" }), r;
  }
};
let wr = class dd extends URLSearchParams {
  /**
   * Headers class
   *
   * @constructor
   * @param {HeadersInit} [init] - Response headers
   */
  constructor(t) {
    let r = [];
    if (t instanceof dd) {
      const a = t.raw();
      for (const [i, s] of Object.entries(a))
        r.push(...s.map((o) => [i, o]));
    } else if (t != null)
      if (typeof t == "object" && !ai.isBoxedPrimitive(t)) {
        const a = t[Symbol.iterator];
        if (a == null)
          r.push(...Object.entries(t));
        else {
          if (typeof a != "function")
            throw new TypeError("Header pairs must be iterable");
          r = [...t].map((i) => {
            if (typeof i != "object" || ai.isBoxedPrimitive(i))
              throw new TypeError("Each header pair must be an iterable object");
            return [...i];
          }).map((i) => {
            if (i.length !== 2)
              throw new TypeError("Each header pair must be a name/value tuple");
            return [...i];
          });
        }
      } else
        throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");
    return r = r.length > 0 ? r.map(([a, i]) => (Z1(a), jn(a, String(i)), [String(a).toLowerCase(), String(i)])) : void 0, super(r), new Proxy(this, {
      get(a, i, s) {
        switch (i) {
          case "append":
          case "set":
            return (o, d) => (Z1(o), jn(o, String(d)), URLSearchParams.prototype[i].call(
              a,
              String(o).toLowerCase(),
              String(d)
            ));
          case "delete":
          case "has":
          case "getAll":
            return (o) => (Z1(o), URLSearchParams.prototype[i].call(
              a,
              String(o).toLowerCase()
            ));
          case "keys":
            return () => (a.sort(), new Set(URLSearchParams.prototype.keys.call(a)).keys());
          default:
            return Reflect.get(a, i, s);
        }
      }
    });
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
  toString() {
    return Object.prototype.toString.call(this);
  }
  get(t) {
    const r = this.getAll(t);
    if (r.length === 0)
      return null;
    let a = r.join(", ");
    return /^content-encoding$/i.test(t) && (a = a.toLowerCase()), a;
  }
  forEach(t, r = void 0) {
    for (const a of this.keys())
      Reflect.apply(t, r, [this.get(a), a, this]);
  }
  *values() {
    for (const t of this.keys())
      yield this.get(t);
  }
  /**
   * @type {() => IterableIterator<[string, string]>}
   */
  *entries() {
    for (const t of this.keys())
      yield [t, this.get(t)];
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  /**
   * Node-fetch non-spec method
   * returning all headers and their values as array
   * @returns {Record<string, string[]>}
   */
  raw() {
    return [...this.keys()].reduce((t, r) => (t[r] = this.getAll(r), t), {});
  }
  /**
   * For better console.log(headers) and also to convert Headers into Node.js Request compatible format
   */
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return [...this.keys()].reduce((t, r) => {
      const a = this.getAll(r);
      return r === "host" ? t[r] = a[0] : t[r] = a.length > 1 ? a : a[0], t;
    }, {});
  }
};
Object.defineProperties(
  wr.prototype,
  ["get", "entries", "forEach", "values"].reduce((e, t) => (e[t] = { enumerable: !0 }, e), {})
);
function a6(e = []) {
  return new wr(
    e.reduce((t, r, a, i) => (a % 2 === 0 && t.push(i.slice(a, a + 2)), t), []).filter(([t, r]) => {
      try {
        return Z1(t), jn(t, String(r)), !0;
      } catch {
        return !1;
      }
    })
  );
}
const i6 = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]), ld = (e) => i6.has(e), pt = Symbol("Response internals");
let Ht = class ka extends $a {
  constructor(t = null, r = {}) {
    super(t, r);
    const a = r.status != null ? r.status : 200, i = new wr(r.headers);
    if (t !== null && !i.has("Content-Type")) {
      const s = pd(t, this);
      s && i.append("Content-Type", s);
    }
    this[pt] = {
      type: "default",
      url: r.url,
      status: a,
      statusText: r.statusText || "",
      headers: i,
      counter: r.counter,
      highWaterMark: r.highWaterMark
    };
  }
  get type() {
    return this[pt].type;
  }
  get url() {
    return this[pt].url || "";
  }
  get status() {
    return this[pt].status;
  }
  /**
   * Convenience property representing if the request ended normally
   */
  get ok() {
    return this[pt].status >= 200 && this[pt].status < 300;
  }
  get redirected() {
    return this[pt].counter > 0;
  }
  get statusText() {
    return this[pt].statusText;
  }
  get headers() {
    return this[pt].headers;
  }
  get highWaterMark() {
    return this[pt].highWaterMark;
  }
  /**
   * Clone this response
   *
   * @return  Response
   */
  clone() {
    return new ka(ss(this, this.highWaterMark), {
      type: this.type,
      url: this.url,
      status: this.status,
      statusText: this.statusText,
      headers: this.headers,
      ok: this.ok,
      redirected: this.redirected,
      size: this.size,
      highWaterMark: this.highWaterMark
    });
  }
  /**
   * @param {string} url    The URL that the new response is to originate from.
   * @param {number} status An optional status code for the response (e.g., 302.)
   * @returns {Response}    A Response object.
   */
  static redirect(t, r = 302) {
    if (!ld(r))
      throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
    return new ka(null, {
      headers: {
        location: new URL(t).toString()
      },
      status: r
    });
  }
  static error() {
    const t = new ka(null, { status: 0, statusText: "" });
    return t[pt].type = "error", t;
  }
  static json(t = void 0, r = {}) {
    const a = JSON.stringify(t);
    if (a === void 0)
      throw new TypeError("data is not JSON serializable");
    const i = new wr(r && r.headers);
    return i.has("content-type") || i.set("content-type", "application/json"), new ka(a, {
      ...r,
      headers: i
    });
  }
  get [Symbol.toStringTag]() {
    return "Response";
  }
};
Object.defineProperties(Ht.prototype, {
  type: { enumerable: !0 },
  url: { enumerable: !0 },
  status: { enumerable: !0 },
  ok: { enumerable: !0 },
  redirected: { enumerable: !0 },
  statusText: { enumerable: !0 },
  headers: { enumerable: !0 },
  clone: { enumerable: !0 }
});
const n6 = (e) => {
  if (e.search)
    return e.search;
  const t = e.href.length - 1, r = e.hash || (e.href[t] === "#" ? "#" : "");
  return e.href[t - r.length] === "?" ? "?" : "";
};
function Mo(e, t = !1) {
  return e == null || (e = new URL(e), /^(about|blob|data):$/.test(e.protocol)) ? "no-referrer" : (e.username = "", e.password = "", e.hash = "", t && (e.pathname = "", e.search = ""), e);
}
const ud = /* @__PURE__ */ new Set([
  "",
  "no-referrer",
  "no-referrer-when-downgrade",
  "same-origin",
  "origin",
  "strict-origin",
  "origin-when-cross-origin",
  "strict-origin-when-cross-origin",
  "unsafe-url"
]), s6 = "strict-origin-when-cross-origin";
function o6(e) {
  if (!ud.has(e))
    throw new TypeError(`Invalid referrerPolicy: ${e}`);
  return e;
}
function p6(e) {
  if (/^(http|ws)s:$/.test(e.protocol))
    return !0;
  const t = e.host.replace(/(^\[)|(]$)/g, ""), r = k0(t);
  return r === 4 && /^127\./.test(t) || r === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(t) ? !0 : e.host === "localhost" || e.host.endsWith(".localhost") ? !1 : e.protocol === "file:";
}
function $r(e) {
  return /^about:(blank|srcdoc)$/.test(e) || e.protocol === "data:" || /^(blob|filesystem):$/.test(e.protocol) ? !0 : p6(e);
}
function d6(e, { referrerURLCallback: t, referrerOriginCallback: r } = {}) {
  if (e.referrer === "no-referrer" || e.referrerPolicy === "")
    return null;
  const a = e.referrerPolicy;
  if (e.referrer === "about:client")
    return "no-referrer";
  const i = e.referrer;
  let s = Mo(i), o = Mo(i, !0);
  s.toString().length > 4096 && (s = o), t && (s = t(s)), r && (o = r(o));
  const d = new URL(e.url);
  switch (a) {
    case "no-referrer":
      return "no-referrer";
    case "origin":
      return o;
    case "unsafe-url":
      return s;
    case "strict-origin":
      return $r(s) && !$r(d) ? "no-referrer" : o.toString();
    case "strict-origin-when-cross-origin":
      return s.origin === d.origin ? s : $r(s) && !$r(d) ? "no-referrer" : o;
    case "same-origin":
      return s.origin === d.origin ? s : "no-referrer";
    case "origin-when-cross-origin":
      return s.origin === d.origin ? s : o;
    case "no-referrer-when-downgrade":
      return $r(s) && !$r(d) ? "no-referrer" : s;
    default:
      throw new TypeError(`Invalid referrerPolicy: ${a}`);
  }
}
function l6(e) {
  const t = (e.get("referrer-policy") || "").split(/[,\s]+/);
  let r = "";
  for (const a of t)
    a && ud.has(a) && (r = a);
  return r;
}
const Se = Symbol("Request internals"), Ea = (e) => typeof e == "object" && typeof e[Se] == "object", u6 = hi(
  () => {
  },
  ".data is not a valid RequestInit property, use .body instead",
  "https://github.com/node-fetch/node-fetch/issues/1000 (request)"
);
let Mn = class md extends $a {
  constructor(t, r = {}) {
    let a;
    if (Ea(t) ? a = new URL(t.url) : (a = new URL(t), t = {}), a.username !== "" || a.password !== "")
      throw new TypeError(`${a} is an url with embedded credentials.`);
    let i = r.method || t.method || "GET";
    if (/^(delete|get|head|options|post|put)$/i.test(i) && (i = i.toUpperCase()), !Ea(r) && "data" in r && u6(), (r.body != null || Ea(t) && t.body !== null) && (i === "GET" || i === "HEAD"))
      throw new TypeError("Request with GET/HEAD method cannot have body");
    const s = r.body ? r.body : Ea(t) && t.body !== null ? ss(t) : null;
    super(s, {
      size: r.size || t.size || 0
    });
    const o = new wr(r.headers || t.headers || {});
    if (s !== null && !o.has("Content-Type")) {
      const u = pd(s, this);
      u && o.set("Content-Type", u);
    }
    let d = Ea(t) ? t.signal : null;
    if ("signal" in r && (d = r.signal), d != null && !Y0(d))
      throw new TypeError("Expected signal to be an instanceof AbortSignal or EventTarget");
    let l = r.referrer == null ? t.referrer : r.referrer;
    if (l === "")
      l = "no-referrer";
    else if (l) {
      const u = new URL(l);
      l = /^about:(\/\/)?client$/.test(u) ? "client" : u;
    } else
      l = void 0;
    this[Se] = {
      method: i,
      redirect: r.redirect || t.redirect || "follow",
      headers: o,
      parsedURL: a,
      signal: d,
      referrer: l
    }, this.follow = r.follow === void 0 ? t.follow === void 0 ? 20 : t.follow : r.follow, this.compress = r.compress === void 0 ? t.compress === void 0 ? !0 : t.compress : r.compress, this.counter = r.counter || t.counter || 0, this.agent = r.agent || t.agent, this.highWaterMark = r.highWaterMark || t.highWaterMark || 16384, this.insecureHTTPParser = r.insecureHTTPParser || t.insecureHTTPParser || !1, this.referrerPolicy = r.referrerPolicy || t.referrerPolicy || "";
  }
  /** @returns {string} */
  get method() {
    return this[Se].method;
  }
  /** @returns {string} */
  get url() {
    return N0(this[Se].parsedURL);
  }
  /** @returns {Headers} */
  get headers() {
    return this[Se].headers;
  }
  get redirect() {
    return this[Se].redirect;
  }
  /** @returns {AbortSignal} */
  get signal() {
    return this[Se].signal;
  }
  // https://fetch.spec.whatwg.org/#dom-request-referrer
  get referrer() {
    if (this[Se].referrer === "no-referrer")
      return "";
    if (this[Se].referrer === "client")
      return "about:client";
    if (this[Se].referrer)
      return this[Se].referrer.toString();
  }
  get referrerPolicy() {
    return this[Se].referrerPolicy;
  }
  set referrerPolicy(t) {
    this[Se].referrerPolicy = o6(t);
  }
  /**
   * Clone this request
   *
   * @return  Request
   */
  clone() {
    return new md(this);
  }
  get [Symbol.toStringTag]() {
    return "Request";
  }
};
Object.defineProperties(Mn.prototype, {
  method: { enumerable: !0 },
  url: { enumerable: !0 },
  headers: { enumerable: !0 },
  redirect: { enumerable: !0 },
  clone: { enumerable: !0 },
  signal: { enumerable: !0 },
  referrer: { enumerable: !0 },
  referrerPolicy: { enumerable: !0 }
});
const m6 = (e) => {
  const { parsedURL: t } = e[Se], r = new wr(e[Se].headers);
  r.has("Accept") || r.set("Accept", "*/*");
  let a = null;
  if (e.body === null && /^(post|put)$/i.test(e.method) && (a = "0"), e.body !== null) {
    const d = t6(e);
    typeof d == "number" && !Number.isNaN(d) && (a = String(d));
  }
  a && r.set("Content-Length", a), e.referrerPolicy === "" && (e.referrerPolicy = s6), e.referrer && e.referrer !== "no-referrer" ? e[Se].referrer = d6(e) : e[Se].referrer = "no-referrer", e[Se].referrer instanceof URL && r.set("Referer", e.referrer), r.has("User-Agent") || r.set("User-Agent", "node-fetch"), e.compress && !r.has("Accept-Encoding") && r.set("Accept-Encoding", "gzip, deflate, br");
  let { agent: i } = e;
  typeof i == "function" && (i = i(t)), !r.has("Connection") && !i && r.set("Connection", "close");
  const s = n6(t), o = {
    // Overwrite search to retain trailing ? (issue #776)
    path: t.pathname + s,
    // The following options are not expressed in the URL
    method: e.method,
    headers: r[Symbol.for("nodejs.util.inspect.custom")](),
    insecureHTTPParser: e.insecureHTTPParser,
    agent: i
  };
  return {
    /** @type {URL} */
    parsedURL: t,
    options: o
  };
};
let c6 = class extends vi {
  constructor(t, r = "aborted") {
    super(t, r);
  }
};
/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
if (!globalThis.DOMException)
  try {
    const { MessageChannel: e } = require("worker_threads"), t = new e().port1, r = new ArrayBuffer();
    t.postMessage(r, [r, r]);
  } catch (e) {
    e.constructor.name === "DOMException" && (globalThis.DOMException = e.constructor);
  }
const f6 = /* @__PURE__ */ new Set(["data:", "http:", "https:"]);
async function cd(e, t) {
  return new Promise((r, a) => {
    const i = new Mn(e, t), { parsedURL: s, options: o } = m6(i);
    if (!f6.has(s.protocol))
      throw new TypeError(`node-fetch cannot load ${e}. URL scheme "${s.protocol.replace(/:$/, "")}" is not supported.`);
    if (s.protocol === "data:") {
      const w = V0(i.url), f = new Ht(w, { headers: { "Content-Type": w.typeFull } });
      r(f);
      return;
    }
    const d = (s.protocol === "https:" ? B0 : Ga).request, { signal: l } = i;
    let u = null;
    const c = () => {
      const w = new c6("The operation was aborted.");
      a(w), i.body && i.body instanceof _t.Readable && i.body.destroy(w), !(!u || !u.body) && u.body.emit("error", w);
    };
    if (l && l.aborted) {
      c();
      return;
    }
    const v = () => {
      c(), g();
    }, T = d(s.toString(), o);
    l && l.addEventListener("abort", v);
    const g = () => {
      T.abort(), l && l.removeEventListener("abort", v);
    };
    T.on("error", (w) => {
      a(new wt(`request to ${i.url} failed, reason: ${w.message}`, "system", w)), g();
    }), h6(T, (w) => {
      u && u.body && u.body.destroy(w);
    }), process.version < "v14" && T.on("socket", (w) => {
      let f;
      w.prependListener("end", () => {
        f = w._eventsCount;
      }), w.prependListener("close", (b) => {
        if (u && f < w._eventsCount && !b) {
          const y = new Error("Premature close");
          y.code = "ERR_STREAM_PREMATURE_CLOSE", u.body.emit("error", y);
        }
      });
    }), T.on("response", (w) => {
      T.setTimeout(0);
      const f = a6(w.rawHeaders);
      if (ld(w.statusCode)) {
        const $ = f.get("Location");
        let O = null;
        try {
          O = $ === null ? null : new URL($, i.url);
        } catch {
          if (i.redirect !== "manual") {
            a(new wt(`uri requested responds with an invalid redirect URL: ${$}`, "invalid-redirect")), g();
            return;
          }
        }
        switch (i.redirect) {
          case "error":
            a(new wt(`uri requested responds with a redirect, redirect mode is set to error: ${i.url}`, "no-redirect")), g();
            return;
          case "manual":
            break;
          case "follow": {
            if (O === null)
              break;
            if (i.counter >= i.follow) {
              a(new wt(`maximum redirect reached at: ${i.url}`, "max-redirect")), g();
              return;
            }
            const P = {
              headers: new wr(i.headers),
              follow: i.follow,
              counter: i.counter + 1,
              agent: i.agent,
              compress: i.compress,
              method: i.method,
              body: ss(i),
              signal: i.signal,
              size: i.size,
              referrer: i.referrer,
              referrerPolicy: i.referrerPolicy
            };
            if (!J0(i.url, O) || !Z0(i.url, O))
              for (const A of ["authorization", "www-authenticate", "cookie", "cookie2"])
                P.headers.delete(A);
            if (w.statusCode !== 303 && i.body && t.body instanceof _t.Readable) {
              a(new wt("Cannot follow redirect with body being a readable stream", "unsupported-redirect")), g();
              return;
            }
            (w.statusCode === 303 || (w.statusCode === 301 || w.statusCode === 302) && i.method === "POST") && (P.method = "GET", P.body = void 0, P.headers.delete("content-length"));
            const C = l6(f);
            C && (P.referrerPolicy = C), r(cd(new Mn(O, P))), g();
            return;
          }
          default:
            return a(new TypeError(`Redirect option '${i.redirect}' is not a valid value of RequestRedirect`));
        }
      }
      l && w.once("end", () => {
        l.removeEventListener("abort", v);
      });
      let b = Gr(w, new ri(), ($) => {
        $ && a($);
      });
      process.version < "v12.10" && w.on("aborted", v);
      const y = {
        url: i.url,
        status: w.statusCode,
        statusText: w.statusMessage,
        headers: f,
        size: i.size,
        counter: i.counter,
        highWaterMark: i.highWaterMark
      }, k = f.get("Content-Encoding");
      if (!i.compress || i.method === "HEAD" || k === null || w.statusCode === 204 || w.statusCode === 304) {
        u = new Ht(b, y), r(u);
        return;
      }
      const N = {
        flush: Ir.Z_SYNC_FLUSH,
        finishFlush: Ir.Z_SYNC_FLUSH
      };
      if (k === "gzip" || k === "x-gzip") {
        b = Gr(b, Ir.createGunzip(N), ($) => {
          $ && a($);
        }), u = new Ht(b, y), r(u);
        return;
      }
      if (k === "deflate" || k === "x-deflate") {
        const $ = Gr(w, new ri(), (O) => {
          O && a(O);
        });
        $.once("data", (O) => {
          (O[0] & 15) === 8 ? b = Gr(b, Ir.createInflate(), (P) => {
            P && a(P);
          }) : b = Gr(b, Ir.createInflateRaw(), (P) => {
            P && a(P);
          }), u = new Ht(b, y), r(u);
        }), $.once("end", () => {
          u || (u = new Ht(b, y), r(u));
        });
        return;
      }
      if (k === "br") {
        b = Gr(b, Ir.createBrotliDecompress(), ($) => {
          $ && a($);
        }), u = new Ht(b, y), r(u);
        return;
      }
      u = new Ht(b, y), r(u);
    }), r6(T, i).catch(a);
  });
}
function h6(e, t) {
  const r = Ge.from(`0\r
\r
`);
  let a = !1, i = !1, s;
  e.on("response", (o) => {
    const { headers: d } = o;
    a = d["transfer-encoding"] === "chunked" && !d["content-length"];
  }), e.on("socket", (o) => {
    const d = () => {
      if (a && !i) {
        const u = new Error("Premature close");
        u.code = "ERR_STREAM_PREMATURE_CLOSE", t(u);
      }
    }, l = (u) => {
      i = Ge.compare(u.slice(-5), r) === 0, !i && s && (i = Ge.compare(s.slice(-3), r.slice(0, 3)) === 0 && Ge.compare(u.slice(-2), r.slice(3)) === 0), s = u;
    };
    o.prependListener("close", d), o.on("data", l), e.on("close", () => {
      o.removeListener("close", d), o.removeListener("data", l);
    });
  });
}
global.crypto = {
  /** 
   * A "phonyfill" for `getRandomValues`.
   * 
   * It's is like a polyfill but **does not conform to the WebCrypto specification!**.
   * Unlike a the [polyfill](./node-polyfill.js), this implementation is faster as it avoids copying data. 
   * 
   * Specifically, the provided typed array is not filled with random values, nor is it returned form the function.
   * Instead a new typed array of the same type and size is returned, which contains the random data.
   * 
   * @param {TypedArray} typedArray A typed array *used only* for specifying the type and size of the return value.
   * @returns {TypedArray} A typed array of the same type and size as `typedArray` filled with random data.
   */
  getRandomValues(e) {
    const { BYTES_PER_ELEMENT: t, length: r } = e, a = t * r, { buffer: i } = I0(a);
    return Reflect.construct(e.constructor, [i]);
  }
};
var Ua = {}, wi = {}, cn = {}, Hr = {}, tr = {};
Object.defineProperty(tr, "__esModule", { value: !0 });
tr.toCommandProperties = tr.toCommandValue = void 0;
function g6(e) {
  return e == null ? "" : typeof e == "string" || e instanceof String ? e : JSON.stringify(e);
}
tr.toCommandValue = g6;
function v6(e) {
  return Object.keys(e).length ? {
    title: e.title,
    file: e.file,
    line: e.startLine,
    endLine: e.endLine,
    col: e.startColumn,
    endColumn: e.endColumn
  } : {};
}
tr.toCommandProperties = v6;
var w6 = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), _6 = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), b6 = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && w6(t, e, r);
  return _6(t, e), t;
};
Object.defineProperty(Hr, "__esModule", { value: !0 });
Hr.issue = Hr.issueCommand = void 0;
const y6 = b6(ar), fd = tr;
function hd(e, t, r) {
  const a = new T6(e, t, r);
  process.stdout.write(a.toString() + y6.EOL);
}
Hr.issueCommand = hd;
function E6(e, t = "") {
  hd(e, {}, t);
}
Hr.issue = E6;
const qo = "::";
class T6 {
  constructor(t, r, a) {
    t || (t = "missing.command"), this.command = t, this.properties = r, this.message = a;
  }
  toString() {
    let t = qo + this.command;
    if (this.properties && Object.keys(this.properties).length > 0) {
      t += " ";
      let r = !0;
      for (const a in this.properties)
        if (this.properties.hasOwnProperty(a)) {
          const i = this.properties[a];
          i && (r ? r = !1 : t += ",", t += `${a}=${A6(i)}`);
        }
    }
    return t += `${qo}${S6(this.message)}`, t;
  }
}
function S6(e) {
  return fd.toCommandValue(e).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
}
function A6(e) {
  return fd.toCommandValue(e).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
}
var Kr = {}, U1, C6 = new Uint8Array(16);
function gd() {
  if (!U1 && (U1 = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto < "u" && typeof msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto), !U1))
    throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  return U1(C6);
}
const D6 = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function _i(e) {
  return typeof e == "string" && D6.test(e);
}
var Re = [];
for (var fn = 0; fn < 256; ++fn)
  Re.push((fn + 256).toString(16).substr(1));
function bi(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, r = (Re[e[t + 0]] + Re[e[t + 1]] + Re[e[t + 2]] + Re[e[t + 3]] + "-" + Re[e[t + 4]] + Re[e[t + 5]] + "-" + Re[e[t + 6]] + Re[e[t + 7]] + "-" + Re[e[t + 8]] + Re[e[t + 9]] + "-" + Re[e[t + 10]] + Re[e[t + 11]] + Re[e[t + 12]] + Re[e[t + 13]] + Re[e[t + 14]] + Re[e[t + 15]]).toLowerCase();
  if (!_i(r))
    throw TypeError("Stringified UUID is invalid");
  return r;
}
var Wo, hn, gn = 0, vn = 0;
function R6(e, t, r) {
  var a = t && r || 0, i = t || new Array(16);
  e = e || {};
  var s = e.node || Wo, o = e.clockseq !== void 0 ? e.clockseq : hn;
  if (s == null || o == null) {
    var d = e.random || (e.rng || gd)();
    s == null && (s = Wo = [d[0] | 1, d[1], d[2], d[3], d[4], d[5]]), o == null && (o = hn = (d[6] << 8 | d[7]) & 16383);
  }
  var l = e.msecs !== void 0 ? e.msecs : Date.now(), u = e.nsecs !== void 0 ? e.nsecs : vn + 1, c = l - gn + (u - vn) / 1e4;
  if (c < 0 && e.clockseq === void 0 && (o = o + 1 & 16383), (c < 0 || l > gn) && e.nsecs === void 0 && (u = 0), u >= 1e4)
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  gn = l, vn = u, hn = o, l += 122192928e5;
  var v = ((l & 268435455) * 1e4 + u) % 4294967296;
  i[a++] = v >>> 24 & 255, i[a++] = v >>> 16 & 255, i[a++] = v >>> 8 & 255, i[a++] = v & 255;
  var T = l / 4294967296 * 1e4 & 268435455;
  i[a++] = T >>> 8 & 255, i[a++] = T & 255, i[a++] = T >>> 24 & 15 | 16, i[a++] = T >>> 16 & 255, i[a++] = o >>> 8 | 128, i[a++] = o & 255;
  for (var g = 0; g < 6; ++g)
    i[a + g] = s[g];
  return t || bi(i);
}
function vd(e) {
  if (!_i(e))
    throw TypeError("Invalid UUID");
  var t, r = new Uint8Array(16);
  return r[0] = (t = parseInt(e.slice(0, 8), 16)) >>> 24, r[1] = t >>> 16 & 255, r[2] = t >>> 8 & 255, r[3] = t & 255, r[4] = (t = parseInt(e.slice(9, 13), 16)) >>> 8, r[5] = t & 255, r[6] = (t = parseInt(e.slice(14, 18), 16)) >>> 8, r[7] = t & 255, r[8] = (t = parseInt(e.slice(19, 23), 16)) >>> 8, r[9] = t & 255, r[10] = (t = parseInt(e.slice(24, 36), 16)) / 1099511627776 & 255, r[11] = t / 4294967296 & 255, r[12] = t >>> 24 & 255, r[13] = t >>> 16 & 255, r[14] = t >>> 8 & 255, r[15] = t & 255, r;
}
function O6(e) {
  e = unescape(encodeURIComponent(e));
  for (var t = [], r = 0; r < e.length; ++r)
    t.push(e.charCodeAt(r));
  return t;
}
var P6 = "6ba7b810-9dad-11d1-80b4-00c04fd430c8", B6 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function wd(e, t, r) {
  function a(i, s, o, d) {
    if (typeof i == "string" && (i = O6(i)), typeof s == "string" && (s = vd(s)), s.length !== 16)
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    var l = new Uint8Array(16 + i.length);
    if (l.set(s), l.set(i, s.length), l = r(l), l[6] = l[6] & 15 | t, l[8] = l[8] & 63 | 128, o) {
      d = d || 0;
      for (var u = 0; u < 16; ++u)
        o[d + u] = l[u];
      return o;
    }
    return bi(l);
  }
  try {
    a.name = e;
  } catch {
  }
  return a.DNS = P6, a.URL = B6, a;
}
function F6(e) {
  if (typeof e == "string") {
    var t = unescape(encodeURIComponent(e));
    e = new Uint8Array(t.length);
    for (var r = 0; r < t.length; ++r)
      e[r] = t.charCodeAt(r);
  }
  return N6(k6(I6(e), e.length * 8));
}
function N6(e) {
  for (var t = [], r = e.length * 32, a = "0123456789abcdef", i = 0; i < r; i += 8) {
    var s = e[i >> 5] >>> i % 32 & 255, o = parseInt(a.charAt(s >>> 4 & 15) + a.charAt(s & 15), 16);
    t.push(o);
  }
  return t;
}
function _d(e) {
  return (e + 64 >>> 9 << 4) + 14 + 1;
}
function k6(e, t) {
  e[t >> 5] |= 128 << t % 32, e[_d(t) - 1] = t;
  for (var r = 1732584193, a = -271733879, i = -1732584194, s = 271733878, o = 0; o < e.length; o += 16) {
    var d = r, l = a, u = i, c = s;
    r = Fe(r, a, i, s, e[o], 7, -680876936), s = Fe(s, r, a, i, e[o + 1], 12, -389564586), i = Fe(i, s, r, a, e[o + 2], 17, 606105819), a = Fe(a, i, s, r, e[o + 3], 22, -1044525330), r = Fe(r, a, i, s, e[o + 4], 7, -176418897), s = Fe(s, r, a, i, e[o + 5], 12, 1200080426), i = Fe(i, s, r, a, e[o + 6], 17, -1473231341), a = Fe(a, i, s, r, e[o + 7], 22, -45705983), r = Fe(r, a, i, s, e[o + 8], 7, 1770035416), s = Fe(s, r, a, i, e[o + 9], 12, -1958414417), i = Fe(i, s, r, a, e[o + 10], 17, -42063), a = Fe(a, i, s, r, e[o + 11], 22, -1990404162), r = Fe(r, a, i, s, e[o + 12], 7, 1804603682), s = Fe(s, r, a, i, e[o + 13], 12, -40341101), i = Fe(i, s, r, a, e[o + 14], 17, -1502002290), a = Fe(a, i, s, r, e[o + 15], 22, 1236535329), r = Ne(r, a, i, s, e[o + 1], 5, -165796510), s = Ne(s, r, a, i, e[o + 6], 9, -1069501632), i = Ne(i, s, r, a, e[o + 11], 14, 643717713), a = Ne(a, i, s, r, e[o], 20, -373897302), r = Ne(r, a, i, s, e[o + 5], 5, -701558691), s = Ne(s, r, a, i, e[o + 10], 9, 38016083), i = Ne(i, s, r, a, e[o + 15], 14, -660478335), a = Ne(a, i, s, r, e[o + 4], 20, -405537848), r = Ne(r, a, i, s, e[o + 9], 5, 568446438), s = Ne(s, r, a, i, e[o + 14], 9, -1019803690), i = Ne(i, s, r, a, e[o + 3], 14, -187363961), a = Ne(a, i, s, r, e[o + 8], 20, 1163531501), r = Ne(r, a, i, s, e[o + 13], 5, -1444681467), s = Ne(s, r, a, i, e[o + 2], 9, -51403784), i = Ne(i, s, r, a, e[o + 7], 14, 1735328473), a = Ne(a, i, s, r, e[o + 12], 20, -1926607734), r = ke(r, a, i, s, e[o + 5], 4, -378558), s = ke(s, r, a, i, e[o + 8], 11, -2022574463), i = ke(i, s, r, a, e[o + 11], 16, 1839030562), a = ke(a, i, s, r, e[o + 14], 23, -35309556), r = ke(r, a, i, s, e[o + 1], 4, -1530992060), s = ke(s, r, a, i, e[o + 4], 11, 1272893353), i = ke(i, s, r, a, e[o + 7], 16, -155497632), a = ke(a, i, s, r, e[o + 10], 23, -1094730640), r = ke(r, a, i, s, e[o + 13], 4, 681279174), s = ke(s, r, a, i, e[o], 11, -358537222), i = ke(i, s, r, a, e[o + 3], 16, -722521979), a = ke(a, i, s, r, e[o + 6], 23, 76029189), r = ke(r, a, i, s, e[o + 9], 4, -640364487), s = ke(s, r, a, i, e[o + 12], 11, -421815835), i = ke(i, s, r, a, e[o + 15], 16, 530742520), a = ke(a, i, s, r, e[o + 2], 23, -995338651), r = Ie(r, a, i, s, e[o], 6, -198630844), s = Ie(s, r, a, i, e[o + 7], 10, 1126891415), i = Ie(i, s, r, a, e[o + 14], 15, -1416354905), a = Ie(a, i, s, r, e[o + 5], 21, -57434055), r = Ie(r, a, i, s, e[o + 12], 6, 1700485571), s = Ie(s, r, a, i, e[o + 3], 10, -1894986606), i = Ie(i, s, r, a, e[o + 10], 15, -1051523), a = Ie(a, i, s, r, e[o + 1], 21, -2054922799), r = Ie(r, a, i, s, e[o + 8], 6, 1873313359), s = Ie(s, r, a, i, e[o + 15], 10, -30611744), i = Ie(i, s, r, a, e[o + 6], 15, -1560198380), a = Ie(a, i, s, r, e[o + 13], 21, 1309151649), r = Ie(r, a, i, s, e[o + 4], 6, -145523070), s = Ie(s, r, a, i, e[o + 11], 10, -1120210379), i = Ie(i, s, r, a, e[o + 2], 15, 718787259), a = Ie(a, i, s, r, e[o + 9], 21, -343485551), r = Zt(r, d), a = Zt(a, l), i = Zt(i, u), s = Zt(s, c);
  }
  return [r, a, i, s];
}
function I6(e) {
  if (e.length === 0)
    return [];
  for (var t = e.length * 8, r = new Uint32Array(_d(t)), a = 0; a < t; a += 8)
    r[a >> 5] |= (e[a / 8] & 255) << a % 32;
  return r;
}
function Zt(e, t) {
  var r = (e & 65535) + (t & 65535), a = (e >> 16) + (t >> 16) + (r >> 16);
  return a << 16 | r & 65535;
}
function G6(e, t) {
  return e << t | e >>> 32 - t;
}
function yi(e, t, r, a, i, s) {
  return Zt(G6(Zt(Zt(t, e), Zt(a, s)), i), r);
}
function Fe(e, t, r, a, i, s, o) {
  return yi(t & r | ~t & a, e, t, i, s, o);
}
function Ne(e, t, r, a, i, s, o) {
  return yi(t & a | r & ~a, e, t, i, s, o);
}
function ke(e, t, r, a, i, s, o) {
  return yi(t ^ r ^ a, e, t, i, s, o);
}
function Ie(e, t, r, a, i, s, o) {
  return yi(r ^ (t | ~a), e, t, i, s, o);
}
var $6 = wd("v3", 48, F6);
const U6 = $6;
function x6(e, t, r) {
  e = e || {};
  var a = e.random || (e.rng || gd)();
  if (a[6] = a[6] & 15 | 64, a[8] = a[8] & 63 | 128, t) {
    r = r || 0;
    for (var i = 0; i < 16; ++i)
      t[r + i] = a[i];
    return t;
  }
  return bi(a);
}
function V6(e, t, r, a) {
  switch (e) {
    case 0:
      return t & r ^ ~t & a;
    case 1:
      return t ^ r ^ a;
    case 2:
      return t & r ^ t & a ^ r & a;
    case 3:
      return t ^ r ^ a;
  }
}
function wn(e, t) {
  return e << t | e >>> 32 - t;
}
function L6(e) {
  var t = [1518500249, 1859775393, 2400959708, 3395469782], r = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof e == "string") {
    var a = unescape(encodeURIComponent(e));
    e = [];
    for (var i = 0; i < a.length; ++i)
      e.push(a.charCodeAt(i));
  } else
    Array.isArray(e) || (e = Array.prototype.slice.call(e));
  e.push(128);
  for (var s = e.length / 4 + 2, o = Math.ceil(s / 16), d = new Array(o), l = 0; l < o; ++l) {
    for (var u = new Uint32Array(16), c = 0; c < 16; ++c)
      u[c] = e[l * 64 + c * 4] << 24 | e[l * 64 + c * 4 + 1] << 16 | e[l * 64 + c * 4 + 2] << 8 | e[l * 64 + c * 4 + 3];
    d[l] = u;
  }
  d[o - 1][14] = (e.length - 1) * 8 / Math.pow(2, 32), d[o - 1][14] = Math.floor(d[o - 1][14]), d[o - 1][15] = (e.length - 1) * 8 & 4294967295;
  for (var v = 0; v < o; ++v) {
    for (var T = new Uint32Array(80), g = 0; g < 16; ++g)
      T[g] = d[v][g];
    for (var w = 16; w < 80; ++w)
      T[w] = wn(T[w - 3] ^ T[w - 8] ^ T[w - 14] ^ T[w - 16], 1);
    for (var f = r[0], b = r[1], y = r[2], k = r[3], N = r[4], $ = 0; $ < 80; ++$) {
      var O = Math.floor($ / 20), P = wn(f, 5) + V6(O, b, y, k) + N + t[O] + T[$] >>> 0;
      N = k, k = y, y = wn(b, 30) >>> 0, b = f, f = P;
    }
    r[0] = r[0] + f >>> 0, r[1] = r[1] + b >>> 0, r[2] = r[2] + y >>> 0, r[3] = r[3] + k >>> 0, r[4] = r[4] + N >>> 0;
  }
  return [r[0] >> 24 & 255, r[0] >> 16 & 255, r[0] >> 8 & 255, r[0] & 255, r[1] >> 24 & 255, r[1] >> 16 & 255, r[1] >> 8 & 255, r[1] & 255, r[2] >> 24 & 255, r[2] >> 16 & 255, r[2] >> 8 & 255, r[2] & 255, r[3] >> 24 & 255, r[3] >> 16 & 255, r[3] >> 8 & 255, r[3] & 255, r[4] >> 24 & 255, r[4] >> 16 & 255, r[4] >> 8 & 255, r[4] & 255];
}
var j6 = wd("v5", 80, L6);
const M6 = j6, q6 = "00000000-0000-0000-0000-000000000000";
function W6(e) {
  if (!_i(e))
    throw TypeError("Invalid UUID");
  return parseInt(e.substr(14, 1), 16);
}
const z6 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  NIL: q6,
  parse: vd,
  stringify: bi,
  v1: R6,
  v3: U6,
  v4: x6,
  v5: M6,
  validate: _i,
  version: W6
}, Symbol.toStringTag, { value: "Module" })), H6 = /* @__PURE__ */ Ja(z6);
var K6 = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), Q6 = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), bd = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && K6(t, e, r);
  return Q6(t, e), t;
};
Object.defineProperty(Kr, "__esModule", { value: !0 });
Kr.prepareKeyValueMessage = Kr.issueFileCommand = void 0;
const zo = bd(Pe), qn = bd(ar), Y6 = H6, yd = tr;
function J6(e, t) {
  const r = process.env[`GITHUB_${e}`];
  if (!r)
    throw new Error(`Unable to find environment variable for file command ${e}`);
  if (!zo.existsSync(r))
    throw new Error(`Missing file at path: ${r}`);
  zo.appendFileSync(r, `${yd.toCommandValue(t)}${qn.EOL}`, {
    encoding: "utf8"
  });
}
Kr.issueFileCommand = J6;
function Z6(e, t) {
  const r = `ghadelimiter_${Y6.v4()}`, a = yd.toCommandValue(t);
  if (e.includes(r))
    throw new Error(`Unexpected input: name should not contain the delimiter "${r}"`);
  if (a.includes(r))
    throw new Error(`Unexpected input: value should not contain the delimiter "${r}"`);
  return `${e}<<${r}${qn.EOL}${a}${qn.EOL}${r}`;
}
Kr.prepareKeyValueMessage = Z6;
var Ta = {}, Za = {}, Qr = {};
Object.defineProperty(Qr, "__esModule", { value: !0 });
Qr.checkBypass = Qr.getProxyUrl = void 0;
function X6(e) {
  const t = e.protocol === "https:";
  if (Ed(e))
    return;
  const r = (() => t ? process.env.https_proxy || process.env.HTTPS_PROXY : process.env.http_proxy || process.env.HTTP_PROXY)();
  if (r)
    return new URL(r);
}
Qr.getProxyUrl = X6;
function Ed(e) {
  if (!e.hostname)
    return !1;
  const t = e.hostname;
  if (e4(t))
    return !0;
  const r = process.env.no_proxy || process.env.NO_PROXY || "";
  if (!r)
    return !1;
  let a;
  e.port ? a = Number(e.port) : e.protocol === "http:" ? a = 80 : e.protocol === "https:" && (a = 443);
  const i = [e.hostname.toUpperCase()];
  typeof a == "number" && i.push(`${i[0]}:${a}`);
  for (const s of r.split(",").map((o) => o.trim().toUpperCase()).filter((o) => o))
    if (s === "*" || i.some((o) => o === s || o.endsWith(`.${s}`) || s.startsWith(".") && o.endsWith(`${s}`)))
      return !0;
  return !1;
}
Qr.checkBypass = Ed;
function e4(e) {
  const t = e.toLowerCase();
  return t === "localhost" || t.startsWith("127.") || t.startsWith("[::1]") || t.startsWith("[0:0:0:0:0:0:0:1]");
}
var ra = {}, t4 = G0, os = gi, Td = is, r4 = ns, a4 = Qa;
ra.httpOverHttp = i4;
ra.httpsOverHttp = n4;
ra.httpOverHttps = s4;
ra.httpsOverHttps = o4;
function i4(e) {
  var t = new kt(e);
  return t.request = os.request, t;
}
function n4(e) {
  var t = new kt(e);
  return t.request = os.request, t.createSocket = Sd, t.defaultPort = 443, t;
}
function s4(e) {
  var t = new kt(e);
  return t.request = Td.request, t;
}
function o4(e) {
  var t = new kt(e);
  return t.request = Td.request, t.createSocket = Sd, t.defaultPort = 443, t;
}
function kt(e) {
  var t = this;
  t.options = e || {}, t.proxyOptions = t.options.proxy || {}, t.maxSockets = t.options.maxSockets || os.Agent.defaultMaxSockets, t.requests = [], t.sockets = [], t.on("free", function(a, i, s, o) {
    for (var d = Ad(i, s, o), l = 0, u = t.requests.length; l < u; ++l) {
      var c = t.requests[l];
      if (c.host === d.host && c.port === d.port) {
        t.requests.splice(l, 1), c.request.onSocket(a);
        return;
      }
    }
    a.destroy(), t.removeSocket(a);
  });
}
a4.inherits(kt, r4.EventEmitter);
kt.prototype.addRequest = function(t, r, a, i) {
  var s = this, o = ps({ request: t }, s.options, Ad(r, a, i));
  if (s.sockets.length >= this.maxSockets) {
    s.requests.push(o);
    return;
  }
  s.createSocket(o, function(d) {
    d.on("free", l), d.on("close", u), d.on("agentRemove", u), t.onSocket(d);
    function l() {
      s.emit("free", d, o);
    }
    function u(c) {
      s.removeSocket(d), d.removeListener("free", l), d.removeListener("close", u), d.removeListener("agentRemove", u);
    }
  });
};
kt.prototype.createSocket = function(t, r) {
  var a = this, i = {};
  a.sockets.push(i);
  var s = ps({}, a.proxyOptions, {
    method: "CONNECT",
    path: t.host + ":" + t.port,
    agent: !1,
    headers: {
      host: t.host + ":" + t.port
    }
  });
  t.localAddress && (s.localAddress = t.localAddress), s.proxyAuth && (s.headers = s.headers || {}, s.headers["Proxy-Authorization"] = "Basic " + new Buffer(s.proxyAuth).toString("base64")), Kt("making CONNECT request");
  var o = a.request(s);
  o.useChunkedEncodingByDefault = !1, o.once("response", d), o.once("upgrade", l), o.once("connect", u), o.once("error", c), o.end();
  function d(v) {
    v.upgrade = !0;
  }
  function l(v, T, g) {
    process.nextTick(function() {
      u(v, T, g);
    });
  }
  function u(v, T, g) {
    if (o.removeAllListeners(), T.removeAllListeners(), v.statusCode !== 200) {
      Kt(
        "tunneling socket could not be established, statusCode=%d",
        v.statusCode
      ), T.destroy();
      var w = new Error("tunneling socket could not be established, statusCode=" + v.statusCode);
      w.code = "ECONNRESET", t.request.emit("error", w), a.removeSocket(i);
      return;
    }
    if (g.length > 0) {
      Kt("got illegal response body from proxy"), T.destroy();
      var w = new Error("got illegal response body from proxy");
      w.code = "ECONNRESET", t.request.emit("error", w), a.removeSocket(i);
      return;
    }
    return Kt("tunneling connection has established"), a.sockets[a.sockets.indexOf(i)] = T, r(T);
  }
  function c(v) {
    o.removeAllListeners(), Kt(
      `tunneling socket could not be established, cause=%s
`,
      v.message,
      v.stack
    );
    var T = new Error("tunneling socket could not be established, cause=" + v.message);
    T.code = "ECONNRESET", t.request.emit("error", T), a.removeSocket(i);
  }
};
kt.prototype.removeSocket = function(t) {
  var r = this.sockets.indexOf(t);
  if (r !== -1) {
    this.sockets.splice(r, 1);
    var a = this.requests.shift();
    a && this.createSocket(a, function(i) {
      a.request.onSocket(i);
    });
  }
};
function Sd(e, t) {
  var r = this;
  kt.prototype.createSocket.call(r, e, function(a) {
    var i = e.request.getHeader("host"), s = ps({}, r.options, {
      socket: a,
      servername: i ? i.replace(/:.*$/, "") : e.host
    }), o = t4.connect(0, s);
    r.sockets[r.sockets.indexOf(a)] = o, t(o);
  });
}
function Ad(e, t, r) {
  return typeof e == "string" ? {
    host: e,
    port: t,
    localAddress: r
  } : e;
}
function ps(e) {
  for (var t = 1, r = arguments.length; t < r; ++t) {
    var a = arguments[t];
    if (typeof a == "object")
      for (var i = Object.keys(a), s = 0, o = i.length; s < o; ++s) {
        var d = i[s];
        a[d] !== void 0 && (e[d] = a[d]);
      }
  }
  return e;
}
var Kt;
process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG) ? Kt = function() {
  var e = Array.prototype.slice.call(arguments);
  typeof e[0] == "string" ? e[0] = "TUNNEL: " + e[0] : e.unshift("TUNNEL:"), console.error.apply(console, e);
} : Kt = function() {
};
ra.debug = Kt;
var p4 = ra;
(function(e) {
  var t = D && D.__createBinding || (Object.create ? function(C, A, S, R) {
    R === void 0 && (R = S), Object.defineProperty(C, R, { enumerable: !0, get: function() {
      return A[S];
    } });
  } : function(C, A, S, R) {
    R === void 0 && (R = S), C[R] = A[S];
  }), r = D && D.__setModuleDefault || (Object.create ? function(C, A) {
    Object.defineProperty(C, "default", { enumerable: !0, value: A });
  } : function(C, A) {
    C.default = A;
  }), a = D && D.__importStar || function(C) {
    if (C && C.__esModule)
      return C;
    var A = {};
    if (C != null)
      for (var S in C)
        S !== "default" && Object.hasOwnProperty.call(C, S) && t(A, C, S);
    return r(A, C), A;
  }, i = D && D.__awaiter || function(C, A, S, R) {
    function U(L) {
      return L instanceof S ? L : new S(function(M) {
        M(L);
      });
    }
    return new (S || (S = Promise))(function(L, M) {
      function J(ne) {
        try {
          Y(R.next(ne));
        } catch (ee) {
          M(ee);
        }
      }
      function X(ne) {
        try {
          Y(R.throw(ne));
        } catch (ee) {
          M(ee);
        }
      }
      function Y(ne) {
        ne.done ? L(ne.value) : U(ne.value).then(J, X);
      }
      Y((R = R.apply(C, A || [])).next());
    });
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), e.HttpClient = e.isHttps = e.HttpClientResponse = e.HttpClientError = e.getProxyUrl = e.MediaTypes = e.Headers = e.HttpCodes = void 0;
  const s = a(gi), o = a(is), d = a(Qr), l = a(p4);
  var u;
  (function(C) {
    C[C.OK = 200] = "OK", C[C.MultipleChoices = 300] = "MultipleChoices", C[C.MovedPermanently = 301] = "MovedPermanently", C[C.ResourceMoved = 302] = "ResourceMoved", C[C.SeeOther = 303] = "SeeOther", C[C.NotModified = 304] = "NotModified", C[C.UseProxy = 305] = "UseProxy", C[C.SwitchProxy = 306] = "SwitchProxy", C[C.TemporaryRedirect = 307] = "TemporaryRedirect", C[C.PermanentRedirect = 308] = "PermanentRedirect", C[C.BadRequest = 400] = "BadRequest", C[C.Unauthorized = 401] = "Unauthorized", C[C.PaymentRequired = 402] = "PaymentRequired", C[C.Forbidden = 403] = "Forbidden", C[C.NotFound = 404] = "NotFound", C[C.MethodNotAllowed = 405] = "MethodNotAllowed", C[C.NotAcceptable = 406] = "NotAcceptable", C[C.ProxyAuthenticationRequired = 407] = "ProxyAuthenticationRequired", C[C.RequestTimeout = 408] = "RequestTimeout", C[C.Conflict = 409] = "Conflict", C[C.Gone = 410] = "Gone", C[C.TooManyRequests = 429] = "TooManyRequests", C[C.InternalServerError = 500] = "InternalServerError", C[C.NotImplemented = 501] = "NotImplemented", C[C.BadGateway = 502] = "BadGateway", C[C.ServiceUnavailable = 503] = "ServiceUnavailable", C[C.GatewayTimeout = 504] = "GatewayTimeout";
  })(u = e.HttpCodes || (e.HttpCodes = {}));
  var c;
  (function(C) {
    C.Accept = "accept", C.ContentType = "content-type";
  })(c = e.Headers || (e.Headers = {}));
  var v;
  (function(C) {
    C.ApplicationJson = "application/json";
  })(v = e.MediaTypes || (e.MediaTypes = {}));
  function T(C) {
    const A = d.getProxyUrl(new URL(C));
    return A ? A.href : "";
  }
  e.getProxyUrl = T;
  const g = [
    u.MovedPermanently,
    u.ResourceMoved,
    u.SeeOther,
    u.TemporaryRedirect,
    u.PermanentRedirect
  ], w = [
    u.BadGateway,
    u.ServiceUnavailable,
    u.GatewayTimeout
  ], f = ["OPTIONS", "GET", "DELETE", "HEAD"], b = 10, y = 5;
  class k extends Error {
    constructor(A, S) {
      super(A), this.name = "HttpClientError", this.statusCode = S, Object.setPrototypeOf(this, k.prototype);
    }
  }
  e.HttpClientError = k;
  class N {
    constructor(A) {
      this.message = A;
    }
    readBody() {
      return i(this, void 0, void 0, function* () {
        return new Promise((A) => i(this, void 0, void 0, function* () {
          let S = Buffer.alloc(0);
          this.message.on("data", (R) => {
            S = Buffer.concat([S, R]);
          }), this.message.on("end", () => {
            A(S.toString());
          });
        }));
      });
    }
  }
  e.HttpClientResponse = N;
  function $(C) {
    return new URL(C).protocol === "https:";
  }
  e.isHttps = $;
  class O {
    constructor(A, S, R) {
      this._ignoreSslError = !1, this._allowRedirects = !0, this._allowRedirectDowngrade = !1, this._maxRedirects = 50, this._allowRetries = !1, this._maxRetries = 1, this._keepAlive = !1, this._disposed = !1, this.userAgent = A, this.handlers = S || [], this.requestOptions = R, R && (R.ignoreSslError != null && (this._ignoreSslError = R.ignoreSslError), this._socketTimeout = R.socketTimeout, R.allowRedirects != null && (this._allowRedirects = R.allowRedirects), R.allowRedirectDowngrade != null && (this._allowRedirectDowngrade = R.allowRedirectDowngrade), R.maxRedirects != null && (this._maxRedirects = Math.max(R.maxRedirects, 0)), R.keepAlive != null && (this._keepAlive = R.keepAlive), R.allowRetries != null && (this._allowRetries = R.allowRetries), R.maxRetries != null && (this._maxRetries = R.maxRetries));
    }
    options(A, S) {
      return i(this, void 0, void 0, function* () {
        return this.request("OPTIONS", A, null, S || {});
      });
    }
    get(A, S) {
      return i(this, void 0, void 0, function* () {
        return this.request("GET", A, null, S || {});
      });
    }
    del(A, S) {
      return i(this, void 0, void 0, function* () {
        return this.request("DELETE", A, null, S || {});
      });
    }
    post(A, S, R) {
      return i(this, void 0, void 0, function* () {
        return this.request("POST", A, S, R || {});
      });
    }
    patch(A, S, R) {
      return i(this, void 0, void 0, function* () {
        return this.request("PATCH", A, S, R || {});
      });
    }
    put(A, S, R) {
      return i(this, void 0, void 0, function* () {
        return this.request("PUT", A, S, R || {});
      });
    }
    head(A, S) {
      return i(this, void 0, void 0, function* () {
        return this.request("HEAD", A, null, S || {});
      });
    }
    sendStream(A, S, R, U) {
      return i(this, void 0, void 0, function* () {
        return this.request(A, S, R, U);
      });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    getJson(A, S = {}) {
      return i(this, void 0, void 0, function* () {
        S[c.Accept] = this._getExistingOrDefaultHeader(S, c.Accept, v.ApplicationJson);
        const R = yield this.get(A, S);
        return this._processResponse(R, this.requestOptions);
      });
    }
    postJson(A, S, R = {}) {
      return i(this, void 0, void 0, function* () {
        const U = JSON.stringify(S, null, 2);
        R[c.Accept] = this._getExistingOrDefaultHeader(R, c.Accept, v.ApplicationJson), R[c.ContentType] = this._getExistingOrDefaultHeader(R, c.ContentType, v.ApplicationJson);
        const L = yield this.post(A, U, R);
        return this._processResponse(L, this.requestOptions);
      });
    }
    putJson(A, S, R = {}) {
      return i(this, void 0, void 0, function* () {
        const U = JSON.stringify(S, null, 2);
        R[c.Accept] = this._getExistingOrDefaultHeader(R, c.Accept, v.ApplicationJson), R[c.ContentType] = this._getExistingOrDefaultHeader(R, c.ContentType, v.ApplicationJson);
        const L = yield this.put(A, U, R);
        return this._processResponse(L, this.requestOptions);
      });
    }
    patchJson(A, S, R = {}) {
      return i(this, void 0, void 0, function* () {
        const U = JSON.stringify(S, null, 2);
        R[c.Accept] = this._getExistingOrDefaultHeader(R, c.Accept, v.ApplicationJson), R[c.ContentType] = this._getExistingOrDefaultHeader(R, c.ContentType, v.ApplicationJson);
        const L = yield this.patch(A, U, R);
        return this._processResponse(L, this.requestOptions);
      });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    request(A, S, R, U) {
      return i(this, void 0, void 0, function* () {
        if (this._disposed)
          throw new Error("Client has already been disposed.");
        const L = new URL(S);
        let M = this._prepareRequest(A, L, U);
        const J = this._allowRetries && f.includes(A) ? this._maxRetries + 1 : 1;
        let X = 0, Y;
        do {
          if (Y = yield this.requestRaw(M, R), Y && Y.message && Y.message.statusCode === u.Unauthorized) {
            let ee;
            for (const H of this.handlers)
              if (H.canHandleAuthentication(Y)) {
                ee = H;
                break;
              }
            return ee ? ee.handleAuthentication(this, M, R) : Y;
          }
          let ne = this._maxRedirects;
          for (; Y.message.statusCode && g.includes(Y.message.statusCode) && this._allowRedirects && ne > 0; ) {
            const ee = Y.message.headers.location;
            if (!ee)
              break;
            const H = new URL(ee);
            if (L.protocol === "https:" && L.protocol !== H.protocol && !this._allowRedirectDowngrade)
              throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
            if (yield Y.readBody(), H.hostname !== L.hostname)
              for (const j in U)
                j.toLowerCase() === "authorization" && delete U[j];
            M = this._prepareRequest(A, H, U), Y = yield this.requestRaw(M, R), ne--;
          }
          if (!Y.message.statusCode || !w.includes(Y.message.statusCode))
            return Y;
          X += 1, X < J && (yield Y.readBody(), yield this._performExponentialBackoff(X));
        } while (X < J);
        return Y;
      });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
      this._agent && this._agent.destroy(), this._disposed = !0;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(A, S) {
      return i(this, void 0, void 0, function* () {
        return new Promise((R, U) => {
          function L(M, J) {
            M ? U(M) : J ? R(J) : U(new Error("Unknown error"));
          }
          this.requestRawWithCallback(A, S, L);
        });
      });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(A, S, R) {
      typeof S == "string" && (A.options.headers || (A.options.headers = {}), A.options.headers["Content-Length"] = Buffer.byteLength(S, "utf8"));
      let U = !1;
      function L(X, Y) {
        U || (U = !0, R(X, Y));
      }
      const M = A.httpModule.request(A.options, (X) => {
        const Y = new N(X);
        L(void 0, Y);
      });
      let J;
      M.on("socket", (X) => {
        J = X;
      }), M.setTimeout(this._socketTimeout || 3 * 6e4, () => {
        J && J.end(), L(new Error(`Request timeout: ${A.options.path}`));
      }), M.on("error", function(X) {
        L(X);
      }), S && typeof S == "string" && M.write(S, "utf8"), S && typeof S != "string" ? (S.on("close", function() {
        M.end();
      }), S.pipe(M)) : M.end();
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(A) {
      const S = new URL(A);
      return this._getAgent(S);
    }
    _prepareRequest(A, S, R) {
      const U = {};
      U.parsedUrl = S;
      const L = U.parsedUrl.protocol === "https:";
      U.httpModule = L ? o : s;
      const M = L ? 443 : 80;
      if (U.options = {}, U.options.host = U.parsedUrl.hostname, U.options.port = U.parsedUrl.port ? parseInt(U.parsedUrl.port) : M, U.options.path = (U.parsedUrl.pathname || "") + (U.parsedUrl.search || ""), U.options.method = A, U.options.headers = this._mergeHeaders(R), this.userAgent != null && (U.options.headers["user-agent"] = this.userAgent), U.options.agent = this._getAgent(U.parsedUrl), this.handlers)
        for (const J of this.handlers)
          J.prepareRequest(U.options);
      return U;
    }
    _mergeHeaders(A) {
      return this.requestOptions && this.requestOptions.headers ? Object.assign({}, P(this.requestOptions.headers), P(A || {})) : P(A || {});
    }
    _getExistingOrDefaultHeader(A, S, R) {
      let U;
      return this.requestOptions && this.requestOptions.headers && (U = P(this.requestOptions.headers)[S]), A[S] || U || R;
    }
    _getAgent(A) {
      let S;
      const R = d.getProxyUrl(A), U = R && R.hostname;
      if (this._keepAlive && U && (S = this._proxyAgent), this._keepAlive && !U && (S = this._agent), S)
        return S;
      const L = A.protocol === "https:";
      let M = 100;
      if (this.requestOptions && (M = this.requestOptions.maxSockets || s.globalAgent.maxSockets), R && R.hostname) {
        const J = {
          maxSockets: M,
          keepAlive: this._keepAlive,
          proxy: Object.assign(Object.assign({}, (R.username || R.password) && {
            proxyAuth: `${R.username}:${R.password}`
          }), { host: R.hostname, port: R.port })
        };
        let X;
        const Y = R.protocol === "https:";
        L ? X = Y ? l.httpsOverHttps : l.httpsOverHttp : X = Y ? l.httpOverHttps : l.httpOverHttp, S = X(J), this._proxyAgent = S;
      }
      if (this._keepAlive && !S) {
        const J = { keepAlive: this._keepAlive, maxSockets: M };
        S = L ? new o.Agent(J) : new s.Agent(J), this._agent = S;
      }
      return S || (S = L ? o.globalAgent : s.globalAgent), L && this._ignoreSslError && (S.options = Object.assign(S.options || {}, {
        rejectUnauthorized: !1
      })), S;
    }
    _performExponentialBackoff(A) {
      return i(this, void 0, void 0, function* () {
        A = Math.min(b, A);
        const S = y * Math.pow(2, A);
        return new Promise((R) => setTimeout(() => R(), S));
      });
    }
    _processResponse(A, S) {
      return i(this, void 0, void 0, function* () {
        return new Promise((R, U) => i(this, void 0, void 0, function* () {
          const L = A.message.statusCode || 0, M = {
            statusCode: L,
            result: null,
            headers: {}
          };
          L === u.NotFound && R(M);
          function J(ne, ee) {
            if (typeof ee == "string") {
              const H = new Date(ee);
              if (!isNaN(H.valueOf()))
                return H;
            }
            return ee;
          }
          let X, Y;
          try {
            Y = yield A.readBody(), Y && Y.length > 0 && (S && S.deserializeDates ? X = JSON.parse(Y, J) : X = JSON.parse(Y), M.result = X), M.headers = A.message.headers;
          } catch {
          }
          if (L > 299) {
            let ne;
            X && X.message ? ne = X.message : Y && Y.length > 0 ? ne = Y : ne = `Failed request: (${L})`;
            const ee = new k(ne, L);
            ee.result = M.result, U(ee);
          } else
            R(M);
        }));
      });
    }
  }
  e.HttpClient = O;
  const P = (C) => Object.keys(C).reduce((A, S) => (A[S.toLowerCase()] = C[S], A), {});
})(Za);
var Nt = {}, ds = D && D.__awaiter || function(e, t, r, a) {
  function i(s) {
    return s instanceof r ? s : new r(function(o) {
      o(s);
    });
  }
  return new (r || (r = Promise))(function(s, o) {
    function d(c) {
      try {
        u(a.next(c));
      } catch (v) {
        o(v);
      }
    }
    function l(c) {
      try {
        u(a.throw(c));
      } catch (v) {
        o(v);
      }
    }
    function u(c) {
      c.done ? s(c.value) : i(c.value).then(d, l);
    }
    u((a = a.apply(e, t || [])).next());
  });
};
Object.defineProperty(Nt, "__esModule", { value: !0 });
Nt.PersonalAccessTokenCredentialHandler = Nt.BearerCredentialHandler = Nt.BasicCredentialHandler = void 0;
class d4 {
  constructor(t, r) {
    this.username = t, this.password = r;
  }
  prepareRequest(t) {
    if (!t.headers)
      throw Error("The request has no headers");
    t.headers.Authorization = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
  }
  // This handler cannot handle 401
  canHandleAuthentication() {
    return !1;
  }
  handleAuthentication() {
    return ds(this, void 0, void 0, function* () {
      throw new Error("not implemented");
    });
  }
}
Nt.BasicCredentialHandler = d4;
class l4 {
  constructor(t) {
    this.token = t;
  }
  // currently implements pre-authorization
  // TODO: support preAuth = false where it hooks on 401
  prepareRequest(t) {
    if (!t.headers)
      throw Error("The request has no headers");
    t.headers.Authorization = `Bearer ${this.token}`;
  }
  // This handler cannot handle 401
  canHandleAuthentication() {
    return !1;
  }
  handleAuthentication() {
    return ds(this, void 0, void 0, function* () {
      throw new Error("not implemented");
    });
  }
}
Nt.BearerCredentialHandler = l4;
class u4 {
  constructor(t) {
    this.token = t;
  }
  // currently implements pre-authorization
  // TODO: support preAuth = false where it hooks on 401
  prepareRequest(t) {
    if (!t.headers)
      throw Error("The request has no headers");
    t.headers.Authorization = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
  }
  // This handler cannot handle 401
  canHandleAuthentication() {
    return !1;
  }
  handleAuthentication() {
    return ds(this, void 0, void 0, function* () {
      throw new Error("not implemented");
    });
  }
}
Nt.PersonalAccessTokenCredentialHandler = u4;
var Ho;
function m4() {
  if (Ho)
    return Ta;
  Ho = 1;
  var e = D && D.__awaiter || function(s, o, d, l) {
    function u(c) {
      return c instanceof d ? c : new d(function(v) {
        v(c);
      });
    }
    return new (d || (d = Promise))(function(c, v) {
      function T(f) {
        try {
          w(l.next(f));
        } catch (b) {
          v(b);
        }
      }
      function g(f) {
        try {
          w(l.throw(f));
        } catch (b) {
          v(b);
        }
      }
      function w(f) {
        f.done ? c(f.value) : u(f.value).then(T, g);
      }
      w((l = l.apply(s, o || [])).next());
    });
  };
  Object.defineProperty(Ta, "__esModule", { value: !0 }), Ta.OidcClient = void 0;
  const t = Za, r = Nt, a = Xe();
  class i {
    static createHttpClient(o = !0, d = 10) {
      const l = {
        allowRetries: o,
        maxRetries: d
      };
      return new t.HttpClient("actions/oidc-client", [new r.BearerCredentialHandler(i.getRequestToken())], l);
    }
    static getRequestToken() {
      const o = process.env.ACTIONS_ID_TOKEN_REQUEST_TOKEN;
      if (!o)
        throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
      return o;
    }
    static getIDTokenUrl() {
      const o = process.env.ACTIONS_ID_TOKEN_REQUEST_URL;
      if (!o)
        throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
      return o;
    }
    static getCall(o) {
      var d;
      return e(this, void 0, void 0, function* () {
        const c = (d = (yield i.createHttpClient().getJson(o).catch((v) => {
          throw new Error(`Failed to get ID Token. 
 
        Error Code : ${v.statusCode}
 
        Error Message: ${v.result.message}`);
        })).result) === null || d === void 0 ? void 0 : d.value;
        if (!c)
          throw new Error("Response json body do not have ID Token field");
        return c;
      });
    }
    static getIDToken(o) {
      return e(this, void 0, void 0, function* () {
        try {
          let d = i.getIDTokenUrl();
          if (o) {
            const u = encodeURIComponent(o);
            d = `${d}&audience=${u}`;
          }
          a.debug(`ID token url is ${d}`);
          const l = yield i.getCall(d);
          return a.setSecret(l), l;
        } catch (d) {
          throw new Error(`Error message: ${d.message}`);
        }
      });
    }
  }
  return Ta.OidcClient = i, Ta;
}
var _n = {}, Ko;
function Qo() {
  return Ko || (Ko = 1, function(e) {
    var t = D && D.__awaiter || function(u, c, v, T) {
      function g(w) {
        return w instanceof v ? w : new v(function(f) {
          f(w);
        });
      }
      return new (v || (v = Promise))(function(w, f) {
        function b(N) {
          try {
            k(T.next(N));
          } catch ($) {
            f($);
          }
        }
        function y(N) {
          try {
            k(T.throw(N));
          } catch ($) {
            f($);
          }
        }
        function k(N) {
          N.done ? w(N.value) : g(N.value).then(b, y);
        }
        k((T = T.apply(u, c || [])).next());
      });
    };
    Object.defineProperty(e, "__esModule", { value: !0 }), e.summary = e.markdownSummary = e.SUMMARY_DOCS_URL = e.SUMMARY_ENV_VAR = void 0;
    const r = ar, a = Pe, { access: i, appendFile: s, writeFile: o } = a.promises;
    e.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY", e.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
    class d {
      constructor() {
        this._buffer = "";
      }
      /**
       * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
       * Also checks r/w permissions.
       *
       * @returns step summary file path
       */
      filePath() {
        return t(this, void 0, void 0, function* () {
          if (this._filePath)
            return this._filePath;
          const c = process.env[e.SUMMARY_ENV_VAR];
          if (!c)
            throw new Error(`Unable to find environment variable for $${e.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
          try {
            yield i(c, a.constants.R_OK | a.constants.W_OK);
          } catch {
            throw new Error(`Unable to access summary file: '${c}'. Check if the file has correct read/write permissions.`);
          }
          return this._filePath = c, this._filePath;
        });
      }
      /**
       * Wraps content in an HTML tag, adding any HTML attributes
       *
       * @param {string} tag HTML tag to wrap
       * @param {string | null} content content within the tag
       * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
       *
       * @returns {string} content wrapped in HTML element
       */
      wrap(c, v, T = {}) {
        const g = Object.entries(T).map(([w, f]) => ` ${w}="${f}"`).join("");
        return v ? `<${c}${g}>${v}</${c}>` : `<${c}${g}>`;
      }
      /**
       * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
       *
       * @param {SummaryWriteOptions} [options] (optional) options for write operation
       *
       * @returns {Promise<Summary>} summary instance
       */
      write(c) {
        return t(this, void 0, void 0, function* () {
          const v = !!(c != null && c.overwrite), T = yield this.filePath();
          return yield (v ? o : s)(T, this._buffer, { encoding: "utf8" }), this.emptyBuffer();
        });
      }
      /**
       * Clears the summary buffer and wipes the summary file
       *
       * @returns {Summary} summary instance
       */
      clear() {
        return t(this, void 0, void 0, function* () {
          return this.emptyBuffer().write({ overwrite: !0 });
        });
      }
      /**
       * Returns the current summary buffer as a string
       *
       * @returns {string} string of summary buffer
       */
      stringify() {
        return this._buffer;
      }
      /**
       * If the summary buffer is empty
       *
       * @returns {boolen} true if the buffer is empty
       */
      isEmptyBuffer() {
        return this._buffer.length === 0;
      }
      /**
       * Resets the summary buffer without writing to summary file
       *
       * @returns {Summary} summary instance
       */
      emptyBuffer() {
        return this._buffer = "", this;
      }
      /**
       * Adds raw text to the summary buffer
       *
       * @param {string} text content to add
       * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
       *
       * @returns {Summary} summary instance
       */
      addRaw(c, v = !1) {
        return this._buffer += c, v ? this.addEOL() : this;
      }
      /**
       * Adds the operating system-specific end-of-line marker to the buffer
       *
       * @returns {Summary} summary instance
       */
      addEOL() {
        return this.addRaw(r.EOL);
      }
      /**
       * Adds an HTML codeblock to the summary buffer
       *
       * @param {string} code content to render within fenced code block
       * @param {string} lang (optional) language to syntax highlight code
       *
       * @returns {Summary} summary instance
       */
      addCodeBlock(c, v) {
        const T = Object.assign({}, v && { lang: v }), g = this.wrap("pre", this.wrap("code", c), T);
        return this.addRaw(g).addEOL();
      }
      /**
       * Adds an HTML list to the summary buffer
       *
       * @param {string[]} items list of items to render
       * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
       *
       * @returns {Summary} summary instance
       */
      addList(c, v = !1) {
        const T = v ? "ol" : "ul", g = c.map((f) => this.wrap("li", f)).join(""), w = this.wrap(T, g);
        return this.addRaw(w).addEOL();
      }
      /**
       * Adds an HTML table to the summary buffer
       *
       * @param {SummaryTableCell[]} rows table rows
       *
       * @returns {Summary} summary instance
       */
      addTable(c) {
        const v = c.map((g) => {
          const w = g.map((f) => {
            if (typeof f == "string")
              return this.wrap("td", f);
            const { header: b, data: y, colspan: k, rowspan: N } = f, $ = b ? "th" : "td", O = Object.assign(Object.assign({}, k && { colspan: k }), N && { rowspan: N });
            return this.wrap($, y, O);
          }).join("");
          return this.wrap("tr", w);
        }).join(""), T = this.wrap("table", v);
        return this.addRaw(T).addEOL();
      }
      /**
       * Adds a collapsable HTML details element to the summary buffer
       *
       * @param {string} label text for the closed state
       * @param {string} content collapsable content
       *
       * @returns {Summary} summary instance
       */
      addDetails(c, v) {
        const T = this.wrap("details", this.wrap("summary", c) + v);
        return this.addRaw(T).addEOL();
      }
      /**
       * Adds an HTML image tag to the summary buffer
       *
       * @param {string} src path to the image you to embed
       * @param {string} alt text description of the image
       * @param {SummaryImageOptions} options (optional) addition image attributes
       *
       * @returns {Summary} summary instance
       */
      addImage(c, v, T) {
        const { width: g, height: w } = T || {}, f = Object.assign(Object.assign({}, g && { width: g }), w && { height: w }), b = this.wrap("img", null, Object.assign({ src: c, alt: v }, f));
        return this.addRaw(b).addEOL();
      }
      /**
       * Adds an HTML section heading element
       *
       * @param {string} text heading text
       * @param {number | string} [level=1] (optional) the heading level, default: 1
       *
       * @returns {Summary} summary instance
       */
      addHeading(c, v) {
        const T = `h${v}`, g = ["h1", "h2", "h3", "h4", "h5", "h6"].includes(T) ? T : "h1", w = this.wrap(g, c);
        return this.addRaw(w).addEOL();
      }
      /**
       * Adds an HTML thematic break (<hr>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addSeparator() {
        const c = this.wrap("hr", null);
        return this.addRaw(c).addEOL();
      }
      /**
       * Adds an HTML line break (<br>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addBreak() {
        const c = this.wrap("br", null);
        return this.addRaw(c).addEOL();
      }
      /**
       * Adds an HTML blockquote to the summary buffer
       *
       * @param {string} text quote text
       * @param {string} cite (optional) citation url
       *
       * @returns {Summary} summary instance
       */
      addQuote(c, v) {
        const T = Object.assign({}, v && { cite: v }), g = this.wrap("blockquote", c, T);
        return this.addRaw(g).addEOL();
      }
      /**
       * Adds an HTML anchor tag to the summary buffer
       *
       * @param {string} text link text/content
       * @param {string} href hyperlink
       *
       * @returns {Summary} summary instance
       */
      addLink(c, v) {
        const T = this.wrap("a", c, { href: v });
        return this.addRaw(T).addEOL();
      }
    }
    const l = new d();
    e.markdownSummary = l, e.summary = l;
  }(_n)), _n;
}
var Ct = {}, Yo;
function c4() {
  if (Yo)
    return Ct;
  Yo = 1;
  var e = D && D.__createBinding || (Object.create ? function(d, l, u, c) {
    c === void 0 && (c = u), Object.defineProperty(d, c, { enumerable: !0, get: function() {
      return l[u];
    } });
  } : function(d, l, u, c) {
    c === void 0 && (c = u), d[c] = l[u];
  }), t = D && D.__setModuleDefault || (Object.create ? function(d, l) {
    Object.defineProperty(d, "default", { enumerable: !0, value: l });
  } : function(d, l) {
    d.default = l;
  }), r = D && D.__importStar || function(d) {
    if (d && d.__esModule)
      return d;
    var l = {};
    if (d != null)
      for (var u in d)
        u !== "default" && Object.hasOwnProperty.call(d, u) && e(l, d, u);
    return t(l, d), l;
  };
  Object.defineProperty(Ct, "__esModule", { value: !0 }), Ct.toPlatformPath = Ct.toWin32Path = Ct.toPosixPath = void 0;
  const a = r(ye);
  function i(d) {
    return d.replace(/[\\]/g, "/");
  }
  Ct.toPosixPath = i;
  function s(d) {
    return d.replace(/[/]/g, "\\");
  }
  Ct.toWin32Path = s;
  function o(d) {
    return d.replace(/[/\\]/g, a.sep);
  }
  return Ct.toPlatformPath = o, Ct;
}
var Jo;
function Xe() {
  return Jo || (Jo = 1, function(e) {
    var t = D && D.__createBinding || (Object.create ? function(j, K, re, me) {
      me === void 0 && (me = re), Object.defineProperty(j, me, { enumerable: !0, get: function() {
        return K[re];
      } });
    } : function(j, K, re, me) {
      me === void 0 && (me = re), j[me] = K[re];
    }), r = D && D.__setModuleDefault || (Object.create ? function(j, K) {
      Object.defineProperty(j, "default", { enumerable: !0, value: K });
    } : function(j, K) {
      j.default = K;
    }), a = D && D.__importStar || function(j) {
      if (j && j.__esModule)
        return j;
      var K = {};
      if (j != null)
        for (var re in j)
          re !== "default" && Object.hasOwnProperty.call(j, re) && t(K, j, re);
      return r(K, j), K;
    }, i = D && D.__awaiter || function(j, K, re, me) {
      function Me(Ve) {
        return Ve instanceof re ? Ve : new re(function(it) {
          it(Ve);
        });
      }
      return new (re || (re = Promise))(function(Ve, it) {
        function Tt(qe) {
          try {
            ae(me.next(qe));
          } catch (F) {
            it(F);
          }
        }
        function Be(qe) {
          try {
            ae(me.throw(qe));
          } catch (F) {
            it(F);
          }
        }
        function ae(qe) {
          qe.done ? Ve(qe.value) : Me(qe.value).then(Tt, Be);
        }
        ae((me = me.apply(j, K || [])).next());
      });
    };
    Object.defineProperty(e, "__esModule", { value: !0 }), e.getIDToken = e.getState = e.saveState = e.group = e.endGroup = e.startGroup = e.info = e.notice = e.warning = e.error = e.debug = e.isDebug = e.setFailed = e.setCommandEcho = e.setOutput = e.getBooleanInput = e.getMultilineInput = e.getInput = e.addPath = e.setSecret = e.exportVariable = e.ExitCode = void 0;
    const s = Hr, o = Kr, d = tr, l = a(ar), u = a(ye), c = m4();
    var v;
    (function(j) {
      j[j.Success = 0] = "Success", j[j.Failure = 1] = "Failure";
    })(v = e.ExitCode || (e.ExitCode = {}));
    function T(j, K) {
      const re = d.toCommandValue(K);
      if (process.env[j] = re, process.env.GITHUB_ENV || "")
        return o.issueFileCommand("ENV", o.prepareKeyValueMessage(j, K));
      s.issueCommand("set-env", { name: j }, re);
    }
    e.exportVariable = T;
    function g(j) {
      s.issueCommand("add-mask", {}, j);
    }
    e.setSecret = g;
    function w(j) {
      process.env.GITHUB_PATH || "" ? o.issueFileCommand("PATH", j) : s.issueCommand("add-path", {}, j), process.env.PATH = `${j}${u.delimiter}${process.env.PATH}`;
    }
    e.addPath = w;
    function f(j, K) {
      const re = process.env[`INPUT_${j.replace(/ /g, "_").toUpperCase()}`] || "";
      if (K && K.required && !re)
        throw new Error(`Input required and not supplied: ${j}`);
      return K && K.trimWhitespace === !1 ? re : re.trim();
    }
    e.getInput = f;
    function b(j, K) {
      const re = f(j, K).split(`
`).filter((me) => me !== "");
      return K && K.trimWhitespace === !1 ? re : re.map((me) => me.trim());
    }
    e.getMultilineInput = b;
    function y(j, K) {
      const re = ["true", "True", "TRUE"], me = ["false", "False", "FALSE"], Me = f(j, K);
      if (re.includes(Me))
        return !0;
      if (me.includes(Me))
        return !1;
      throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${j}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
    }
    e.getBooleanInput = y;
    function k(j, K) {
      if (process.env.GITHUB_OUTPUT || "")
        return o.issueFileCommand("OUTPUT", o.prepareKeyValueMessage(j, K));
      process.stdout.write(l.EOL), s.issueCommand("set-output", { name: j }, d.toCommandValue(K));
    }
    e.setOutput = k;
    function N(j) {
      s.issue("echo", j ? "on" : "off");
    }
    e.setCommandEcho = N;
    function $(j) {
      process.exitCode = v.Failure, C(j);
    }
    e.setFailed = $;
    function O() {
      return process.env.RUNNER_DEBUG === "1";
    }
    e.isDebug = O;
    function P(j) {
      s.issueCommand("debug", {}, j);
    }
    e.debug = P;
    function C(j, K = {}) {
      s.issueCommand("error", d.toCommandProperties(K), j instanceof Error ? j.toString() : j);
    }
    e.error = C;
    function A(j, K = {}) {
      s.issueCommand("warning", d.toCommandProperties(K), j instanceof Error ? j.toString() : j);
    }
    e.warning = A;
    function S(j, K = {}) {
      s.issueCommand("notice", d.toCommandProperties(K), j instanceof Error ? j.toString() : j);
    }
    e.notice = S;
    function R(j) {
      process.stdout.write(j + l.EOL);
    }
    e.info = R;
    function U(j) {
      s.issue("group", j);
    }
    e.startGroup = U;
    function L() {
      s.issue("endgroup");
    }
    e.endGroup = L;
    function M(j, K) {
      return i(this, void 0, void 0, function* () {
        U(j);
        let re;
        try {
          re = yield K();
        } finally {
          L();
        }
        return re;
      });
    }
    e.group = M;
    function J(j, K) {
      if (process.env.GITHUB_STATE || "")
        return o.issueFileCommand("STATE", o.prepareKeyValueMessage(j, K));
      s.issueCommand("save-state", { name: j }, d.toCommandValue(K));
    }
    e.saveState = J;
    function X(j) {
      return process.env[`STATE_${j}`] || "";
    }
    e.getState = X;
    function Y(j) {
      return i(this, void 0, void 0, function* () {
        return yield c.OidcClient.getIDToken(j);
      });
    }
    e.getIDToken = Y;
    var ne = Qo();
    Object.defineProperty(e, "summary", { enumerable: !0, get: function() {
      return ne.summary;
    } });
    var ee = Qo();
    Object.defineProperty(e, "markdownSummary", { enumerable: !0, get: function() {
      return ee.markdownSummary;
    } });
    var H = c4();
    Object.defineProperty(e, "toPosixPath", { enumerable: !0, get: function() {
      return H.toPosixPath;
    } }), Object.defineProperty(e, "toWin32Path", { enumerable: !0, get: function() {
      return H.toWin32Path;
    } }), Object.defineProperty(e, "toPlatformPath", { enumerable: !0, get: function() {
      return H.toPlatformPath;
    } });
  }(cn)), cn;
}
var Ei = {}, _r = {};
Object.defineProperty(_r, "__esModule", { value: !0 });
_r.checkArtifactFilePath = _r.checkArtifactName = void 0;
const f4 = Xe(), Wn = /* @__PURE__ */ new Map([
  ['"', ' Double quote "'],
  [":", " Colon :"],
  ["<", " Less than <"],
  [">", " Greater than >"],
  ["|", " Vertical bar |"],
  ["*", " Asterisk *"],
  ["?", " Question mark ?"],
  ["\r", " Carriage return \\r"],
  [`
`, " Line feed \\n"]
]), Zo = new Map([
  ...Wn,
  ["\\", " Backslash \\"],
  ["/", " Forward slash /"]
]);
function h4(e) {
  if (!e)
    throw new Error(`Artifact name: ${e}, is incorrectly provided`);
  for (const [t, r] of Zo)
    if (e.includes(t))
      throw new Error(`Artifact name is not valid: ${e}. Contains the following character: ${r}
          
Invalid characters include: ${Array.from(Zo.values()).toString()}
          
These characters are not allowed in the artifact name due to limitations with certain file systems such as NTFS. To maintain file system agnostic behavior, these characters are intentionally not allowed to prevent potential problems with downloads on different file systems.`);
  f4.info("Artifact name is valid!");
}
_r.checkArtifactName = h4;
function g4(e) {
  if (!e)
    throw new Error(`Artifact path: ${e}, is incorrectly provided`);
  for (const [t, r] of Wn)
    if (e.includes(t))
      throw new Error(`Artifact path is not valid: ${e}. Contains the following character: ${r}
          
Invalid characters include: ${Array.from(Wn.values()).toString()}
          
The following characters are not allowed in files that are uploaded due to limitations with certain file systems such as NTFS. To maintain file system agnostic behavior, these characters are intentionally not allowed to prevent potential problems with downloads on different file systems.
          `);
}
_r.checkArtifactFilePath = g4;
var v4 = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), w4 = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), _4 = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && v4(t, e, r);
  return w4(t, e), t;
};
Object.defineProperty(Ei, "__esModule", { value: !0 });
Ei.getUploadSpecification = void 0;
const x1 = _4(Pe), b4 = Xe(), Sa = ye, y4 = _r;
function E4(e, t, r) {
  const a = [];
  if (!x1.existsSync(t))
    throw new Error(`Provided rootDirectory ${t} does not exist`);
  if (!x1.lstatSync(t).isDirectory())
    throw new Error(`Provided rootDirectory ${t} is not a valid directory`);
  t = Sa.normalize(t), t = Sa.resolve(t);
  for (let i of r) {
    if (!x1.existsSync(i))
      throw new Error(`File ${i} does not exist`);
    if (x1.lstatSync(i).isDirectory())
      b4.debug(`Removing ${i} from rawSearchResults because it is a directory`);
    else {
      if (i = Sa.normalize(i), i = Sa.resolve(i), !i.startsWith(t))
        throw new Error(`The rootDirectory: ${t} is not a parent directory of the file: ${i}`);
      const s = i.replace(t, "");
      y4.checkArtifactFilePath(s), a.push({
        absoluteFilePath: i,
        uploadFilePath: Sa.join(e, s)
      });
    }
  }
  return a;
}
Ei.getUploadSpecification = E4;
var Ti = {}, Cd = { exports: {} }, Dd = { exports: {} }, V1 = {}, Xo;
function T4() {
  if (Xo)
    return V1;
  Xo = 1;
  var e = ye, t = process.platform === "win32", r = Pe, a = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);
  function i() {
    var l;
    if (a) {
      var u = new Error();
      l = c;
    } else
      l = v;
    return l;
    function c(T) {
      T && (u.message = T.message, T = u, v(T));
    }
    function v(T) {
      if (T) {
        if (process.throwDeprecation)
          throw T;
        if (!process.noDeprecation) {
          var g = "fs: missing callback " + (T.stack || T.message);
          process.traceDeprecation ? console.trace(g) : console.error(g);
        }
      }
    }
  }
  function s(l) {
    return typeof l == "function" ? l : i();
  }
  if (e.normalize, t)
    var o = /(.*?)(?:[\/\\]+|$)/g;
  else
    var o = /(.*?)(?:[\/]+|$)/g;
  if (t)
    var d = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
  else
    var d = /^[\/]*/;
  return V1.realpathSync = function(u, c) {
    if (u = e.resolve(u), c && Object.prototype.hasOwnProperty.call(c, u))
      return c[u];
    var v = u, T = {}, g = {}, w, f, b, y;
    k();
    function k() {
      var A = d.exec(u);
      w = A[0].length, f = A[0], b = A[0], y = "", t && !g[b] && (r.lstatSync(b), g[b] = !0);
    }
    for (; w < u.length; ) {
      o.lastIndex = w;
      var N = o.exec(u);
      if (y = f, f += N[0], b = y + N[1], w = o.lastIndex, !(g[b] || c && c[b] === b)) {
        var $;
        if (c && Object.prototype.hasOwnProperty.call(c, b))
          $ = c[b];
        else {
          var O = r.lstatSync(b);
          if (!O.isSymbolicLink()) {
            g[b] = !0, c && (c[b] = b);
            continue;
          }
          var P = null;
          if (!t) {
            var C = O.dev.toString(32) + ":" + O.ino.toString(32);
            T.hasOwnProperty(C) && (P = T[C]);
          }
          P === null && (r.statSync(b), P = r.readlinkSync(b)), $ = e.resolve(y, P), c && (c[b] = $), t || (T[C] = P);
        }
        u = e.resolve($, u.slice(w)), k();
      }
    }
    return c && (c[v] = u), u;
  }, V1.realpath = function(u, c, v) {
    if (typeof v != "function" && (v = s(c), c = null), u = e.resolve(u), c && Object.prototype.hasOwnProperty.call(c, u))
      return process.nextTick(v.bind(null, null, c[u]));
    var T = u, g = {}, w = {}, f, b, y, k;
    N();
    function N() {
      var A = d.exec(u);
      f = A[0].length, b = A[0], y = A[0], k = "", t && !w[y] ? r.lstat(y, function(S) {
        if (S)
          return v(S);
        w[y] = !0, $();
      }) : process.nextTick($);
    }
    function $() {
      if (f >= u.length)
        return c && (c[T] = u), v(null, u);
      o.lastIndex = f;
      var A = o.exec(u);
      return k = b, b += A[0], y = k + A[1], f = o.lastIndex, w[y] || c && c[y] === y ? process.nextTick($) : c && Object.prototype.hasOwnProperty.call(c, y) ? C(c[y]) : r.lstat(y, O);
    }
    function O(A, S) {
      if (A)
        return v(A);
      if (!S.isSymbolicLink())
        return w[y] = !0, c && (c[y] = y), process.nextTick($);
      if (!t) {
        var R = S.dev.toString(32) + ":" + S.ino.toString(32);
        if (g.hasOwnProperty(R))
          return P(null, g[R], y);
      }
      r.stat(y, function(U) {
        if (U)
          return v(U);
        r.readlink(y, function(L, M) {
          t || (g[R] = M), P(L, M);
        });
      });
    }
    function P(A, S, R) {
      if (A)
        return v(A);
      var U = e.resolve(k, S);
      c && (c[R] = U), C(U);
    }
    function C(A) {
      u = e.resolve(A, u.slice(f)), N();
    }
  }, V1;
}
var bn, ep;
function Rd() {
  if (ep)
    return bn;
  ep = 1, bn = d, d.realpath = d, d.sync = l, d.realpathSync = l, d.monkeypatch = u, d.unmonkeypatch = c;
  var e = Pe, t = e.realpath, r = e.realpathSync, a = process.version, i = /^v[0-5]\./.test(a), s = T4();
  function o(v) {
    return v && v.syscall === "realpath" && (v.code === "ELOOP" || v.code === "ENOMEM" || v.code === "ENAMETOOLONG");
  }
  function d(v, T, g) {
    if (i)
      return t(v, T, g);
    typeof T == "function" && (g = T, T = null), t(v, T, function(w, f) {
      o(w) ? s.realpath(v, T, g) : g(w, f);
    });
  }
  function l(v, T) {
    if (i)
      return r(v, T);
    try {
      return r(v, T);
    } catch (g) {
      if (o(g))
        return s.realpathSync(v, T);
      throw g;
    }
  }
  function u() {
    e.realpath = d, e.realpathSync = l;
  }
  function c() {
    e.realpath = t, e.realpathSync = r;
  }
  return bn;
}
var S4 = function(e, t) {
  for (var r = [], a = 0; a < e.length; a++) {
    var i = t(e[a], a);
    A4(i) ? r.push.apply(r, i) : r.push(i);
  }
  return r;
}, A4 = Array.isArray || function(e) {
  return Object.prototype.toString.call(e) === "[object Array]";
}, C4 = Od;
function Od(e, t, r) {
  e instanceof RegExp && (e = tp(e, r)), t instanceof RegExp && (t = tp(t, r));
  var a = Pd(e, t, r);
  return a && {
    start: a[0],
    end: a[1],
    pre: r.slice(0, a[0]),
    body: r.slice(a[0] + e.length, a[1]),
    post: r.slice(a[1] + t.length)
  };
}
function tp(e, t) {
  var r = t.match(e);
  return r ? r[0] : null;
}
Od.range = Pd;
function Pd(e, t, r) {
  var a, i, s, o, d, l = r.indexOf(e), u = r.indexOf(t, l + 1), c = l;
  if (l >= 0 && u > 0) {
    for (a = [], s = r.length; c >= 0 && !d; )
      c == l ? (a.push(c), l = r.indexOf(e, c + 1)) : a.length == 1 ? d = [a.pop(), u] : (i = a.pop(), i < s && (s = i, o = u), u = r.indexOf(t, c + 1)), c = l < u && l >= 0 ? l : u;
    a.length && (d = [s, o]);
  }
  return d;
}
var D4 = S4, Bd = C4, R4 = B4, Fd = "\0SLASH" + Math.random() + "\0", Nd = "\0OPEN" + Math.random() + "\0", ls = "\0CLOSE" + Math.random() + "\0", kd = "\0COMMA" + Math.random() + "\0", Id = "\0PERIOD" + Math.random() + "\0";
function yn(e) {
  return parseInt(e, 10) == e ? parseInt(e, 10) : e.charCodeAt(0);
}
function O4(e) {
  return e.split("\\\\").join(Fd).split("\\{").join(Nd).split("\\}").join(ls).split("\\,").join(kd).split("\\.").join(Id);
}
function P4(e) {
  return e.split(Fd).join("\\").split(Nd).join("{").split(ls).join("}").split(kd).join(",").split(Id).join(".");
}
function Gd(e) {
  if (!e)
    return [""];
  var t = [], r = Bd("{", "}", e);
  if (!r)
    return e.split(",");
  var a = r.pre, i = r.body, s = r.post, o = a.split(",");
  o[o.length - 1] += "{" + i + "}";
  var d = Gd(s);
  return s.length && (o[o.length - 1] += d.shift(), o.push.apply(o, d)), t.push.apply(t, o), t;
}
function B4(e) {
  return e ? (e.substr(0, 2) === "{}" && (e = "\\{\\}" + e.substr(2)), Lr(O4(e), !0).map(P4)) : [];
}
function F4(e) {
  return "{" + e + "}";
}
function N4(e) {
  return /^-?0\d/.test(e);
}
function k4(e, t) {
  return e <= t;
}
function I4(e, t) {
  return e >= t;
}
function Lr(e, t) {
  var r = [], a = Bd("{", "}", e);
  if (!a || /\$$/.test(a.pre))
    return [e];
  var i = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(a.body), s = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(a.body), o = i || s, d = a.body.indexOf(",") >= 0;
  if (!o && !d)
    return a.post.match(/,.*\}/) ? (e = a.pre + "{" + a.body + ls + a.post, Lr(e)) : [e];
  var l;
  if (o)
    l = a.body.split(/\.\./);
  else if (l = Gd(a.body), l.length === 1 && (l = Lr(l[0], !1).map(F4), l.length === 1)) {
    var c = a.post.length ? Lr(a.post, !1) : [""];
    return c.map(function(U) {
      return a.pre + l[0] + U;
    });
  }
  var u = a.pre, c = a.post.length ? Lr(a.post, !1) : [""], v;
  if (o) {
    var T = yn(l[0]), g = yn(l[1]), w = Math.max(l[0].length, l[1].length), f = l.length == 3 ? Math.abs(yn(l[2])) : 1, b = k4, y = g < T;
    y && (f *= -1, b = I4);
    var k = l.some(N4);
    v = [];
    for (var N = T; b(N, g); N += f) {
      var $;
      if (s)
        $ = String.fromCharCode(N), $ === "\\" && ($ = "");
      else if ($ = String(N), k) {
        var O = w - $.length;
        if (O > 0) {
          var P = new Array(O + 1).join("0");
          N < 0 ? $ = "-" + P + $.slice(1) : $ = P + $;
        }
      }
      v.push($);
    }
  } else
    v = D4(l, function(R) {
      return Lr(R, !1);
    });
  for (var C = 0; C < v.length; C++)
    for (var A = 0; A < c.length; A++) {
      var S = u + v[C] + c[A];
      (!t || o || S) && r.push(S);
    }
  return r;
}
var Si = Je;
Je.Minimatch = Oe;
var xa = function() {
  try {
    return require("path");
  } catch {
  }
}() || {
  sep: "/"
};
Je.sep = xa.sep;
var us = Je.GLOBSTAR = Oe.GLOBSTAR = {}, G4 = R4, rp = {
  "!": { open: "(?:(?!(?:", close: "))[^/]*?)" },
  "?": { open: "(?:", close: ")?" },
  "+": { open: "(?:", close: ")+" },
  "*": { open: "(?:", close: ")*" },
  "@": { open: "(?:", close: ")" }
}, zn = "[^/]", Hn = zn + "*?", $4 = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?", U4 = "(?:(?!(?:\\/|^)\\.).)*?", ap = x4("().*{}+?[]^$\\!");
function x4(e) {
  return e.split("").reduce(function(t, r) {
    return t[r] = !0, t;
  }, {});
}
var $d = /\/+/;
Je.filter = V4;
function V4(e, t) {
  return t = t || {}, function(r, a, i) {
    return Je(r, e, t);
  };
}
function qt(e, t) {
  t = t || {};
  var r = {};
  return Object.keys(e).forEach(function(a) {
    r[a] = e[a];
  }), Object.keys(t).forEach(function(a) {
    r[a] = t[a];
  }), r;
}
Je.defaults = function(e) {
  if (!e || typeof e != "object" || !Object.keys(e).length)
    return Je;
  var t = Je, r = function(i, s, o) {
    return t(i, s, qt(e, o));
  };
  return r.Minimatch = function(i, s) {
    return new t.Minimatch(i, qt(e, s));
  }, r.Minimatch.defaults = function(i) {
    return t.defaults(qt(e, i)).Minimatch;
  }, r.filter = function(i, s) {
    return t.filter(i, qt(e, s));
  }, r.defaults = function(i) {
    return t.defaults(qt(e, i));
  }, r.makeRe = function(i, s) {
    return t.makeRe(i, qt(e, s));
  }, r.braceExpand = function(i, s) {
    return t.braceExpand(i, qt(e, s));
  }, r.match = function(a, i, s) {
    return t.match(a, i, qt(e, s));
  }, r;
};
Oe.defaults = function(e) {
  return Je.defaults(e).Minimatch;
};
function Je(e, t, r) {
  return Ai(t), r || (r = {}), !r.nocomment && t.charAt(0) === "#" ? !1 : new Oe(t, r).match(e);
}
function Oe(e, t) {
  if (!(this instanceof Oe))
    return new Oe(e, t);
  Ai(e), t || (t = {}), e = e.trim(), !t.allowWindowsEscape && xa.sep !== "/" && (e = e.split(xa.sep).join("/")), this.options = t, this.set = [], this.pattern = e, this.regexp = null, this.negate = !1, this.comment = !1, this.empty = !1, this.partial = !!t.partial, this.make();
}
Oe.prototype.debug = function() {
};
Oe.prototype.make = L4;
function L4() {
  var e = this.pattern, t = this.options;
  if (!t.nocomment && e.charAt(0) === "#") {
    this.comment = !0;
    return;
  }
  if (!e) {
    this.empty = !0;
    return;
  }
  this.parseNegate();
  var r = this.globSet = this.braceExpand();
  t.debug && (this.debug = function() {
    console.error.apply(console, arguments);
  }), this.debug(this.pattern, r), r = this.globParts = r.map(function(a) {
    return a.split($d);
  }), this.debug(this.pattern, r), r = r.map(function(a, i, s) {
    return a.map(this.parse, this);
  }, this), this.debug(this.pattern, r), r = r.filter(function(a) {
    return a.indexOf(!1) === -1;
  }), this.debug(this.pattern, r), this.set = r;
}
Oe.prototype.parseNegate = j4;
function j4() {
  var e = this.pattern, t = !1, r = this.options, a = 0;
  if (!r.nonegate) {
    for (var i = 0, s = e.length; i < s && e.charAt(i) === "!"; i++)
      t = !t, a++;
    a && (this.pattern = e.substr(a)), this.negate = t;
  }
}
Je.braceExpand = function(e, t) {
  return Ud(e, t);
};
Oe.prototype.braceExpand = Ud;
function Ud(e, t) {
  return t || (this instanceof Oe ? t = this.options : t = {}), e = typeof e > "u" ? this.pattern : e, Ai(e), t.nobrace || !/\{(?:(?!\{).)*\}/.test(e) ? [e] : G4(e);
}
var M4 = 1024 * 64, Ai = function(e) {
  if (typeof e != "string")
    throw new TypeError("invalid pattern");
  if (e.length > M4)
    throw new TypeError("pattern is too long");
};
Oe.prototype.parse = q4;
var L1 = {};
function q4(e, t) {
  Ai(e);
  var r = this.options;
  if (e === "**")
    if (r.noglobstar)
      e = "*";
    else
      return us;
  if (e === "")
    return "";
  var a = "", i = !!r.nocase, s = !1, o = [], d = [], l, u = !1, c = -1, v = -1, T = e.charAt(0) === "." ? "" : r.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)", g = this;
  function w() {
    if (l) {
      switch (l) {
        case "*":
          a += Hn, i = !0;
          break;
        case "?":
          a += zn, i = !0;
          break;
        default:
          a += "\\" + l;
          break;
      }
      g.debug("clearStateChar %j %j", l, a), l = !1;
    }
  }
  for (var f = 0, b = e.length, y; f < b && (y = e.charAt(f)); f++) {
    if (this.debug("%s	%s %s %j", e, f, a, y), s && ap[y]) {
      a += "\\" + y, s = !1;
      continue;
    }
    switch (y) {
      case "/":
        return !1;
      case "\\":
        w(), s = !0;
        continue;
      case "?":
      case "*":
      case "+":
      case "@":
      case "!":
        if (this.debug("%s	%s %s %j <-- stateChar", e, f, a, y), u) {
          this.debug("  in class"), y === "!" && f === v + 1 && (y = "^"), a += y;
          continue;
        }
        g.debug("call clearStateChar %j", l), w(), l = y, r.noext && w();
        continue;
      case "(":
        if (u) {
          a += "(";
          continue;
        }
        if (!l) {
          a += "\\(";
          continue;
        }
        o.push({
          type: l,
          start: f - 1,
          reStart: a.length,
          open: rp[l].open,
          close: rp[l].close
        }), a += l === "!" ? "(?:(?!(?:" : "(?:", this.debug("plType %j %j", l, a), l = !1;
        continue;
      case ")":
        if (u || !o.length) {
          a += "\\)";
          continue;
        }
        w(), i = !0;
        var k = o.pop();
        a += k.close, k.type === "!" && d.push(k), k.reEnd = a.length;
        continue;
      case "|":
        if (u || !o.length || s) {
          a += "\\|", s = !1;
          continue;
        }
        w(), a += "|";
        continue;
      case "[":
        if (w(), u) {
          a += "\\" + y;
          continue;
        }
        u = !0, v = f, c = a.length, a += y;
        continue;
      case "]":
        if (f === v + 1 || !u) {
          a += "\\" + y, s = !1;
          continue;
        }
        var N = e.substring(v + 1, f);
        try {
          RegExp("[" + N + "]");
        } catch {
          var $ = this.parse(N, L1);
          a = a.substr(0, c) + "\\[" + $[0] + "\\]", i = i || $[1], u = !1;
          continue;
        }
        i = !0, u = !1, a += y;
        continue;
      default:
        w(), s ? s = !1 : ap[y] && !(y === "^" && u) && (a += "\\"), a += y;
    }
  }
  for (u && (N = e.substr(v + 1), $ = this.parse(N, L1), a = a.substr(0, c) + "\\[" + $[0], i = i || $[1]), k = o.pop(); k; k = o.pop()) {
    var O = a.slice(k.reStart + k.open.length);
    this.debug("setting tail", a, k), O = O.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(j, K, re) {
      return re || (re = "\\"), K + K + re + "|";
    }), this.debug(`tail=%j
   %s`, O, O, k, a);
    var P = k.type === "*" ? Hn : k.type === "?" ? zn : "\\" + k.type;
    i = !0, a = a.slice(0, k.reStart) + P + "\\(" + O;
  }
  w(), s && (a += "\\\\");
  var C = !1;
  switch (a.charAt(0)) {
    case "[":
    case ".":
    case "(":
      C = !0;
  }
  for (var A = d.length - 1; A > -1; A--) {
    var S = d[A], R = a.slice(0, S.reStart), U = a.slice(S.reStart, S.reEnd - 8), L = a.slice(S.reEnd - 8, S.reEnd), M = a.slice(S.reEnd);
    L += M;
    var J = R.split("(").length - 1, X = M;
    for (f = 0; f < J; f++)
      X = X.replace(/\)[+*?]?/, "");
    M = X;
    var Y = "";
    M === "" && t !== L1 && (Y = "$");
    var ne = R + U + M + Y + L;
    a = ne;
  }
  if (a !== "" && i && (a = "(?=.)" + a), C && (a = T + a), t === L1)
    return [a, i];
  if (!i)
    return z4(e);
  var ee = r.nocase ? "i" : "";
  try {
    var H = new RegExp("^" + a + "$", ee);
  } catch {
    return new RegExp("$.");
  }
  return H._glob = e, H._src = a, H;
}
Je.makeRe = function(e, t) {
  return new Oe(e, t || {}).makeRe();
};
Oe.prototype.makeRe = W4;
function W4() {
  if (this.regexp || this.regexp === !1)
    return this.regexp;
  var e = this.set;
  if (!e.length)
    return this.regexp = !1, this.regexp;
  var t = this.options, r = t.noglobstar ? Hn : t.dot ? $4 : U4, a = t.nocase ? "i" : "", i = e.map(function(s) {
    return s.map(function(o) {
      return o === us ? r : typeof o == "string" ? H4(o) : o._src;
    }).join("\\/");
  }).join("|");
  i = "^(?:" + i + ")$", this.negate && (i = "^(?!" + i + ").*$");
  try {
    this.regexp = new RegExp(i, a);
  } catch {
    this.regexp = !1;
  }
  return this.regexp;
}
Je.match = function(e, t, r) {
  r = r || {};
  var a = new Oe(t, r);
  return e = e.filter(function(i) {
    return a.match(i);
  }), a.options.nonull && !e.length && e.push(t), e;
};
Oe.prototype.match = function(t, r) {
  if (typeof r > "u" && (r = this.partial), this.debug("match", t, this.pattern), this.comment)
    return !1;
  if (this.empty)
    return t === "";
  if (t === "/" && r)
    return !0;
  var a = this.options;
  xa.sep !== "/" && (t = t.split(xa.sep).join("/")), t = t.split($d), this.debug(this.pattern, "split", t);
  var i = this.set;
  this.debug(this.pattern, "set", i);
  var s, o;
  for (o = t.length - 1; o >= 0 && (s = t[o], !s); o--)
    ;
  for (o = 0; o < i.length; o++) {
    var d = i[o], l = t;
    a.matchBase && d.length === 1 && (l = [s]);
    var u = this.matchOne(l, d, r);
    if (u)
      return a.flipNegate ? !0 : !this.negate;
  }
  return a.flipNegate ? !1 : this.negate;
};
Oe.prototype.matchOne = function(e, t, r) {
  var a = this.options;
  this.debug(
    "matchOne",
    { this: this, file: e, pattern: t }
  ), this.debug("matchOne", e.length, t.length);
  for (var i = 0, s = 0, o = e.length, d = t.length; i < o && s < d; i++, s++) {
    this.debug("matchOne loop");
    var l = t[s], u = e[i];
    if (this.debug(t, l, u), l === !1)
      return !1;
    if (l === us) {
      this.debug("GLOBSTAR", [t, l, u]);
      var c = i, v = s + 1;
      if (v === d) {
        for (this.debug("** at the end"); i < o; i++)
          if (e[i] === "." || e[i] === ".." || !a.dot && e[i].charAt(0) === ".")
            return !1;
        return !0;
      }
      for (; c < o; ) {
        var T = e[c];
        if (this.debug(`
globstar while`, e, c, t, v, T), this.matchOne(e.slice(c), t.slice(v), r))
          return this.debug("globstar found match!", c, o, T), !0;
        if (T === "." || T === ".." || !a.dot && T.charAt(0) === ".") {
          this.debug("dot detected!", e, c, t, v);
          break;
        }
        this.debug("globstar swallow a segment, and continue"), c++;
      }
      return !!(r && (this.debug(`
>>> no match, partial?`, e, c, t, v), c === o));
    }
    var g;
    if (typeof l == "string" ? (g = u === l, this.debug("string match", l, u, g)) : (g = u.match(l), this.debug("pattern match", l, u, g)), !g)
      return !1;
  }
  if (i === o && s === d)
    return !0;
  if (i === o)
    return r;
  if (s === d)
    return i === o - 1 && e[i] === "";
  throw new Error("wtf?");
};
function z4(e) {
  return e.replace(/\\(.)/g, "$1");
}
function H4(e) {
  return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
}
var j1 = { exports: {} }, ip;
function K4() {
  return ip || (ip = 1, typeof Object.create == "function" ? j1.exports = function(t, r) {
    r && (t.super_ = r, t.prototype = Object.create(r.prototype, {
      constructor: {
        value: t,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }));
  } : j1.exports = function(t, r) {
    if (r) {
      t.super_ = r;
      var a = function() {
      };
      a.prototype = r.prototype, t.prototype = new a(), t.prototype.constructor = t;
    }
  }), j1.exports;
}
var Aa = { exports: {} }, np;
function ms() {
  if (np)
    return Aa.exports;
  np = 1;
  function e(r) {
    return r.charAt(0) === "/";
  }
  function t(r) {
    var a = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/, i = a.exec(r), s = i[1] || "", o = !!(s && s.charAt(1) !== ":");
    return !!(i[2] || o);
  }
  return Aa.exports = process.platform === "win32" ? t : e, Aa.exports.posix = e, Aa.exports.win32 = t, Aa.exports;
}
var dt = {}, sp;
function xd() {
  if (sp)
    return dt;
  sp = 1, dt.alphasort = o, dt.alphasorti = s, dt.setopts = u, dt.ownProp = e, dt.makeAbs = T, dt.finish = c, dt.mark = v, dt.isIgnored = g, dt.childrenIgnored = w;
  function e(f, b) {
    return Object.prototype.hasOwnProperty.call(f, b);
  }
  var t = ye, r = Si, a = ms(), i = r.Minimatch;
  function s(f, b) {
    return f.toLowerCase().localeCompare(b.toLowerCase());
  }
  function o(f, b) {
    return f.localeCompare(b);
  }
  function d(f, b) {
    f.ignore = b.ignore || [], Array.isArray(f.ignore) || (f.ignore = [f.ignore]), f.ignore.length && (f.ignore = f.ignore.map(l));
  }
  function l(f) {
    var b = null;
    if (f.slice(-3) === "/**") {
      var y = f.replace(/(\/\*\*)+$/, "");
      b = new i(y, { dot: !0 });
    }
    return {
      matcher: new i(f, { dot: !0 }),
      gmatcher: b
    };
  }
  function u(f, b, y) {
    if (y || (y = {}), y.matchBase && b.indexOf("/") === -1) {
      if (y.noglobstar)
        throw new Error("base matching requires globstar");
      b = "**/" + b;
    }
    f.silent = !!y.silent, f.pattern = b, f.strict = y.strict !== !1, f.realpath = !!y.realpath, f.realpathCache = y.realpathCache || /* @__PURE__ */ Object.create(null), f.follow = !!y.follow, f.dot = !!y.dot, f.mark = !!y.mark, f.nodir = !!y.nodir, f.nodir && (f.mark = !0), f.sync = !!y.sync, f.nounique = !!y.nounique, f.nonull = !!y.nonull, f.nosort = !!y.nosort, f.nocase = !!y.nocase, f.stat = !!y.stat, f.noprocess = !!y.noprocess, f.absolute = !!y.absolute, f.maxLength = y.maxLength || 1 / 0, f.cache = y.cache || /* @__PURE__ */ Object.create(null), f.statCache = y.statCache || /* @__PURE__ */ Object.create(null), f.symlinks = y.symlinks || /* @__PURE__ */ Object.create(null), d(f, y), f.changedCwd = !1;
    var k = process.cwd();
    e(y, "cwd") ? (f.cwd = t.resolve(y.cwd), f.changedCwd = f.cwd !== k) : f.cwd = k, f.root = y.root || t.resolve(f.cwd, "/"), f.root = t.resolve(f.root), process.platform === "win32" && (f.root = f.root.replace(/\\/g, "/")), f.cwdAbs = a(f.cwd) ? f.cwd : T(f, f.cwd), process.platform === "win32" && (f.cwdAbs = f.cwdAbs.replace(/\\/g, "/")), f.nomount = !!y.nomount, y.nonegate = !0, y.nocomment = !0, f.minimatch = new i(b, y), f.options = f.minimatch.options;
  }
  function c(f) {
    for (var b = f.nounique, y = b ? [] : /* @__PURE__ */ Object.create(null), k = 0, N = f.matches.length; k < N; k++) {
      var $ = f.matches[k];
      if (!$ || Object.keys($).length === 0) {
        if (f.nonull) {
          var O = f.minimatch.globSet[k];
          b ? y.push(O) : y[O] = !0;
        }
      } else {
        var P = Object.keys($);
        b ? y.push.apply(y, P) : P.forEach(function(C) {
          y[C] = !0;
        });
      }
    }
    if (b || (y = Object.keys(y)), f.nosort || (y = y.sort(f.nocase ? s : o)), f.mark) {
      for (var k = 0; k < y.length; k++)
        y[k] = f._mark(y[k]);
      f.nodir && (y = y.filter(function(C) {
        var A = !/\/$/.test(C), S = f.cache[C] || f.cache[T(f, C)];
        return A && S && (A = S !== "DIR" && !Array.isArray(S)), A;
      }));
    }
    f.ignore.length && (y = y.filter(function(C) {
      return !g(f, C);
    })), f.found = y;
  }
  function v(f, b) {
    var y = T(f, b), k = f.cache[y], N = b;
    if (k) {
      var $ = k === "DIR" || Array.isArray(k), O = b.slice(-1) === "/";
      if ($ && !O ? N += "/" : !$ && O && (N = N.slice(0, -1)), N !== b) {
        var P = T(f, N);
        f.statCache[P] = f.statCache[y], f.cache[P] = f.cache[y];
      }
    }
    return N;
  }
  function T(f, b) {
    var y = b;
    return b.charAt(0) === "/" ? y = t.join(f.root, b) : a(b) || b === "" ? y = b : f.changedCwd ? y = t.resolve(f.cwd, b) : y = t.resolve(b), process.platform === "win32" && (y = y.replace(/\\/g, "/")), y;
  }
  function g(f, b) {
    return f.ignore.length ? f.ignore.some(function(y) {
      return y.matcher.match(b) || !!(y.gmatcher && y.gmatcher.match(b));
    }) : !1;
  }
  function w(f, b) {
    return f.ignore.length ? f.ignore.some(function(y) {
      return !!(y.gmatcher && y.gmatcher.match(b));
    }) : !1;
  }
  return dt;
}
var En, op;
function Q4() {
  if (op)
    return En;
  op = 1, En = v, v.GlobSync = T;
  var e = Pe, t = Rd(), r = Si;
  r.Minimatch, Wd().Glob;
  var a = ye, i = Sr, s = ms(), o = xd();
  o.alphasort, o.alphasorti;
  var d = o.setopts, l = o.ownProp, u = o.childrenIgnored, c = o.isIgnored;
  function v(g, w) {
    if (typeof w == "function" || arguments.length === 3)
      throw new TypeError(`callback provided to sync glob
See: https://github.com/isaacs/node-glob/issues/167`);
    return new T(g, w).found;
  }
  function T(g, w) {
    if (!g)
      throw new Error("must provide pattern");
    if (typeof w == "function" || arguments.length === 3)
      throw new TypeError(`callback provided to sync glob
See: https://github.com/isaacs/node-glob/issues/167`);
    if (!(this instanceof T))
      return new T(g, w);
    if (d(this, g, w), this.noprocess)
      return this;
    var f = this.minimatch.set.length;
    this.matches = new Array(f);
    for (var b = 0; b < f; b++)
      this._process(this.minimatch.set[b], b, !1);
    this._finish();
  }
  return T.prototype._finish = function() {
    if (i(this instanceof T), this.realpath) {
      var g = this;
      this.matches.forEach(function(w, f) {
        var b = g.matches[f] = /* @__PURE__ */ Object.create(null);
        for (var y in w)
          try {
            y = g._makeAbs(y);
            var k = t.realpathSync(y, g.realpathCache);
            b[k] = !0;
          } catch (N) {
            if (N.syscall === "stat")
              b[g._makeAbs(y)] = !0;
            else
              throw N;
          }
      });
    }
    o.finish(this);
  }, T.prototype._process = function(g, w, f) {
    i(this instanceof T);
    for (var b = 0; typeof g[b] == "string"; )
      b++;
    var y;
    switch (b) {
      case g.length:
        this._processSimple(g.join("/"), w);
        return;
      case 0:
        y = null;
        break;
      default:
        y = g.slice(0, b).join("/");
        break;
    }
    var k = g.slice(b), N;
    y === null ? N = "." : ((s(y) || s(g.join("/"))) && (!y || !s(y)) && (y = "/" + y), N = y);
    var $ = this._makeAbs(N);
    if (!u(this, N)) {
      var O = k[0] === r.GLOBSTAR;
      O ? this._processGlobStar(y, N, $, k, w, f) : this._processReaddir(y, N, $, k, w, f);
    }
  }, T.prototype._processReaddir = function(g, w, f, b, y, k) {
    var N = this._readdir(f, k);
    if (N) {
      for (var $ = b[0], O = !!this.minimatch.negate, P = $._glob, C = this.dot || P.charAt(0) === ".", A = [], S = 0; S < N.length; S++) {
        var R = N[S];
        if (R.charAt(0) !== "." || C) {
          var U;
          O && !g ? U = !R.match($) : U = R.match($), U && A.push(R);
        }
      }
      var L = A.length;
      if (L !== 0) {
        if (b.length === 1 && !this.mark && !this.stat) {
          this.matches[y] || (this.matches[y] = /* @__PURE__ */ Object.create(null));
          for (var S = 0; S < L; S++) {
            var R = A[S];
            g && (g.slice(-1) !== "/" ? R = g + "/" + R : R = g + R), R.charAt(0) === "/" && !this.nomount && (R = a.join(this.root, R)), this._emitMatch(y, R);
          }
          return;
        }
        b.shift();
        for (var S = 0; S < L; S++) {
          var R = A[S], M;
          g ? M = [g, R] : M = [R], this._process(M.concat(b), y, k);
        }
      }
    }
  }, T.prototype._emitMatch = function(g, w) {
    if (!c(this, w)) {
      var f = this._makeAbs(w);
      if (this.mark && (w = this._mark(w)), this.absolute && (w = f), !this.matches[g][w]) {
        if (this.nodir) {
          var b = this.cache[f];
          if (b === "DIR" || Array.isArray(b))
            return;
        }
        this.matches[g][w] = !0, this.stat && this._stat(w);
      }
    }
  }, T.prototype._readdirInGlobStar = function(g) {
    if (this.follow)
      return this._readdir(g, !1);
    var w, f;
    try {
      f = e.lstatSync(g);
    } catch (y) {
      if (y.code === "ENOENT")
        return null;
    }
    var b = f && f.isSymbolicLink();
    return this.symlinks[g] = b, !b && f && !f.isDirectory() ? this.cache[g] = "FILE" : w = this._readdir(g, !1), w;
  }, T.prototype._readdir = function(g, w) {
    if (w && !l(this.symlinks, g))
      return this._readdirInGlobStar(g);
    if (l(this.cache, g)) {
      var f = this.cache[g];
      if (!f || f === "FILE")
        return null;
      if (Array.isArray(f))
        return f;
    }
    try {
      return this._readdirEntries(g, e.readdirSync(g));
    } catch (b) {
      return this._readdirError(g, b), null;
    }
  }, T.prototype._readdirEntries = function(g, w) {
    if (!this.mark && !this.stat)
      for (var f = 0; f < w.length; f++) {
        var b = w[f];
        g === "/" ? b = g + b : b = g + "/" + b, this.cache[b] = !0;
      }
    return this.cache[g] = w, w;
  }, T.prototype._readdirError = function(g, w) {
    switch (w.code) {
      case "ENOTSUP":
      case "ENOTDIR":
        var f = this._makeAbs(g);
        if (this.cache[f] = "FILE", f === this.cwdAbs) {
          var b = new Error(w.code + " invalid cwd " + this.cwd);
          throw b.path = this.cwd, b.code = w.code, b;
        }
        break;
      case "ENOENT":
      case "ELOOP":
      case "ENAMETOOLONG":
      case "UNKNOWN":
        this.cache[this._makeAbs(g)] = !1;
        break;
      default:
        if (this.cache[this._makeAbs(g)] = !1, this.strict)
          throw w;
        this.silent || console.error("glob error", w);
        break;
    }
  }, T.prototype._processGlobStar = function(g, w, f, b, y, k) {
    var N = this._readdir(f, k);
    if (N) {
      var $ = b.slice(1), O = g ? [g] : [], P = O.concat($);
      this._process(P, y, !1);
      var C = N.length, A = this.symlinks[f];
      if (!(A && k))
        for (var S = 0; S < C; S++) {
          var R = N[S];
          if (!(R.charAt(0) === "." && !this.dot)) {
            var U = O.concat(N[S], $);
            this._process(U, y, !0);
            var L = O.concat(N[S], b);
            this._process(L, y, !0);
          }
        }
    }
  }, T.prototype._processSimple = function(g, w) {
    var f = this._stat(g);
    if (this.matches[w] || (this.matches[w] = /* @__PURE__ */ Object.create(null)), !!f) {
      if (g && s(g) && !this.nomount) {
        var b = /[\/\\]$/.test(g);
        g.charAt(0) === "/" ? g = a.join(this.root, g) : (g = a.resolve(this.root, g), b && (g += "/"));
      }
      process.platform === "win32" && (g = g.replace(/\\/g, "/")), this._emitMatch(w, g);
    }
  }, T.prototype._stat = function(g) {
    var w = this._makeAbs(g), f = g.slice(-1) === "/";
    if (g.length > this.maxLength)
      return !1;
    if (!this.stat && l(this.cache, w)) {
      var k = this.cache[w];
      if (Array.isArray(k) && (k = "DIR"), !f || k === "DIR")
        return k;
      if (f && k === "FILE")
        return !1;
    }
    var b = this.statCache[w];
    if (!b) {
      var y;
      try {
        y = e.lstatSync(w);
      } catch (N) {
        if (N && (N.code === "ENOENT" || N.code === "ENOTDIR"))
          return this.statCache[w] = !1, !1;
      }
      if (y && y.isSymbolicLink())
        try {
          b = e.statSync(w);
        } catch {
          b = y;
        }
      else
        b = y;
    }
    this.statCache[w] = b;
    var k = !0;
    return b && (k = b.isDirectory() ? "DIR" : "FILE"), this.cache[w] = this.cache[w] || k, f && k === "FILE" ? !1 : k;
  }, T.prototype._mark = function(g) {
    return o.mark(this, g);
  }, T.prototype._makeAbs = function(g) {
    return o.makeAbs(this, g);
  }, En;
}
var Vd = Ld;
function Ld(e, t) {
  if (e && t)
    return Ld(e)(t);
  if (typeof e != "function")
    throw new TypeError("need wrapper function");
  return Object.keys(e).forEach(function(a) {
    r[a] = e[a];
  }), r;
  function r() {
    for (var a = new Array(arguments.length), i = 0; i < a.length; i++)
      a[i] = arguments[i];
    var s = e.apply(this, a), o = a[a.length - 1];
    return typeof s == "function" && s !== o && Object.keys(o).forEach(function(d) {
      s[d] = o[d];
    }), s;
  }
}
var cs = { exports: {} }, jd = Vd;
cs.exports = jd(X1);
cs.exports.strict = jd(Md);
X1.proto = X1(function() {
  Object.defineProperty(Function.prototype, "once", {
    value: function() {
      return X1(this);
    },
    configurable: !0
  }), Object.defineProperty(Function.prototype, "onceStrict", {
    value: function() {
      return Md(this);
    },
    configurable: !0
  });
});
function X1(e) {
  var t = function() {
    return t.called ? t.value : (t.called = !0, t.value = e.apply(this, arguments));
  };
  return t.called = !1, t;
}
function Md(e) {
  var t = function() {
    if (t.called)
      throw new Error(t.onceError);
    return t.called = !0, t.value = e.apply(this, arguments);
  }, r = e.name || "Function wrapped with `once`";
  return t.onceError = r + " shouldn't be called more than once", t.called = !1, t;
}
var fs = cs.exports;
const qd = /* @__PURE__ */ nd(fs);
var Tn, pp;
function Y4() {
  if (pp)
    return Tn;
  pp = 1;
  var e = Vd, t = /* @__PURE__ */ Object.create(null), r = fs;
  Tn = e(a);
  function a(o, d) {
    return t[o] ? (t[o].push(d), null) : (t[o] = [d], i(o));
  }
  function i(o) {
    return r(function d() {
      var l = t[o], u = l.length, c = s(arguments);
      try {
        for (var v = 0; v < u; v++)
          l[v].apply(null, c);
      } finally {
        l.length > u ? (l.splice(0, u), process.nextTick(function() {
          d.apply(null, c);
        })) : delete t[o];
      }
    });
  }
  function s(o) {
    for (var d = o.length, l = [], u = 0; u < d; u++)
      l[u] = o[u];
    return l;
  }
  return Tn;
}
var Sn, dp;
function Wd() {
  if (dp)
    return Sn;
  dp = 1, Sn = b;
  var e = Pe, t = Rd(), r = Si;
  r.Minimatch;
  var a = K4(), i = ns.EventEmitter, s = ye, o = Sr, d = ms(), l = Q4(), u = xd();
  u.alphasort, u.alphasorti;
  var c = u.setopts, v = u.ownProp, T = Y4(), g = u.childrenIgnored, w = u.isIgnored, f = fs;
  function b(O, P, C) {
    if (typeof P == "function" && (C = P, P = {}), P || (P = {}), P.sync) {
      if (C)
        throw new TypeError("callback provided to sync glob");
      return l(O, P);
    }
    return new N(O, P, C);
  }
  b.sync = l;
  var y = b.GlobSync = l.GlobSync;
  b.glob = b;
  function k(O, P) {
    if (P === null || typeof P != "object")
      return O;
    for (var C = Object.keys(P), A = C.length; A--; )
      O[C[A]] = P[C[A]];
    return O;
  }
  b.hasMagic = function(O, P) {
    var C = k({}, P);
    C.noprocess = !0;
    var A = new N(O, C), S = A.minimatch.set;
    if (!O)
      return !1;
    if (S.length > 1)
      return !0;
    for (var R = 0; R < S[0].length; R++)
      if (typeof S[0][R] != "string")
        return !0;
    return !1;
  }, b.Glob = N, a(N, i);
  function N(O, P, C) {
    if (typeof P == "function" && (C = P, P = null), P && P.sync) {
      if (C)
        throw new TypeError("callback provided to sync glob");
      return new y(O, P);
    }
    if (!(this instanceof N))
      return new N(O, P, C);
    c(this, O, P), this._didRealPath = !1;
    var A = this.minimatch.set.length;
    this.matches = new Array(A), typeof C == "function" && (C = f(C), this.on("error", C), this.on("end", function(M) {
      C(null, M);
    }));
    var S = this;
    if (this._processing = 0, this._emitQueue = [], this._processQueue = [], this.paused = !1, this.noprocess)
      return this;
    if (A === 0)
      return L();
    for (var R = !0, U = 0; U < A; U++)
      this._process(this.minimatch.set[U], U, !1, L);
    R = !1;
    function L() {
      --S._processing, S._processing <= 0 && (R ? process.nextTick(function() {
        S._finish();
      }) : S._finish());
    }
  }
  N.prototype._finish = function() {
    if (o(this instanceof N), !this.aborted) {
      if (this.realpath && !this._didRealpath)
        return this._realpath();
      u.finish(this), this.emit("end", this.found);
    }
  }, N.prototype._realpath = function() {
    if (this._didRealpath)
      return;
    this._didRealpath = !0;
    var O = this.matches.length;
    if (O === 0)
      return this._finish();
    for (var P = this, C = 0; C < this.matches.length; C++)
      this._realpathSet(C, A);
    function A() {
      --O === 0 && P._finish();
    }
  }, N.prototype._realpathSet = function(O, P) {
    var C = this.matches[O];
    if (!C)
      return P();
    var A = Object.keys(C), S = this, R = A.length;
    if (R === 0)
      return P();
    var U = this.matches[O] = /* @__PURE__ */ Object.create(null);
    A.forEach(function(L, M) {
      L = S._makeAbs(L), t.realpath(L, S.realpathCache, function(J, X) {
        J ? J.syscall === "stat" ? U[L] = !0 : S.emit("error", J) : U[X] = !0, --R === 0 && (S.matches[O] = U, P());
      });
    });
  }, N.prototype._mark = function(O) {
    return u.mark(this, O);
  }, N.prototype._makeAbs = function(O) {
    return u.makeAbs(this, O);
  }, N.prototype.abort = function() {
    this.aborted = !0, this.emit("abort");
  }, N.prototype.pause = function() {
    this.paused || (this.paused = !0, this.emit("pause"));
  }, N.prototype.resume = function() {
    if (this.paused) {
      if (this.emit("resume"), this.paused = !1, this._emitQueue.length) {
        var O = this._emitQueue.slice(0);
        this._emitQueue.length = 0;
        for (var P = 0; P < O.length; P++) {
          var C = O[P];
          this._emitMatch(C[0], C[1]);
        }
      }
      if (this._processQueue.length) {
        var A = this._processQueue.slice(0);
        this._processQueue.length = 0;
        for (var P = 0; P < A.length; P++) {
          var S = A[P];
          this._processing--, this._process(S[0], S[1], S[2], S[3]);
        }
      }
    }
  }, N.prototype._process = function(O, P, C, A) {
    if (o(this instanceof N), o(typeof A == "function"), !this.aborted) {
      if (this._processing++, this.paused) {
        this._processQueue.push([O, P, C, A]);
        return;
      }
      for (var S = 0; typeof O[S] == "string"; )
        S++;
      var R;
      switch (S) {
        case O.length:
          this._processSimple(O.join("/"), P, A);
          return;
        case 0:
          R = null;
          break;
        default:
          R = O.slice(0, S).join("/");
          break;
      }
      var U = O.slice(S), L;
      R === null ? L = "." : ((d(R) || d(O.join("/"))) && (!R || !d(R)) && (R = "/" + R), L = R);
      var M = this._makeAbs(L);
      if (g(this, L))
        return A();
      var J = U[0] === r.GLOBSTAR;
      J ? this._processGlobStar(R, L, M, U, P, C, A) : this._processReaddir(R, L, M, U, P, C, A);
    }
  }, N.prototype._processReaddir = function(O, P, C, A, S, R, U) {
    var L = this;
    this._readdir(C, R, function(M, J) {
      return L._processReaddir2(O, P, C, A, S, R, J, U);
    });
  }, N.prototype._processReaddir2 = function(O, P, C, A, S, R, U, L) {
    if (!U)
      return L();
    for (var M = A[0], J = !!this.minimatch.negate, X = M._glob, Y = this.dot || X.charAt(0) === ".", ne = [], ee = 0; ee < U.length; ee++) {
      var H = U[ee];
      if (H.charAt(0) !== "." || Y) {
        var j;
        J && !O ? j = !H.match(M) : j = H.match(M), j && ne.push(H);
      }
    }
    var K = ne.length;
    if (K === 0)
      return L();
    if (A.length === 1 && !this.mark && !this.stat) {
      this.matches[S] || (this.matches[S] = /* @__PURE__ */ Object.create(null));
      for (var ee = 0; ee < K; ee++) {
        var H = ne[ee];
        O && (O !== "/" ? H = O + "/" + H : H = O + H), H.charAt(0) === "/" && !this.nomount && (H = s.join(this.root, H)), this._emitMatch(S, H);
      }
      return L();
    }
    A.shift();
    for (var ee = 0; ee < K; ee++) {
      var H = ne[ee];
      O && (O !== "/" ? H = O + "/" + H : H = O + H), this._process([H].concat(A), S, R, L);
    }
    L();
  }, N.prototype._emitMatch = function(O, P) {
    if (!this.aborted && !w(this, P)) {
      if (this.paused) {
        this._emitQueue.push([O, P]);
        return;
      }
      var C = d(P) ? P : this._makeAbs(P);
      if (this.mark && (P = this._mark(P)), this.absolute && (P = C), !this.matches[O][P]) {
        if (this.nodir) {
          var A = this.cache[C];
          if (A === "DIR" || Array.isArray(A))
            return;
        }
        this.matches[O][P] = !0;
        var S = this.statCache[C];
        S && this.emit("stat", P, S), this.emit("match", P);
      }
    }
  }, N.prototype._readdirInGlobStar = function(O, P) {
    if (this.aborted)
      return;
    if (this.follow)
      return this._readdir(O, !1, P);
    var C = "lstat\0" + O, A = this, S = T(C, R);
    S && e.lstat(O, S);
    function R(U, L) {
      if (U && U.code === "ENOENT")
        return P();
      var M = L && L.isSymbolicLink();
      A.symlinks[O] = M, !M && L && !L.isDirectory() ? (A.cache[O] = "FILE", P()) : A._readdir(O, !1, P);
    }
  }, N.prototype._readdir = function(O, P, C) {
    if (!this.aborted && (C = T("readdir\0" + O + "\0" + P, C), !!C)) {
      if (P && !v(this.symlinks, O))
        return this._readdirInGlobStar(O, C);
      if (v(this.cache, O)) {
        var A = this.cache[O];
        if (!A || A === "FILE")
          return C();
        if (Array.isArray(A))
          return C(null, A);
      }
      e.readdir(O, $(this, O, C));
    }
  };
  function $(O, P, C) {
    return function(A, S) {
      A ? O._readdirError(P, A, C) : O._readdirEntries(P, S, C);
    };
  }
  return N.prototype._readdirEntries = function(O, P, C) {
    if (!this.aborted) {
      if (!this.mark && !this.stat)
        for (var A = 0; A < P.length; A++) {
          var S = P[A];
          O === "/" ? S = O + S : S = O + "/" + S, this.cache[S] = !0;
        }
      return this.cache[O] = P, C(null, P);
    }
  }, N.prototype._readdirError = function(O, P, C) {
    if (!this.aborted) {
      switch (P.code) {
        case "ENOTSUP":
        case "ENOTDIR":
          var A = this._makeAbs(O);
          if (this.cache[A] = "FILE", A === this.cwdAbs) {
            var S = new Error(P.code + " invalid cwd " + this.cwd);
            S.path = this.cwd, S.code = P.code, this.emit("error", S), this.abort();
          }
          break;
        case "ENOENT":
        case "ELOOP":
        case "ENAMETOOLONG":
        case "UNKNOWN":
          this.cache[this._makeAbs(O)] = !1;
          break;
        default:
          this.cache[this._makeAbs(O)] = !1, this.strict && (this.emit("error", P), this.abort()), this.silent || console.error("glob error", P);
          break;
      }
      return C();
    }
  }, N.prototype._processGlobStar = function(O, P, C, A, S, R, U) {
    var L = this;
    this._readdir(C, R, function(M, J) {
      L._processGlobStar2(O, P, C, A, S, R, J, U);
    });
  }, N.prototype._processGlobStar2 = function(O, P, C, A, S, R, U, L) {
    if (!U)
      return L();
    var M = A.slice(1), J = O ? [O] : [], X = J.concat(M);
    this._process(X, S, !1, L);
    var Y = this.symlinks[C], ne = U.length;
    if (Y && R)
      return L();
    for (var ee = 0; ee < ne; ee++) {
      var H = U[ee];
      if (!(H.charAt(0) === "." && !this.dot)) {
        var j = J.concat(U[ee], M);
        this._process(j, S, !0, L);
        var K = J.concat(U[ee], A);
        this._process(K, S, !0, L);
      }
    }
    L();
  }, N.prototype._processSimple = function(O, P, C) {
    var A = this;
    this._stat(O, function(S, R) {
      A._processSimple2(O, P, S, R, C);
    });
  }, N.prototype._processSimple2 = function(O, P, C, A, S) {
    if (this.matches[P] || (this.matches[P] = /* @__PURE__ */ Object.create(null)), !A)
      return S();
    if (O && d(O) && !this.nomount) {
      var R = /[\/\\]$/.test(O);
      O.charAt(0) === "/" ? O = s.join(this.root, O) : (O = s.resolve(this.root, O), R && (O += "/"));
    }
    process.platform === "win32" && (O = O.replace(/\\/g, "/")), this._emitMatch(P, O), S();
  }, N.prototype._stat = function(O, P) {
    var C = this._makeAbs(O), A = O.slice(-1) === "/";
    if (O.length > this.maxLength)
      return P();
    if (!this.stat && v(this.cache, C)) {
      var S = this.cache[C];
      if (Array.isArray(S) && (S = "DIR"), !A || S === "DIR")
        return P(null, S);
      if (A && S === "FILE")
        return P();
    }
    var R = this.statCache[C];
    if (R !== void 0) {
      if (R === !1)
        return P(null, R);
      var U = R.isDirectory() ? "DIR" : "FILE";
      return A && U === "FILE" ? P() : P(null, U, R);
    }
    var L = this, M = T("stat\0" + C, J);
    M && e.lstat(C, M);
    function J(X, Y) {
      if (Y && Y.isSymbolicLink())
        return e.stat(C, function(ne, ee) {
          ne ? L._stat2(O, C, null, Y, P) : L._stat2(O, C, ne, ee, P);
        });
      L._stat2(O, C, X, Y, P);
    }
  }, N.prototype._stat2 = function(O, P, C, A, S) {
    if (C && (C.code === "ENOENT" || C.code === "ENOTDIR"))
      return this.statCache[P] = !1, S();
    var R = O.slice(-1) === "/";
    if (this.statCache[P] = A, P.slice(-1) === "/" && A && !A.isDirectory())
      return S(null, !1, A);
    var U = !0;
    return A && (U = A.isDirectory() ? "DIR" : "FILE"), this.cache[P] = this.cache[P] || U, R && U === "FILE" ? S() : S(null, U, A);
  }, Sn;
}
const fe = Sr, zd = ye, lp = Pe;
let Yr;
try {
  Yr = Wd();
} catch {
}
const J4 = {
  nosort: !0,
  silent: !0
};
let An = 0;
const Va = process.platform === "win32", Hd = (e) => {
  if ([
    "unlink",
    "chmod",
    "stat",
    "lstat",
    "rmdir",
    "readdir"
  ].forEach((r) => {
    e[r] = e[r] || lp[r], r = r + "Sync", e[r] = e[r] || lp[r];
  }), e.maxBusyTries = e.maxBusyTries || 3, e.emfileWait = e.emfileWait || 1e3, e.glob === !1 && (e.disableGlob = !0), e.disableGlob !== !0 && Yr === void 0)
    throw Error("glob dependency not found, set `options.disableGlob = true` if intentional");
  e.disableGlob = e.disableGlob || !1, e.glob = e.glob || J4;
}, hs = (e, t, r) => {
  typeof t == "function" && (r = t, t = {}), fe(e, "rimraf: missing path"), fe.equal(typeof e, "string", "rimraf: path should be a string"), fe.equal(typeof r, "function", "rimraf: callback function required"), fe(t, "rimraf: invalid options argument provided"), fe.equal(typeof t, "object", "rimraf: options should be object"), Hd(t);
  let a = 0, i = null, s = 0;
  const o = (l) => {
    i = i || l, --s === 0 && r(i);
  }, d = (l, u) => {
    if (l)
      return r(l);
    if (s = u.length, s === 0)
      return r();
    u.forEach((c) => {
      const v = (T) => {
        if (T) {
          if ((T.code === "EBUSY" || T.code === "ENOTEMPTY" || T.code === "EPERM") && a < t.maxBusyTries)
            return a++, setTimeout(() => Cn(c, t, v), a * 100);
          if (T.code === "EMFILE" && An < t.emfileWait)
            return setTimeout(() => Cn(c, t, v), An++);
          T.code === "ENOENT" && (T = null);
        }
        An = 0, o(T);
      };
      Cn(c, t, v);
    });
  };
  if (t.disableGlob || !Yr.hasMagic(e))
    return d(null, [e]);
  t.lstat(e, (l, u) => {
    if (!l)
      return d(null, [e]);
    Yr(e, t.glob, d);
  });
}, Cn = (e, t, r) => {
  fe(e), fe(t), fe(typeof r == "function"), t.lstat(e, (a, i) => {
    if (a && a.code === "ENOENT")
      return r(null);
    if (a && a.code === "EPERM" && Va && up(e, t, a, r), i && i.isDirectory())
      return ei(e, t, a, r);
    t.unlink(e, (s) => {
      if (s) {
        if (s.code === "ENOENT")
          return r(null);
        if (s.code === "EPERM")
          return Va ? up(e, t, s, r) : ei(e, t, s, r);
        if (s.code === "EISDIR")
          return ei(e, t, s, r);
      }
      return r(s);
    });
  });
}, up = (e, t, r, a) => {
  fe(e), fe(t), fe(typeof a == "function"), t.chmod(e, 438, (i) => {
    i ? a(i.code === "ENOENT" ? null : r) : t.stat(e, (s, o) => {
      s ? a(s.code === "ENOENT" ? null : r) : o.isDirectory() ? ei(e, t, r, a) : t.unlink(e, a);
    });
  });
}, mp = (e, t, r) => {
  fe(e), fe(t);
  try {
    t.chmodSync(e, 438);
  } catch (i) {
    if (i.code === "ENOENT")
      return;
    throw r;
  }
  let a;
  try {
    a = t.statSync(e);
  } catch (i) {
    if (i.code === "ENOENT")
      return;
    throw r;
  }
  a.isDirectory() ? ti(e, t, r) : t.unlinkSync(e);
}, ei = (e, t, r, a) => {
  fe(e), fe(t), fe(typeof a == "function"), t.rmdir(e, (i) => {
    i && (i.code === "ENOTEMPTY" || i.code === "EEXIST" || i.code === "EPERM") ? Z4(e, t, a) : i && i.code === "ENOTDIR" ? a(r) : a(i);
  });
}, Z4 = (e, t, r) => {
  fe(e), fe(t), fe(typeof r == "function"), t.readdir(e, (a, i) => {
    if (a)
      return r(a);
    let s = i.length;
    if (s === 0)
      return t.rmdir(e, r);
    let o;
    i.forEach((d) => {
      hs(zd.join(e, d), t, (l) => {
        if (!o) {
          if (l)
            return r(o = l);
          --s === 0 && t.rmdir(e, r);
        }
      });
    });
  });
}, Kd = (e, t) => {
  t = t || {}, Hd(t), fe(e, "rimraf: missing path"), fe.equal(typeof e, "string", "rimraf: path should be a string"), fe(t, "rimraf: missing options"), fe.equal(typeof t, "object", "rimraf: options should be object");
  let r;
  if (t.disableGlob || !Yr.hasMagic(e))
    r = [e];
  else
    try {
      t.lstatSync(e), r = [e];
    } catch {
      r = Yr.sync(e, t.glob);
    }
  if (r.length)
    for (let a = 0; a < r.length; a++) {
      const i = r[a];
      let s;
      try {
        s = t.lstatSync(i);
      } catch (o) {
        if (o.code === "ENOENT")
          return;
        o.code === "EPERM" && Va && mp(i, t, o);
      }
      try {
        s && s.isDirectory() ? ti(i, t, null) : t.unlinkSync(i);
      } catch (o) {
        if (o.code === "ENOENT")
          return;
        if (o.code === "EPERM")
          return Va ? mp(i, t, o) : ti(i, t, o);
        if (o.code !== "EISDIR")
          throw o;
        ti(i, t, o);
      }
    }
}, ti = (e, t, r) => {
  fe(e), fe(t);
  try {
    t.rmdirSync(e);
  } catch (a) {
    if (a.code === "ENOENT")
      return;
    if (a.code === "ENOTDIR")
      throw r;
    (a.code === "ENOTEMPTY" || a.code === "EEXIST" || a.code === "EPERM") && X4(e, t);
  }
}, X4 = (e, t) => {
  fe(e), fe(t), t.readdirSync(e).forEach((i) => Kd(zd.join(e, i), t));
  const r = Va ? 100 : 1;
  let a = 0;
  do {
    let i = !0;
    try {
      const s = t.rmdirSync(e, t);
      return i = !1, s;
    } finally {
      if (++a < r && i)
        continue;
    }
  } while (!0);
};
var eu = hs;
hs.sync = Kd;
/*!
 * Tmp
 *
 * Copyright (c) 2011-2017 KARASZI Istvan <github@spam.raszi.hu>
 *
 * MIT Licensed
 */
(function(e) {
  const t = Pe, r = ar, a = ye, i = as, s = { fs: t.constants, os: r.constants }, o = eu, d = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", l = /XXXXXX/, u = 3, c = (s.O_CREAT || s.fs.O_CREAT) | (s.O_EXCL || s.fs.O_EXCL) | (s.O_RDWR || s.fs.O_RDWR), v = r.platform() === "win32", T = s.EBADF || s.os.errno.EBADF, g = s.ENOENT || s.os.errno.ENOENT, w = 448, f = 384, b = "exit", y = [], k = t.rmdirSync.bind(t), N = o.sync;
  let $ = !1;
  function O(F, W) {
    const h = j(F, W), _ = h[0], I = h[1];
    try {
      re(_);
    } catch (q) {
      return I(q);
    }
    let x = _.tries;
    (function q() {
      try {
        const Q = K(_);
        t.stat(Q, function(pe) {
          if (!pe)
            return x-- > 0 ? q() : I(new Error("Could not get a unique tmp filename, max tries reached " + Q));
          I(null, Q);
        });
      } catch (Q) {
        I(Q);
      }
    })();
  }
  function P(F) {
    const W = j(F), h = W[0];
    re(h);
    let _ = h.tries;
    do {
      const I = K(h);
      try {
        t.statSync(I);
      } catch {
        return I;
      }
    } while (_-- > 0);
    throw new Error("Could not get a unique tmp filename, max tries reached");
  }
  function C(F, W) {
    const h = j(F, W), _ = h[0], I = h[1];
    O(_, function(q, Q) {
      if (q)
        return I(q);
      t.open(Q, c, _.mode || f, function(Ce, Ee) {
        if (Ce)
          return I(Ce);
        if (_.discardDescriptor)
          return t.close(Ee, function(n1) {
            return I(n1, Q, void 0, M(Q, -1, _, !1));
          });
        {
          const ft = _.discardDescriptor || _.detachDescriptor;
          I(null, Q, Ee, M(Q, ft ? -1 : Ee, _, !1));
        }
      });
    });
  }
  function A(F) {
    const W = j(F), h = W[0], _ = h.discardDescriptor || h.detachDescriptor, I = P(h);
    var x = t.openSync(I, c, h.mode || f);
    return h.discardDescriptor && (t.closeSync(x), x = void 0), {
      name: I,
      fd: x,
      removeCallback: M(I, _ ? -1 : x, h, !0)
    };
  }
  function S(F, W) {
    const h = j(F, W), _ = h[0], I = h[1];
    O(_, function(q, Q) {
      if (q)
        return I(q);
      t.mkdir(Q, _.mode || w, function(Ce) {
        if (Ce)
          return I(Ce);
        I(null, Q, J(Q, _, !1));
      });
    });
  }
  function R(F) {
    const W = j(F), h = W[0], _ = P(h);
    return t.mkdirSync(_, h.mode || w), {
      name: _,
      removeCallback: J(_, h, !0)
    };
  }
  function U(F, W) {
    const h = function(_) {
      if (_ && !Tt(_))
        return W(_);
      W();
    };
    0 <= F[0] ? t.close(F[0], function() {
      t.unlink(F[1], h);
    }) : t.unlink(F[1], h);
  }
  function L(F) {
    let W = null;
    try {
      0 <= F[0] && t.closeSync(F[0]);
    } catch (h) {
      if (!it(h) && !Tt(h))
        throw h;
    } finally {
      try {
        t.unlinkSync(F[1]);
      } catch (h) {
        Tt(h) || (W = h);
      }
    }
    if (W !== null)
      throw W;
  }
  function M(F, W, h, _) {
    const I = X(L, [W, F], _), x = X(U, [W, F], _, I);
    return h.keep || y.unshift(I), _ ? I : x;
  }
  function J(F, W, h) {
    const _ = W.unsafeCleanup ? o : t.rmdir.bind(t), I = W.unsafeCleanup ? N : k, x = X(I, F, h), q = X(_, F, h, x);
    return W.keep || y.unshift(x), h ? x : q;
  }
  function X(F, W, h, _) {
    let I = !1;
    return function x(q) {
      if (!I) {
        const Q = _ || x, pe = y.indexOf(Q);
        return pe >= 0 && y.splice(pe, 1), I = !0, h || F === k || F === N ? F(W) : F(W, q || function() {
        });
      }
    };
  }
  function Y() {
    if ($)
      for (; y.length; )
        try {
          y[0]();
        } catch {
        }
  }
  function ne(F) {
    let W = [], h = null;
    try {
      h = i.randomBytes(F);
    } catch {
      h = i.pseudoRandomBytes(F);
    }
    for (var _ = 0; _ < F; _++)
      W.push(d[h[_] % d.length]);
    return W.join("");
  }
  function ee(F) {
    return F === null || H(F) || !F.trim();
  }
  function H(F) {
    return typeof F > "u";
  }
  function j(F, W) {
    if (typeof F == "function")
      return [{}, F];
    if (H(F))
      return [{}, W];
    const h = {};
    for (const _ of Object.getOwnPropertyNames(F))
      h[_] = F[_];
    return [h, W];
  }
  function K(F) {
    const W = F.tmpdir;
    if (!H(F.name))
      return a.join(W, F.dir, F.name);
    if (!H(F.template))
      return a.join(W, F.dir, F.template).replace(l, ne(6));
    const h = [
      F.prefix ? F.prefix : "tmp",
      "-",
      process.pid,
      "-",
      ne(12),
      F.postfix ? "-" + F.postfix : ""
    ].join("");
    return a.join(W, F.dir, h);
  }
  function re(F) {
    F.tmpdir = qe(F);
    const W = F.tmpdir;
    if (H(F.name) || Ve(F.name, "name", W), H(F.dir) || Ve(F.dir, "dir", W), !H(F.template) && (Ve(F.template, "template", W), !F.template.match(l)))
      throw new Error(`Invalid template, found "${F.template}".`);
    if (!H(F.tries) && isNaN(F.tries) || F.tries < 0)
      throw new Error(`Invalid tries, found "${F.tries}".`);
    F.tries = H(F.name) ? F.tries || u : 1, F.keep = !!F.keep, F.detachDescriptor = !!F.detachDescriptor, F.discardDescriptor = !!F.discardDescriptor, F.unsafeCleanup = !!F.unsafeCleanup, F.dir = H(F.dir) ? "" : a.relative(W, me(F.dir, W)), F.template = H(F.template) ? void 0 : a.relative(W, me(F.template, W)), F.template = ee(F.template) ? void 0 : a.relative(F.dir, F.template), F.name = H(F.name) ? void 0 : Me(F.name), F.prefix = H(F.prefix) ? "" : F.prefix, F.postfix = H(F.postfix) ? "" : F.postfix;
  }
  function me(F, W) {
    const h = Me(F);
    return h.startsWith(W) ? a.resolve(h) : a.resolve(a.join(W, h));
  }
  function Me(F) {
    return ee(F) ? F : F.replace(/["']/g, "");
  }
  function Ve(F, W, h) {
    if (W === "name") {
      if (a.isAbsolute(F))
        throw new Error(`${W} option must not contain an absolute path, found "${F}".`);
      let _ = a.basename(F);
      if (_ === ".." || _ === "." || _ !== F)
        throw new Error(`${W} option must not contain a path, found "${F}".`);
    } else {
      if (a.isAbsolute(F) && !F.startsWith(h))
        throw new Error(`${W} option must be relative to "${h}", found "${F}".`);
      let _ = me(F, h);
      if (!_.startsWith(h))
        throw new Error(`${W} option must be relative to "${h}", found "${_}".`);
    }
  }
  function it(F) {
    return Be(F, -T, "EBADF");
  }
  function Tt(F) {
    return Be(F, -g, "ENOENT");
  }
  function Be(F, W, h) {
    return v ? F.code === h : F.code === h && F.errno === W;
  }
  function ae() {
    $ = !0;
  }
  function qe(F) {
    return a.resolve(Me(F && F.tmpdir || r.tmpdir()));
  }
  process.addListener(b, Y), Object.defineProperty(e.exports, "tmpdir", {
    enumerable: !0,
    configurable: !1,
    get: function() {
      return qe();
    }
  }), e.exports.dir = S, e.exports.dirSync = R, e.exports.file = C, e.exports.fileSync = A, e.exports.tmpName = O, e.exports.tmpNameSync = P, e.exports.setGracefulCleanup = ae;
})(Dd);
var tu = Dd.exports;
(function(e) {
  const { promisify: t } = Qa, r = tu;
  e.exports.fileSync = r.fileSync;
  const a = t(
    (s, o) => r.file(
      s,
      (d, l, u, c) => d ? o(d) : o(void 0, { path: l, fd: u, cleanup: t(c) })
    )
  );
  e.exports.file = async (s) => a(s), e.exports.withFile = async function(o, d) {
    const { path: l, fd: u, cleanup: c } = await e.exports.file(d);
    try {
      return await o({ path: l, fd: u });
    } finally {
      await c();
    }
  }, e.exports.dirSync = r.dirSync;
  const i = t(
    (s, o) => r.dir(
      s,
      (d, l, u) => d ? o(d) : o(void 0, { path: l, cleanup: t(u) })
    )
  );
  e.exports.dir = async (s) => i(s), e.exports.withDir = async function(o, d) {
    const { path: l, cleanup: u } = await e.exports.dir(d);
    try {
      return await o({ path: l });
    } finally {
      await u();
    }
  }, e.exports.tmpNameSync = r.tmpNameSync, e.exports.tmpName = t(r.tmpName), e.exports.tmpdir = r.tmpdir, e.exports.setGracefulCleanup = r.setGracefulCleanup;
})(Cd);
var ru = Cd.exports, te = {}, ce = {};
Object.defineProperty(ce, "__esModule", { value: !0 });
ce.getRetentionDays = ce.getWorkSpaceDirectory = ce.getWorkFlowRunId = ce.getRuntimeUrl = ce.getRuntimeToken = ce.getDownloadFileConcurrency = ce.getInitialRetryIntervalInMilliseconds = ce.getRetryMultiplier = ce.getRetryLimit = ce.getUploadChunkSize = ce.getUploadFileConcurrency = void 0;
function au() {
  return 2;
}
ce.getUploadFileConcurrency = au;
function iu() {
  return 8 * 1024 * 1024;
}
ce.getUploadChunkSize = iu;
function nu() {
  return 5;
}
ce.getRetryLimit = nu;
function su() {
  return 1.5;
}
ce.getRetryMultiplier = su;
function ou() {
  return 3e3;
}
ce.getInitialRetryIntervalInMilliseconds = ou;
function pu() {
  return 2;
}
ce.getDownloadFileConcurrency = pu;
function du() {
  const e = process.env.ACTIONS_RUNTIME_TOKEN;
  if (!e)
    throw new Error("Unable to get ACTIONS_RUNTIME_TOKEN env variable");
  return e;
}
ce.getRuntimeToken = du;
function lu() {
  const e = process.env.ACTIONS_RUNTIME_URL;
  if (!e)
    throw new Error("Unable to get ACTIONS_RUNTIME_URL env variable");
  return e;
}
ce.getRuntimeUrl = lu;
function uu() {
  const e = process.env.GITHUB_RUN_ID;
  if (!e)
    throw new Error("Unable to get GITHUB_RUN_ID env variable");
  return e;
}
ce.getWorkFlowRunId = uu;
function mu() {
  const e = process.env.GITHUB_WORKSPACE;
  if (!e)
    throw new Error("Unable to get GITHUB_WORKSPACE env variable");
  return e;
}
ce.getWorkSpaceDirectory = mu;
function cu() {
  return process.env.GITHUB_RETENTION_DAYS;
}
ce.getRetentionDays = cu;
var gs = {};
Object.defineProperty(gs, "__esModule", { value: !0 });
const fu = [
  BigInt("0x0000000000000000"),
  BigInt("0x7F6EF0C830358979"),
  BigInt("0xFEDDE190606B12F2"),
  BigInt("0x81B31158505E9B8B"),
  BigInt("0xC962E5739841B68F"),
  BigInt("0xB60C15BBA8743FF6"),
  BigInt("0x37BF04E3F82AA47D"),
  BigInt("0x48D1F42BC81F2D04"),
  BigInt("0xA61CECB46814FE75"),
  BigInt("0xD9721C7C5821770C"),
  BigInt("0x58C10D24087FEC87"),
  BigInt("0x27AFFDEC384A65FE"),
  BigInt("0x6F7E09C7F05548FA"),
  BigInt("0x1010F90FC060C183"),
  BigInt("0x91A3E857903E5A08"),
  BigInt("0xEECD189FA00BD371"),
  BigInt("0x78E0FF3B88BE6F81"),
  BigInt("0x078E0FF3B88BE6F8"),
  BigInt("0x863D1EABE8D57D73"),
  BigInt("0xF953EE63D8E0F40A"),
  BigInt("0xB1821A4810FFD90E"),
  BigInt("0xCEECEA8020CA5077"),
  BigInt("0x4F5FFBD87094CBFC"),
  BigInt("0x30310B1040A14285"),
  BigInt("0xDEFC138FE0AA91F4"),
  BigInt("0xA192E347D09F188D"),
  BigInt("0x2021F21F80C18306"),
  BigInt("0x5F4F02D7B0F40A7F"),
  BigInt("0x179EF6FC78EB277B"),
  BigInt("0x68F0063448DEAE02"),
  BigInt("0xE943176C18803589"),
  BigInt("0x962DE7A428B5BCF0"),
  BigInt("0xF1C1FE77117CDF02"),
  BigInt("0x8EAF0EBF2149567B"),
  BigInt("0x0F1C1FE77117CDF0"),
  BigInt("0x7072EF2F41224489"),
  BigInt("0x38A31B04893D698D"),
  BigInt("0x47CDEBCCB908E0F4"),
  BigInt("0xC67EFA94E9567B7F"),
  BigInt("0xB9100A5CD963F206"),
  BigInt("0x57DD12C379682177"),
  BigInt("0x28B3E20B495DA80E"),
  BigInt("0xA900F35319033385"),
  BigInt("0xD66E039B2936BAFC"),
  BigInt("0x9EBFF7B0E12997F8"),
  BigInt("0xE1D10778D11C1E81"),
  BigInt("0x606216208142850A"),
  BigInt("0x1F0CE6E8B1770C73"),
  BigInt("0x8921014C99C2B083"),
  BigInt("0xF64FF184A9F739FA"),
  BigInt("0x77FCE0DCF9A9A271"),
  BigInt("0x08921014C99C2B08"),
  BigInt("0x4043E43F0183060C"),
  BigInt("0x3F2D14F731B68F75"),
  BigInt("0xBE9E05AF61E814FE"),
  BigInt("0xC1F0F56751DD9D87"),
  BigInt("0x2F3DEDF8F1D64EF6"),
  BigInt("0x50531D30C1E3C78F"),
  BigInt("0xD1E00C6891BD5C04"),
  BigInt("0xAE8EFCA0A188D57D"),
  BigInt("0xE65F088B6997F879"),
  BigInt("0x9931F84359A27100"),
  BigInt("0x1882E91B09FCEA8B"),
  BigInt("0x67EC19D339C963F2"),
  BigInt("0xD75ADABD7A6E2D6F"),
  BigInt("0xA8342A754A5BA416"),
  BigInt("0x29873B2D1A053F9D"),
  BigInt("0x56E9CBE52A30B6E4"),
  BigInt("0x1E383FCEE22F9BE0"),
  BigInt("0x6156CF06D21A1299"),
  BigInt("0xE0E5DE5E82448912"),
  BigInt("0x9F8B2E96B271006B"),
  BigInt("0x71463609127AD31A"),
  BigInt("0x0E28C6C1224F5A63"),
  BigInt("0x8F9BD7997211C1E8"),
  BigInt("0xF0F5275142244891"),
  BigInt("0xB824D37A8A3B6595"),
  BigInt("0xC74A23B2BA0EECEC"),
  BigInt("0x46F932EAEA507767"),
  BigInt("0x3997C222DA65FE1E"),
  BigInt("0xAFBA2586F2D042EE"),
  BigInt("0xD0D4D54EC2E5CB97"),
  BigInt("0x5167C41692BB501C"),
  BigInt("0x2E0934DEA28ED965"),
  BigInt("0x66D8C0F56A91F461"),
  BigInt("0x19B6303D5AA47D18"),
  BigInt("0x980521650AFAE693"),
  BigInt("0xE76BD1AD3ACF6FEA"),
  BigInt("0x09A6C9329AC4BC9B"),
  BigInt("0x76C839FAAAF135E2"),
  BigInt("0xF77B28A2FAAFAE69"),
  BigInt("0x8815D86ACA9A2710"),
  BigInt("0xC0C42C4102850A14"),
  BigInt("0xBFAADC8932B0836D"),
  BigInt("0x3E19CDD162EE18E6"),
  BigInt("0x41773D1952DB919F"),
  BigInt("0x269B24CA6B12F26D"),
  BigInt("0x59F5D4025B277B14"),
  BigInt("0xD846C55A0B79E09F"),
  BigInt("0xA72835923B4C69E6"),
  BigInt("0xEFF9C1B9F35344E2"),
  BigInt("0x90973171C366CD9B"),
  BigInt("0x1124202993385610"),
  BigInt("0x6E4AD0E1A30DDF69"),
  BigInt("0x8087C87E03060C18"),
  BigInt("0xFFE938B633338561"),
  BigInt("0x7E5A29EE636D1EEA"),
  BigInt("0x0134D92653589793"),
  BigInt("0x49E52D0D9B47BA97"),
  BigInt("0x368BDDC5AB7233EE"),
  BigInt("0xB738CC9DFB2CA865"),
  BigInt("0xC8563C55CB19211C"),
  BigInt("0x5E7BDBF1E3AC9DEC"),
  BigInt("0x21152B39D3991495"),
  BigInt("0xA0A63A6183C78F1E"),
  BigInt("0xDFC8CAA9B3F20667"),
  BigInt("0x97193E827BED2B63"),
  BigInt("0xE877CE4A4BD8A21A"),
  BigInt("0x69C4DF121B863991"),
  BigInt("0x16AA2FDA2BB3B0E8"),
  BigInt("0xF86737458BB86399"),
  BigInt("0x8709C78DBB8DEAE0"),
  BigInt("0x06BAD6D5EBD3716B"),
  BigInt("0x79D4261DDBE6F812"),
  BigInt("0x3105D23613F9D516"),
  BigInt("0x4E6B22FE23CC5C6F"),
  BigInt("0xCFD833A67392C7E4"),
  BigInt("0xB0B6C36E43A74E9D"),
  BigInt("0x9A6C9329AC4BC9B5"),
  BigInt("0xE50263E19C7E40CC"),
  BigInt("0x64B172B9CC20DB47"),
  BigInt("0x1BDF8271FC15523E"),
  BigInt("0x530E765A340A7F3A"),
  BigInt("0x2C608692043FF643"),
  BigInt("0xADD397CA54616DC8"),
  BigInt("0xD2BD67026454E4B1"),
  BigInt("0x3C707F9DC45F37C0"),
  BigInt("0x431E8F55F46ABEB9"),
  BigInt("0xC2AD9E0DA4342532"),
  BigInt("0xBDC36EC59401AC4B"),
  BigInt("0xF5129AEE5C1E814F"),
  BigInt("0x8A7C6A266C2B0836"),
  BigInt("0x0BCF7B7E3C7593BD"),
  BigInt("0x74A18BB60C401AC4"),
  BigInt("0xE28C6C1224F5A634"),
  BigInt("0x9DE29CDA14C02F4D"),
  BigInt("0x1C518D82449EB4C6"),
  BigInt("0x633F7D4A74AB3DBF"),
  BigInt("0x2BEE8961BCB410BB"),
  BigInt("0x548079A98C8199C2"),
  BigInt("0xD53368F1DCDF0249"),
  BigInt("0xAA5D9839ECEA8B30"),
  BigInt("0x449080A64CE15841"),
  BigInt("0x3BFE706E7CD4D138"),
  BigInt("0xBA4D61362C8A4AB3"),
  BigInt("0xC52391FE1CBFC3CA"),
  BigInt("0x8DF265D5D4A0EECE"),
  BigInt("0xF29C951DE49567B7"),
  BigInt("0x732F8445B4CBFC3C"),
  BigInt("0x0C41748D84FE7545"),
  BigInt("0x6BAD6D5EBD3716B7"),
  BigInt("0x14C39D968D029FCE"),
  BigInt("0x95708CCEDD5C0445"),
  BigInt("0xEA1E7C06ED698D3C"),
  BigInt("0xA2CF882D2576A038"),
  BigInt("0xDDA178E515432941"),
  BigInt("0x5C1269BD451DB2CA"),
  BigInt("0x237C997575283BB3"),
  BigInt("0xCDB181EAD523E8C2"),
  BigInt("0xB2DF7122E51661BB"),
  BigInt("0x336C607AB548FA30"),
  BigInt("0x4C0290B2857D7349"),
  BigInt("0x04D364994D625E4D"),
  BigInt("0x7BBD94517D57D734"),
  BigInt("0xFA0E85092D094CBF"),
  BigInt("0x856075C11D3CC5C6"),
  BigInt("0x134D926535897936"),
  BigInt("0x6C2362AD05BCF04F"),
  BigInt("0xED9073F555E26BC4"),
  BigInt("0x92FE833D65D7E2BD"),
  BigInt("0xDA2F7716ADC8CFB9"),
  BigInt("0xA54187DE9DFD46C0"),
  BigInt("0x24F29686CDA3DD4B"),
  BigInt("0x5B9C664EFD965432"),
  BigInt("0xB5517ED15D9D8743"),
  BigInt("0xCA3F8E196DA80E3A"),
  BigInt("0x4B8C9F413DF695B1"),
  BigInt("0x34E26F890DC31CC8"),
  BigInt("0x7C339BA2C5DC31CC"),
  BigInt("0x035D6B6AF5E9B8B5"),
  BigInt("0x82EE7A32A5B7233E"),
  BigInt("0xFD808AFA9582AA47"),
  BigInt("0x4D364994D625E4DA"),
  BigInt("0x3258B95CE6106DA3"),
  BigInt("0xB3EBA804B64EF628"),
  BigInt("0xCC8558CC867B7F51"),
  BigInt("0x8454ACE74E645255"),
  BigInt("0xFB3A5C2F7E51DB2C"),
  BigInt("0x7A894D772E0F40A7"),
  BigInt("0x05E7BDBF1E3AC9DE"),
  BigInt("0xEB2AA520BE311AAF"),
  BigInt("0x944455E88E0493D6"),
  BigInt("0x15F744B0DE5A085D"),
  BigInt("0x6A99B478EE6F8124"),
  BigInt("0x224840532670AC20"),
  BigInt("0x5D26B09B16452559"),
  BigInt("0xDC95A1C3461BBED2"),
  BigInt("0xA3FB510B762E37AB"),
  BigInt("0x35D6B6AF5E9B8B5B"),
  BigInt("0x4AB846676EAE0222"),
  BigInt("0xCB0B573F3EF099A9"),
  BigInt("0xB465A7F70EC510D0"),
  BigInt("0xFCB453DCC6DA3DD4"),
  BigInt("0x83DAA314F6EFB4AD"),
  BigInt("0x0269B24CA6B12F26"),
  BigInt("0x7D0742849684A65F"),
  BigInt("0x93CA5A1B368F752E"),
  BigInt("0xECA4AAD306BAFC57"),
  BigInt("0x6D17BB8B56E467DC"),
  BigInt("0x12794B4366D1EEA5"),
  BigInt("0x5AA8BF68AECEC3A1"),
  BigInt("0x25C64FA09EFB4AD8"),
  BigInt("0xA4755EF8CEA5D153"),
  BigInt("0xDB1BAE30FE90582A"),
  BigInt("0xBCF7B7E3C7593BD8"),
  BigInt("0xC399472BF76CB2A1"),
  BigInt("0x422A5673A732292A"),
  BigInt("0x3D44A6BB9707A053"),
  BigInt("0x759552905F188D57"),
  BigInt("0x0AFBA2586F2D042E"),
  BigInt("0x8B48B3003F739FA5"),
  BigInt("0xF42643C80F4616DC"),
  BigInt("0x1AEB5B57AF4DC5AD"),
  BigInt("0x6585AB9F9F784CD4"),
  BigInt("0xE436BAC7CF26D75F"),
  BigInt("0x9B584A0FFF135E26"),
  BigInt("0xD389BE24370C7322"),
  BigInt("0xACE74EEC0739FA5B"),
  BigInt("0x2D545FB4576761D0"),
  BigInt("0x523AAF7C6752E8A9"),
  BigInt("0xC41748D84FE75459"),
  BigInt("0xBB79B8107FD2DD20"),
  BigInt("0x3ACAA9482F8C46AB"),
  BigInt("0x45A459801FB9CFD2"),
  BigInt("0x0D75ADABD7A6E2D6"),
  BigInt("0x721B5D63E7936BAF"),
  BigInt("0xF3A84C3BB7CDF024"),
  BigInt("0x8CC6BCF387F8795D"),
  BigInt("0x620BA46C27F3AA2C"),
  BigInt("0x1D6554A417C62355"),
  BigInt("0x9CD645FC4798B8DE"),
  BigInt("0xE3B8B53477AD31A7"),
  BigInt("0xAB69411FBFB21CA3"),
  BigInt("0xD407B1D78F8795DA"),
  BigInt("0x55B4A08FDFD90E51"),
  BigInt("0x2ADA5047EFEC8728")
];
class oi {
  constructor() {
    this._crc = BigInt(0);
  }
  update(t) {
    const r = typeof t == "string" ? Buffer.from(t) : t;
    let a = oi.flip64Bits(this._crc);
    for (const i of r) {
      const s = Number(a & BigInt(255));
      a = fu[s ^ i] ^ a >> BigInt(8);
    }
    this._crc = oi.flip64Bits(a);
  }
  digest(t) {
    switch (t) {
      case "hex":
        return this._crc.toString(16).toUpperCase();
      case "base64":
        return this.toBuffer().toString("base64");
      default:
        return this.toBuffer();
    }
  }
  toBuffer() {
    return Buffer.from([0, 8, 16, 24, 32, 40, 48, 56].map((t) => Number(this._crc >> BigInt(t) & BigInt(255))));
  }
  static flip64Bits(t) {
    return (BigInt(1) << BigInt(64)) - BigInt(1) - t;
  }
}
gs.default = oi;
var aa = D && D.__awaiter || function(e, t, r, a) {
  function i(s) {
    return s instanceof r ? s : new r(function(o) {
      o(s);
    });
  }
  return new (r || (r = Promise))(function(s, o) {
    function d(c) {
      try {
        u(a.next(c));
      } catch (v) {
        o(v);
      }
    }
    function l(c) {
      try {
        u(a.throw(c));
      } catch (v) {
        o(v);
      }
    }
    function u(c) {
      c.done ? s(c.value) : i(c.value).then(d, l);
    }
    u((a = a.apply(e, t || [])).next());
  });
}, Qd = D && D.__importDefault || function(e) {
  return e && e.__esModule ? e : { default: e };
};
Object.defineProperty(te, "__esModule", { value: !0 });
te.digestForStream = te.sleep = te.getProperRetention = te.rmFile = te.getFileSize = te.createEmptyFilesForArtifact = te.createDirectoriesForArtifact = te.displayHttpDiagnostics = te.getArtifactUrl = te.createHttpClient = te.getUploadHeaders = te.getDownloadHeaders = te.getContentRange = te.tryGetRetryAfterValueTimeInMilliseconds = te.isThrottledStatusCode = te.isRetryableStatusCode = te.isForbiddenStatusCode = te.isSuccessStatusCode = te.getApiVersion = te.parseEnvNumber = te.getExponentialRetryTimeInMilliseconds = void 0;
const hu = Qd(as), Ci = Pe, vr = Xe(), Qt = Za, gu = Nt, gr = ce, vu = Qd(gs);
function wu(e) {
  if (e < 0)
    throw new Error("RetryCount should not be negative");
  if (e === 0)
    return gr.getInitialRetryIntervalInMilliseconds();
  const t = gr.getInitialRetryIntervalInMilliseconds() * gr.getRetryMultiplier() * e, r = t * gr.getRetryMultiplier();
  return Math.trunc(Math.random() * (r - t) + t);
}
te.getExponentialRetryTimeInMilliseconds = wu;
function _u(e) {
  const t = Number(process.env[e]);
  if (!(Number.isNaN(t) || t < 0))
    return t;
}
te.parseEnvNumber = _u;
function La() {
  return "6.0-preview";
}
te.getApiVersion = La;
function bu(e) {
  return e ? e >= 200 && e < 300 : !1;
}
te.isSuccessStatusCode = bu;
function yu(e) {
  return e ? e === Qt.HttpCodes.Forbidden : !1;
}
te.isForbiddenStatusCode = yu;
function Eu(e) {
  return e ? [
    Qt.HttpCodes.BadGateway,
    Qt.HttpCodes.GatewayTimeout,
    Qt.HttpCodes.InternalServerError,
    Qt.HttpCodes.ServiceUnavailable,
    Qt.HttpCodes.TooManyRequests,
    413
    // Payload Too Large
  ].includes(e) : !1;
}
te.isRetryableStatusCode = Eu;
function Tu(e) {
  return e ? e === Qt.HttpCodes.TooManyRequests : !1;
}
te.isThrottledStatusCode = Tu;
function Su(e) {
  if (e["retry-after"]) {
    const t = Number(e["retry-after"]);
    if (!isNaN(t))
      return vr.info(`Retry-After header is present with a value of ${t}`), t * 1e3;
    vr.info(`Returned retry-after header value: ${t} is non-numeric and cannot be used`);
    return;
  }
  vr.info("No retry-after header was found. Dumping all headers for diagnostic purposes"), console.log(e);
}
te.tryGetRetryAfterValueTimeInMilliseconds = Su;
function Au(e, t, r) {
  return `bytes ${e}-${t}/${r}`;
}
te.getContentRange = Au;
function Cu(e, t, r) {
  const a = {};
  return e && (a["Content-Type"] = e), t && (a.Connection = "Keep-Alive", a["Keep-Alive"] = "10"), r ? (a["Accept-Encoding"] = "gzip", a.Accept = `application/octet-stream;api-version=${La()}`) : a.Accept = `application/json;api-version=${La()}`, a;
}
te.getDownloadHeaders = Cu;
function Du(e, t, r, a, i, s, o) {
  const d = {};
  return d.Accept = `application/json;api-version=${La()}`, e && (d["Content-Type"] = e), t && (d.Connection = "Keep-Alive", d["Keep-Alive"] = "10"), r && (d["Content-Encoding"] = "gzip", d["x-tfs-filelength"] = a), i && (d["Content-Length"] = i), s && (d["Content-Range"] = s), o && (d["x-actions-results-crc64"] = o.crc64, d["x-actions-results-md5"] = o.md5), d;
}
te.getUploadHeaders = Du;
function Ru(e) {
  return new Qt.HttpClient(e, [
    new gu.BearerCredentialHandler(gr.getRuntimeToken())
  ]);
}
te.createHttpClient = Ru;
function Ou() {
  const e = `${gr.getRuntimeUrl()}_apis/pipelines/workflows/${gr.getWorkFlowRunId()}/artifacts?api-version=${La()}`;
  return vr.debug(`Artifact Url: ${e}`), e;
}
te.getArtifactUrl = Ou;
function Pu(e) {
  vr.info(`##### Begin Diagnostic HTTP information #####
Status Code: ${e.message.statusCode}
Status Message: ${e.message.statusMessage}
Header Information: ${JSON.stringify(e.message.headers, void 0, 2)}
###### End Diagnostic HTTP information ######`);
}
te.displayHttpDiagnostics = Pu;
function Bu(e) {
  return aa(this, void 0, void 0, function* () {
    for (const t of e)
      yield Ci.promises.mkdir(t, {
        recursive: !0
      });
  });
}
te.createDirectoriesForArtifact = Bu;
function Fu(e) {
  return aa(this, void 0, void 0, function* () {
    for (const t of e)
      yield (yield Ci.promises.open(t, "w")).close();
  });
}
te.createEmptyFilesForArtifact = Fu;
function Nu(e) {
  return aa(this, void 0, void 0, function* () {
    const t = yield Ci.promises.stat(e);
    return vr.debug(`${e} size:(${t.size}) blksize:(${t.blksize}) blocks:(${t.blocks})`), t.size;
  });
}
te.getFileSize = Nu;
function ku(e) {
  return aa(this, void 0, void 0, function* () {
    yield Ci.promises.unlink(e);
  });
}
te.rmFile = ku;
function Iu(e, t) {
  if (e < 0)
    throw new Error("Invalid retention, minimum value is 1.");
  let r = e;
  if (t) {
    const a = parseInt(t);
    !isNaN(a) && a < r && (vr.warning(`Retention days is greater than the max value allowed by the repository setting, reduce retention to ${a} days`), r = a);
  }
  return r;
}
te.getProperRetention = Iu;
function Gu(e) {
  return aa(this, void 0, void 0, function* () {
    return new Promise((t) => setTimeout(t, e));
  });
}
te.sleep = Gu;
function $u(e) {
  return aa(this, void 0, void 0, function* () {
    return new Promise((t, r) => {
      const a = new vu.default(), i = hu.default.createHash("md5");
      e.on("data", (s) => {
        a.update(s), i.update(s);
      }).on("end", () => t({
        crc64: a.digest("base64"),
        md5: i.digest("base64")
      })).on("error", r);
    });
  });
}
te.digestForStream = $u;
var Xa = {};
Object.defineProperty(Xa, "__esModule", { value: !0 });
Xa.StatusReporter = void 0;
const cp = Xe();
class Uu {
  constructor(t) {
    this.totalNumberOfFilesToProcess = 0, this.processedCount = 0, this.largeFiles = /* @__PURE__ */ new Map(), this.totalFileStatus = void 0, this.displayFrequencyInMilliseconds = t;
  }
  setTotalNumberOfFilesToProcess(t) {
    this.totalNumberOfFilesToProcess = t, this.processedCount = 0;
  }
  start() {
    this.totalFileStatus = setInterval(() => {
      const t = this.formatPercentage(this.processedCount, this.totalNumberOfFilesToProcess);
      cp.info(`Total file count: ${this.totalNumberOfFilesToProcess} ---- Processed file #${this.processedCount} (${t.slice(0, t.indexOf(".") + 2)}%)`);
    }, this.displayFrequencyInMilliseconds);
  }
  // if there is a large file that is being uploaded in chunks, this is used to display extra information about the status of the upload
  updateLargeFileStatus(t, r, a, i) {
    const s = this.formatPercentage(a, i);
    cp.info(`Uploaded ${t} (${s.slice(0, s.indexOf(".") + 2)}%) bytes ${r}:${a}`);
  }
  stop() {
    this.totalFileStatus && clearInterval(this.totalFileStatus);
  }
  incrementProcessedCount() {
    this.processedCount++;
  }
  formatPercentage(t, r) {
    return (t / r * 100).toFixed(4).toString();
  }
}
Xa.StatusReporter = Uu;
var e1 = {};
Object.defineProperty(e1, "__esModule", { value: !0 });
e1.HttpManager = void 0;
const fp = te;
class xu {
  constructor(t, r) {
    if (t < 1)
      throw new Error("There must be at least one client");
    this.userAgent = r, this.clients = new Array(t).fill(fp.createHttpClient(r));
  }
  getClient(t) {
    return this.clients[t];
  }
  // client disposal is necessary if a keep-alive connection is used to properly close the connection
  // for more information see: https://github.com/actions/http-client/blob/04e5ad73cd3fd1f5610a32116b0759eddf6570d2/index.ts#L292
  disposeAndReplaceClient(t) {
    this.clients[t].dispose(), this.clients[t] = fp.createHttpClient(this.userAgent);
  }
  disposeAndReplaceAllClients() {
    for (const [t] of this.clients.entries())
      this.disposeAndReplaceClient(t);
  }
}
e1.HttpManager = xu;
var Jr = {}, Vu = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), Lu = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), Yd = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && Vu(t, e, r);
  return Lu(t, e), t;
}, pi = D && D.__awaiter || function(e, t, r, a) {
  function i(s) {
    return s instanceof r ? s : new r(function(o) {
      o(s);
    });
  }
  return new (r || (r = Promise))(function(s, o) {
    function d(c) {
      try {
        u(a.next(c));
      } catch (v) {
        o(v);
      }
    }
    function l(c) {
      try {
        u(a.throw(c));
      } catch (v) {
        o(v);
      }
    }
    function u(c) {
      c.done ? s(c.value) : i(c.value).then(d, l);
    }
    u((a = a.apply(e, t || [])).next());
  });
}, ju = D && D.__asyncValues || function(e) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var t = e[Symbol.asyncIterator], r;
  return t ? t.call(e) : (e = typeof __values == "function" ? __values(e) : e[Symbol.iterator](), r = {}, a("next"), a("throw"), a("return"), r[Symbol.asyncIterator] = function() {
    return this;
  }, r);
  function a(s) {
    r[s] = e[s] && function(o) {
      return new Promise(function(d, l) {
        o = e[s](o), i(d, l, o.done, o.value);
      });
    };
  }
  function i(s, o, d, l) {
    Promise.resolve(l).then(function(u) {
      s({ value: u, done: d });
    }, o);
  }
};
Object.defineProperty(Jr, "__esModule", { value: !0 });
Jr.createGZipFileInBuffer = Jr.createGZipFileOnDisk = void 0;
const di = Yd(Pe), Jd = Yd(Ot), Mu = Qa, qu = Mu.promisify(di.stat), Wu = [
  ".gzip",
  ".zip",
  ".tar.lz",
  ".tar.gz",
  ".tar.bz2",
  ".7z"
];
function zu(e, t) {
  return pi(this, void 0, void 0, function* () {
    for (const r of Wu)
      if (e.endsWith(r))
        return Number.MAX_SAFE_INTEGER;
    return new Promise((r, a) => {
      const i = di.createReadStream(e), s = Jd.createGzip(), o = di.createWriteStream(t);
      i.pipe(s).pipe(o), o.on("finish", () => pi(this, void 0, void 0, function* () {
        const d = (yield qu(t)).size;
        r(d);
      })), o.on("error", (d) => {
        console.log(d);
      });
    });
  });
}
Jr.createGZipFileOnDisk = zu;
function Hu(e) {
  return pi(this, void 0, void 0, function* () {
    return new Promise((t) => pi(this, void 0, void 0, function* () {
      var r, a;
      const i = di.createReadStream(e), s = Jd.createGzip();
      i.pipe(s);
      const o = [];
      try {
        for (var d = ju(s), l; l = yield d.next(), !l.done; ) {
          const u = l.value;
          o.push(u);
        }
      } catch (u) {
        r = { error: u };
      } finally {
        try {
          l && !l.done && (a = d.return) && (yield a.call(d));
        } finally {
          if (r)
            throw r.error;
        }
      }
      t(Buffer.concat(o));
    }));
  });
}
Jr.createGZipFileInBuffer = Hu;
var br = {}, Ku = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), Qu = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), Yu = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && Ku(t, e, r);
  return Qu(t, e), t;
}, Zd = D && D.__awaiter || function(e, t, r, a) {
  function i(s) {
    return s instanceof r ? s : new r(function(o) {
      o(s);
    });
  }
  return new (r || (r = Promise))(function(s, o) {
    function d(c) {
      try {
        u(a.next(c));
      } catch (v) {
        o(v);
      }
    }
    function l(c) {
      try {
        u(a.throw(c));
      } catch (v) {
        o(v);
      }
    }
    function u(c) {
      c.done ? s(c.value) : i(c.value).then(d, l);
    }
    u((a = a.apply(e, t || [])).next());
  });
};
Object.defineProperty(br, "__esModule", { value: !0 });
br.retryHttpClientRequest = br.retry = void 0;
const Ur = te, hp = Yu(Xe()), Ju = ce;
function Xd(e, t, r, a) {
  return Zd(this, void 0, void 0, function* () {
    let i, s, o = !1, d = "", l, u = 1;
    for (; u <= a; ) {
      try {
        if (i = yield t(), s = i.message.statusCode, Ur.isSuccessStatusCode(s))
          return i;
        s && (l = r.get(s)), o = Ur.isRetryableStatusCode(s), d = `Artifact service responded with ${s}`;
      } catch (c) {
        o = !0, d = c.message;
      }
      if (!o) {
        hp.info(`${e} - Error is not retryable`), i && Ur.displayHttpDiagnostics(i);
        break;
      }
      hp.info(`${e} - Attempt ${u} of ${a} failed with error: ${d}`), yield Ur.sleep(Ur.getExponentialRetryTimeInMilliseconds(u)), u++;
    }
    throw i && Ur.displayHttpDiagnostics(i), Error(l ? `${e} failed: ${l}` : `${e} failed: ${d}`);
  });
}
br.retry = Xd;
function Zu(e, t, r = /* @__PURE__ */ new Map(), a = Ju.getRetryLimit()) {
  return Zd(this, void 0, void 0, function* () {
    return yield Xd(e, t, r, a);
  });
}
br.retryHttpClientRequest = Zu;
var Xu = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), em = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), Di = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && Xu(t, e, r);
  return em(t, e), t;
}, vt = D && D.__awaiter || function(e, t, r, a) {
  function i(s) {
    return s instanceof r ? s : new r(function(o) {
      o(s);
    });
  }
  return new (r || (r = Promise))(function(s, o) {
    function d(c) {
      try {
        u(a.next(c));
      } catch (v) {
        o(v);
      }
    }
    function l(c) {
      try {
        u(a.throw(c));
      } catch (v) {
        o(v);
      }
    }
    function u(c) {
      c.done ? s(c.value) : i(c.value).then(d, l);
    }
    u((a = a.apply(e, t || [])).next());
  });
};
Object.defineProperty(Ti, "__esModule", { value: !0 });
Ti.UploadHttpClient = void 0;
const Kn = Di(Pe), ge = Di(Xe()), tm = Di(ru), rm = Di(Ze), De = te, Ca = ce, am = Qa, gp = ta, vp = id, im = Xa, Dn = Za, nm = e1, wp = Jr, _p = br, sm = am.promisify(Kn.stat);
class om {
  constructor() {
    this.uploadHttpManager = new nm.HttpManager(Ca.getUploadFileConcurrency(), "@actions/artifact-upload"), this.statusReporter = new im.StatusReporter(1e4);
  }
  /**
   * Creates a file container for the new artifact in the remote blob storage/file service
   * @param {string} artifactName Name of the artifact being created
   * @returns The response from the Artifact Service if the file container was successfully created
   */
  createArtifactInFileContainer(t, r) {
    return vt(this, void 0, void 0, function* () {
      const a = {
        Type: "actions_storage",
        Name: t
      };
      if (r && r.retentionDays) {
        const v = Ca.getRetentionDays();
        a.RetentionDays = De.getProperRetention(r.retentionDays, v);
      }
      const i = JSON.stringify(a, null, 2), s = De.getArtifactUrl(), o = this.uploadHttpManager.getClient(0), d = De.getUploadHeaders("application/json", !1), l = /* @__PURE__ */ new Map([
        [
          Dn.HttpCodes.Forbidden,
          "Artifact storage quota has been hit. Unable to upload any new artifacts"
        ],
        [
          Dn.HttpCodes.BadRequest,
          `The artifact name ${t} is not valid. Request URL ${s}`
        ]
      ]), c = yield (yield _p.retryHttpClientRequest("Create Artifact Container", () => vt(this, void 0, void 0, function* () {
        return o.post(s, i, d);
      }), l)).readBody();
      return JSON.parse(c);
    });
  }
  /**
   * Concurrently upload all of the files in chunks
   * @param {string} uploadUrl Base Url for the artifact that was created
   * @param {SearchResult[]} filesToUpload A list of information about the files being uploaded
   * @returns The size of all the files uploaded in bytes
   */
  uploadArtifactToFileContainer(t, r, a) {
    return vt(this, void 0, void 0, function* () {
      const i = Ca.getUploadFileConcurrency(), s = Ca.getUploadChunkSize();
      ge.debug(`File Concurrency: ${i}, and Chunk Size: ${s}`);
      const o = [];
      let d = !0;
      a && a.continueOnError === !1 && (d = !1);
      for (const f of r) {
        const b = new gp.URL(t);
        b.searchParams.append("itemPath", f.uploadFilePath), o.push({
          file: f.absoluteFilePath,
          resourceUrl: b.toString(),
          maxChunkSize: s,
          continueOnError: d
        });
      }
      const l = [...new Array(i).keys()], u = [];
      let c = 0, v = 0, T = 0, g = 0, w = !1;
      return this.statusReporter.setTotalNumberOfFilesToProcess(r.length), this.statusReporter.start(), yield Promise.all(l.map((f) => vt(this, void 0, void 0, function* () {
        for (; c < r.length; ) {
          const b = o[c];
          if (c += 1, w) {
            u.push(b.file);
            continue;
          }
          const y = vp.performance.now(), k = yield this.uploadFileAsync(f, b);
          ge.isDebug() && ge.debug(`File: ${++v}/${r.length}. ${b.file} took ${(vp.performance.now() - y).toFixed(3)} milliseconds to finish upload`), T += k.successfulUploadSize, g += k.totalSize, k.isSuccess === !1 && (u.push(b.file), d || (ge.error("aborting artifact upload"), w = !0)), this.statusReporter.incrementProcessedCount();
        }
      }))), this.statusReporter.stop(), this.uploadHttpManager.disposeAndReplaceAllClients(), ge.info(`Total size of all the files uploaded is ${T} bytes`), {
        uploadSize: T,
        totalSize: g,
        failedItems: u
      };
    });
  }
  /**
   * Asynchronously uploads a file. The file is compressed and uploaded using GZip if it is determined to save space.
   * If the upload file is bigger than the max chunk size it will be uploaded via multiple calls
   * @param {number} httpClientIndex The index of the httpClient that is being used to make all of the calls
   * @param {UploadFileParameters} parameters Information about the file that needs to be uploaded
   * @returns The size of the file that was uploaded in bytes along with any failed uploads
   */
  uploadFileAsync(t, r) {
    return vt(this, void 0, void 0, function* () {
      const a = yield sm(r.file), i = a.size, s = a.isFIFO();
      let o = 0, d = !0, l = 0, u = 0, c = !0;
      if (!s && i < 65536) {
        ge.debug(`${r.file} is less than 64k in size. Creating a gzip file in-memory to potentially reduce the upload size`);
        const v = yield wp.createGZipFileInBuffer(r.file);
        let T;
        return i < v.byteLength ? (ge.debug(`The gzip file created for ${r.file} did not help with reducing the size of the file. The original file will be uploaded as-is`), T = () => Kn.createReadStream(r.file), c = !1, u = i) : (ge.debug(`A gzip file created for ${r.file} helped with reducing the size of the original file. The file will be uploaded using gzip.`), T = () => {
          const w = new rm.PassThrough();
          return w.end(v), w;
        }, u = v.byteLength), (yield this.uploadChunk(t, r.resourceUrl, T, 0, u - 1, u, c, i)) || (d = !1, l += u, ge.warning(`Aborting upload for ${r.file} due to failure`)), {
          isSuccess: d,
          successfulUploadSize: u - l,
          totalSize: i
        };
      } else {
        const v = yield tm.file();
        ge.debug(`${r.file} is greater than 64k in size. Creating a gzip file on-disk ${v.path} to potentially reduce the upload size`), u = yield wp.createGZipFileOnDisk(r.file, v.path);
        let T = v.path;
        !s && i < u ? (ge.debug(`The gzip file created for ${r.file} did not help with reducing the size of the file. The original file will be uploaded as-is`), u = i, T = r.file, c = !1) : ge.debug(`The gzip file created for ${r.file} is smaller than the original file. The file will be uploaded using gzip.`);
        let g = !1;
        for (; o < u; ) {
          const w = Math.min(u - o, r.maxChunkSize), f = o, b = o + w - 1;
          if (o += r.maxChunkSize, g) {
            l += w;
            continue;
          }
          (yield this.uploadChunk(t, r.resourceUrl, () => Kn.createReadStream(T, {
            start: f,
            end: b,
            autoClose: !1
          }), f, b, u, c, i)) ? u > 8388608 && this.statusReporter.updateLargeFileStatus(r.file, f, b, u) : (d = !1, l += w, ge.warning(`Aborting upload for ${r.file} due to failure`), g = !0);
        }
        return ge.debug(`deleting temporary gzip file ${v.path}`), yield v.cleanup(), {
          isSuccess: d,
          successfulUploadSize: u - l,
          totalSize: i
        };
      }
    });
  }
  /**
   * Uploads a chunk of an individual file to the specified resourceUrl. If the upload fails and the status code
   * indicates a retryable status, we try to upload the chunk as well
   * @param {number} httpClientIndex The index of the httpClient being used to make all the necessary calls
   * @param {string} resourceUrl Url of the resource that the chunk will be uploaded to
   * @param {NodeJS.ReadableStream} openStream Stream of the file that will be uploaded
   * @param {number} start Starting byte index of file that the chunk belongs to
   * @param {number} end Ending byte index of file that the chunk belongs to
   * @param {number} uploadFileSize Total size of the file in bytes that is being uploaded
   * @param {boolean} isGzip Denotes if we are uploading a Gzip compressed stream
   * @param {number} totalFileSize Original total size of the file that is being uploaded
   * @returns if the chunk was successfully uploaded
   */
  uploadChunk(t, r, a, i, s, o, d, l) {
    return vt(this, void 0, void 0, function* () {
      const u = yield De.digestForStream(a()), c = De.getUploadHeaders("application/octet-stream", !0, d, l, s - i + 1, De.getContentRange(i, s, o), u), v = () => vt(this, void 0, void 0, function* () {
        return yield this.uploadHttpManager.getClient(t).sendStream("PUT", r, a(), c);
      });
      let T = 0;
      const g = Ca.getRetryLimit(), w = (b) => (T++, T > g ? (b && De.displayHttpDiagnostics(b), ge.info(`Retry limit has been reached for chunk at offset ${i} to ${r}`), !0) : !1), f = (b) => vt(this, void 0, void 0, function* () {
        if (this.uploadHttpManager.disposeAndReplaceClient(t), b)
          ge.info(`Backoff due to too many requests, retry #${T}. Waiting for ${b} milliseconds before continuing the upload`), yield De.sleep(b);
        else {
          const y = De.getExponentialRetryTimeInMilliseconds(T);
          ge.info(`Exponential backoff for retry #${T}. Waiting for ${y} milliseconds before continuing the upload at offset ${i}`), yield De.sleep(y);
        }
        ge.info(`Finished backoff for retry #${T}, continuing with upload`);
      });
      for (; T <= g; ) {
        let b;
        try {
          b = yield v();
        } catch (y) {
          if (ge.info(`An error has been caught http-client index ${t}, retrying the upload`), console.log(y), w())
            return !1;
          yield f();
          continue;
        }
        if (yield b.readBody(), De.isSuccessStatusCode(b.message.statusCode))
          return !0;
        if (De.isRetryableStatusCode(b.message.statusCode)) {
          if (ge.info(`A ${b.message.statusCode} status code has been received, will attempt to retry the upload`), w(b))
            return !1;
          De.isThrottledStatusCode(b.message.statusCode) ? yield f(De.tryGetRetryAfterValueTimeInMilliseconds(b.message.headers)) : yield f();
        } else
          return ge.error(`Unexpected response. Unable to upload chunk to ${r}`), De.displayHttpDiagnostics(b), !1;
      }
      return !1;
    });
  }
  /**
   * Updates the size of the artifact from -1 which was initially set when the container was first created for the artifact.
   * Updating the size indicates that we are done uploading all the contents of the artifact
   */
  patchArtifactSize(t, r) {
    return vt(this, void 0, void 0, function* () {
      const a = new gp.URL(De.getArtifactUrl());
      a.searchParams.append("artifactName", r);
      const s = JSON.stringify({ Size: t }, null, 2);
      ge.debug(`URL is ${a.toString()}`);
      const o = this.uploadHttpManager.getClient(0), d = De.getUploadHeaders("application/json", !1), l = /* @__PURE__ */ new Map([
        [
          Dn.HttpCodes.NotFound,
          `An Artifact with the name ${r} was not found`
        ]
      ]);
      yield (yield _p.retryHttpClientRequest("Finalize artifact upload", () => vt(this, void 0, void 0, function* () {
        return o.patch(a.toString(), s, d);
      }), l)).readBody(), ge.debug(`Artifact ${r} has been successfully uploaded, total size in bytes: ${t}`);
    });
  }
}
Ti.UploadHttpClient = om;
var Ri = {}, pm = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), dm = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), vs = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && pm(t, e, r);
  return dm(t, e), t;
}, lt = D && D.__awaiter || function(e, t, r, a) {
  function i(s) {
    return s instanceof r ? s : new r(function(o) {
      o(s);
    });
  }
  return new (r || (r = Promise))(function(s, o) {
    function d(c) {
      try {
        u(a.next(c));
      } catch (v) {
        o(v);
      }
    }
    function l(c) {
      try {
        u(a.throw(c));
      } catch (v) {
        o(v);
      }
    }
    function u(c) {
      c.done ? s(c.value) : i(c.value).then(d, l);
    }
    u((a = a.apply(e, t || [])).next());
  });
};
Object.defineProperty(Ri, "__esModule", { value: !0 });
Ri.DownloadHttpClient = void 0;
const bp = vs(Pe), je = vs(Xe()), lm = vs(Ot), ze = te, um = ta, mm = Xa, yp = id, cm = e1, Rn = ce, Ep = br;
class fm {
  constructor() {
    this.downloadHttpManager = new cm.HttpManager(Rn.getDownloadFileConcurrency(), "@actions/artifact-download"), this.statusReporter = new mm.StatusReporter(1e3);
  }
  /**
   * Gets a list of all artifacts that are in a specific container
   */
  listArtifacts() {
    return lt(this, void 0, void 0, function* () {
      const t = ze.getArtifactUrl(), r = this.downloadHttpManager.getClient(0), a = ze.getDownloadHeaders("application/json"), s = yield (yield Ep.retryHttpClientRequest("List Artifacts", () => lt(this, void 0, void 0, function* () {
        return r.get(t, a);
      }))).readBody();
      return JSON.parse(s);
    });
  }
  /**
   * Fetches a set of container items that describe the contents of an artifact
   * @param artifactName the name of the artifact
   * @param containerUrl the artifact container URL for the run
   */
  getContainerItems(t, r) {
    return lt(this, void 0, void 0, function* () {
      const a = new um.URL(r);
      a.searchParams.append("itemPath", t);
      const i = this.downloadHttpManager.getClient(0), s = ze.getDownloadHeaders("application/json"), d = yield (yield Ep.retryHttpClientRequest("Get Container Items", () => lt(this, void 0, void 0, function* () {
        return i.get(a.toString(), s);
      }))).readBody();
      return JSON.parse(d);
    });
  }
  /**
   * Concurrently downloads all the files that are part of an artifact
   * @param downloadItems information about what items to download and where to save them
   */
  downloadSingleArtifact(t) {
    return lt(this, void 0, void 0, function* () {
      const r = Rn.getDownloadFileConcurrency();
      je.debug(`Download file concurrency is set to ${r}`);
      const a = [...new Array(r).keys()];
      let i = 0, s = 0;
      je.info(`Total number of files that will be downloaded: ${t.length}`), this.statusReporter.setTotalNumberOfFilesToProcess(t.length), this.statusReporter.start(), yield Promise.all(a.map((o) => lt(this, void 0, void 0, function* () {
        for (; i < t.length; ) {
          const d = t[i];
          i += 1;
          const l = yp.performance.now();
          yield this.downloadIndividualFile(o, d.sourceLocation, d.targetPath), je.isDebug() && je.debug(`File: ${++s}/${t.length}. ${d.targetPath} took ${(yp.performance.now() - l).toFixed(3)} milliseconds to finish downloading`), this.statusReporter.incrementProcessedCount();
        }
      }))).catch((o) => {
        throw new Error(`Unable to download the artifact: ${o}`);
      }).finally(() => {
        this.statusReporter.stop(), this.downloadHttpManager.disposeAndReplaceAllClients();
      });
    });
  }
  /**
   * Downloads an individual file
   * @param httpClientIndex the index of the http client that is used to make all of the calls
   * @param artifactLocation origin location where a file will be downloaded from
   * @param downloadPath destination location for the file being downloaded
   */
  downloadIndividualFile(t, r, a) {
    return lt(this, void 0, void 0, function* () {
      let i = 0;
      const s = Rn.getRetryLimit();
      let o = bp.createWriteStream(a);
      const d = ze.getDownloadHeaders("application/json", !0, !0), l = () => lt(this, void 0, void 0, function* () {
        return yield this.downloadHttpManager.getClient(t).get(r, d);
      }), u = (g) => "content-encoding" in g && g["content-encoding"] === "gzip", c = (g) => lt(this, void 0, void 0, function* () {
        if (i++, i > s)
          return Promise.reject(new Error(`Retry limit has been reached. Unable to download ${r}`));
        if (this.downloadHttpManager.disposeAndReplaceClient(t), g)
          je.info(`Backoff due to too many requests, retry #${i}. Waiting for ${g} milliseconds before continuing the download`), yield ze.sleep(g);
        else {
          const w = ze.getExponentialRetryTimeInMilliseconds(i);
          je.info(`Exponential backoff for retry #${i}. Waiting for ${w} milliseconds before continuing the download`), yield ze.sleep(w);
        }
        je.info(`Finished backoff for retry #${i}, continuing with download`);
      }), v = (g, w) => !g || !w || process.env.ACTIONS_ARTIFACT_SKIP_DOWNLOAD_VALIDATION ? (je.info("Skipping download validation."), !0) : parseInt(g) === w, T = (g) => lt(this, void 0, void 0, function* () {
        o.close(), yield new Promise((w) => {
          o.on("close", w), o.writableFinished && w();
        }), yield ze.rmFile(g), o = bp.createWriteStream(g);
      });
      for (; i <= s; ) {
        let g;
        try {
          g = yield l();
        } catch (f) {
          je.info("An error occurred while attempting to download a file"), console.log(f), yield c();
          continue;
        }
        let w = !1;
        if (ze.isSuccessStatusCode(g.message.statusCode))
          try {
            const f = u(g.message.headers);
            if (yield this.pipeResponseToFile(g, o, f), f || v(g.message.headers["content-length"], yield ze.getFileSize(a)))
              return;
            w = !0;
          } catch {
            w = !0;
          }
        if (w || ze.isRetryableStatusCode(g.message.statusCode))
          je.info(`A ${g.message.statusCode} response code has been received while attempting to download an artifact`), T(a), ze.isThrottledStatusCode(g.message.statusCode) ? yield c(ze.tryGetRetryAfterValueTimeInMilliseconds(g.message.headers)) : yield c();
        else
          return ze.displayHttpDiagnostics(g), Promise.reject(new Error(`Unexpected http ${g.message.statusCode} during download for ${r}`));
      }
    });
  }
  /**
   * Pipes the response from downloading an individual file to the appropriate destination stream while decoding gzip content if necessary
   * @param response the http response received when downloading a file
   * @param destinationStream the stream where the file should be written to
   * @param isGzip a boolean denoting if the content is compressed using gzip and if we need to decode it
   */
  pipeResponseToFile(t, r, a) {
    return lt(this, void 0, void 0, function* () {
      yield new Promise((i, s) => {
        if (a) {
          const o = lm.createGunzip();
          t.message.on("error", (d) => {
            je.error("An error occurred while attempting to read the response stream"), o.close(), r.close(), s(d);
          }).pipe(o).on("error", (d) => {
            je.error("An error occurred while attempting to decompress the response stream"), r.close(), s(d);
          }).pipe(r).on("close", () => {
            i();
          }).on("error", (d) => {
            je.error(`An error occurred while writing a downloaded file to ${r.path}`), s(d);
          });
        } else
          t.message.on("error", (o) => {
            je.error("An error occurred while attempting to read the response stream"), r.close(), s(o);
          }).pipe(r).on("close", () => {
            i();
          }).on("error", (o) => {
            je.error(`An error occurred while writing a downloaded file to ${r.path}`), s(o);
          });
      });
    });
  }
}
Ri.DownloadHttpClient = fm;
var Oi = {}, hm = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), gm = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), vm = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && hm(t, e, r);
  return gm(t, e), t;
};
Object.defineProperty(Oi, "__esModule", { value: !0 });
Oi.getDownloadSpecification = void 0;
const M1 = vm(ye);
function wm(e, t, r, a) {
  const i = /* @__PURE__ */ new Set(), s = {
    rootDownloadLocation: a ? M1.join(r, e) : r,
    directoryStructure: [],
    emptyFilesToCreate: [],
    filesToDownload: []
  };
  for (const o of t)
    if (o.path.startsWith(`${e}/`) || o.path.startsWith(`${e}\\`)) {
      const d = M1.normalize(o.path), l = M1.join(r, a ? d : d.replace(e, ""));
      o.itemType === "file" && (i.add(M1.dirname(l)), o.fileLength === 0 ? s.emptyFilesToCreate.push(l) : s.filesToDownload.push({
        sourceLocation: o.contentLocation,
        targetPath: l
      }));
    }
  return s.directoryStructure = Array.from(i), s;
}
Oi.getDownloadSpecification = wm;
var _m = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), bm = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), ym = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && _m(t, e, r);
  return bm(t, e), t;
}, On = D && D.__awaiter || function(e, t, r, a) {
  function i(s) {
    return s instanceof r ? s : new r(function(o) {
      o(s);
    });
  }
  return new (r || (r = Promise))(function(s, o) {
    function d(c) {
      try {
        u(a.next(c));
      } catch (v) {
        o(v);
      }
    }
    function l(c) {
      try {
        u(a.throw(c));
      } catch (v) {
        o(v);
      }
    }
    function u(c) {
      c.done ? s(c.value) : i(c.value).then(d, l);
    }
    u((a = a.apply(e, t || [])).next());
  });
};
Object.defineProperty(wi, "__esModule", { value: !0 });
wi.DefaultArtifactClient = void 0;
const He = ym(Xe()), Em = Ei, Tm = Ti, q1 = te, Sm = _r, Tp = Ri, Sp = Oi, Ap = ce, W1 = ye;
class ws {
  /**
   * Constructs a DefaultArtifactClient
   */
  static create() {
    return new ws();
  }
  /**
   * Uploads an artifact
   */
  uploadArtifact(t, r, a, i) {
    return On(this, void 0, void 0, function* () {
      He.info(`Starting artifact upload
For more detailed logs during the artifact upload process, enable step-debugging: https://docs.github.com/actions/monitoring-and-troubleshooting-workflows/enabling-debug-logging#enabling-step-debug-logging`), Sm.checkArtifactName(t);
      const s = Em.getUploadSpecification(t, a, r), o = {
        artifactName: t,
        artifactItems: [],
        size: 0,
        failedItems: []
      }, d = new Tm.UploadHttpClient();
      if (s.length === 0)
        He.warning("No files found that can be uploaded");
      else {
        const l = yield d.createArtifactInFileContainer(t, i);
        if (!l.fileContainerResourceUrl)
          throw He.debug(l.toString()), new Error("No URL provided by the Artifact Service to upload an artifact to");
        He.debug(`Upload Resource URL: ${l.fileContainerResourceUrl}`), He.info(`Container for artifact "${t}" successfully created. Starting upload of file(s)`);
        const u = yield d.uploadArtifactToFileContainer(l.fileContainerResourceUrl, s, i);
        He.info("File upload process has finished. Finalizing the artifact upload"), yield d.patchArtifactSize(u.totalSize, t), u.failedItems.length > 0 ? He.info(`Upload finished. There were ${u.failedItems.length} items that failed to upload`) : He.info("Artifact has been finalized. All files have been successfully uploaded!"), He.info(`
The raw size of all the files that were specified for upload is ${u.totalSize} bytes
The size of all the files that were uploaded is ${u.uploadSize} bytes. This takes into account any gzip compression used to reduce the upload size, time and storage

Note: The size of downloaded zips can differ significantly from the reported size. For more information see: https://github.com/actions/upload-artifact#zipped-artifact-downloads \r
`), o.artifactItems = s.map((c) => c.absoluteFilePath), o.size = u.uploadSize, o.failedItems = u.failedItems;
      }
      return o;
    });
  }
  downloadArtifact(t, r, a) {
    return On(this, void 0, void 0, function* () {
      const i = new Tp.DownloadHttpClient(), s = yield i.listArtifacts();
      if (s.count === 0)
        throw new Error("Unable to find any artifacts for the associated workflow");
      const o = s.value.find((u) => u.name === t);
      if (!o)
        throw new Error(`Unable to find an artifact with the name: ${t}`);
      const d = yield i.getContainerItems(o.name, o.fileContainerResourceUrl);
      r || (r = Ap.getWorkSpaceDirectory()), r = W1.normalize(r), r = W1.resolve(r);
      const l = Sp.getDownloadSpecification(t, d.value, r, (a == null ? void 0 : a.createArtifactFolder) || !1);
      return l.filesToDownload.length === 0 ? He.info(`No downloadable files were found for the artifact: ${o.name}`) : (yield q1.createDirectoriesForArtifact(l.directoryStructure), He.info("Directory structure has been setup for the artifact"), yield q1.createEmptyFilesForArtifact(l.emptyFilesToCreate), yield i.downloadSingleArtifact(l.filesToDownload)), {
        artifactName: t,
        downloadPath: l.rootDownloadLocation
      };
    });
  }
  downloadAllArtifacts(t) {
    return On(this, void 0, void 0, function* () {
      const r = new Tp.DownloadHttpClient(), a = [], i = yield r.listArtifacts();
      if (i.count === 0)
        return He.info("Unable to find any artifacts for the associated workflow"), a;
      t || (t = Ap.getWorkSpaceDirectory()), t = W1.normalize(t), t = W1.resolve(t);
      let s = 0;
      for (; s < i.count; ) {
        const o = i.value[s];
        s += 1, He.info(`starting download of artifact ${o.name} : ${s}/${i.count}`);
        const d = yield r.getContainerItems(o.name, o.fileContainerResourceUrl), l = Sp.getDownloadSpecification(o.name, d.value, t, !0);
        l.filesToDownload.length === 0 ? He.info(`No downloadable files were found for any artifact ${o.name}`) : (yield q1.createDirectoriesForArtifact(l.directoryStructure), yield q1.createEmptyFilesForArtifact(l.emptyFilesToCreate), yield r.downloadSingleArtifact(l.filesToDownload)), a.push({
          artifactName: o.name,
          downloadPath: l.rootDownloadLocation
        });
      }
      return a;
    });
  }
}
wi.DefaultArtifactClient = ws;
Object.defineProperty(Ua, "__esModule", { value: !0 });
var el = Ua.create = void 0;
const Am = wi;
function Cm() {
  return Am.DefaultArtifactClient.create();
}
el = Ua.create = Cm;
const Dm = /* @__PURE__ */ Ya({
  __proto__: null,
  get create() {
    return el;
  },
  default: Ua
}, [Ua]);
var at = Xe();
const Rm = /* @__PURE__ */ nd(at), Om = /* @__PURE__ */ Ya({
  __proto__: null,
  default: Rm
}, [at]);
var yr = {}, Zr = {}, $e = {}, _s = {};
(function(e) {
  var t = D && D.__createBinding || (Object.create ? function(f, b, y, k) {
    k === void 0 && (k = y), Object.defineProperty(f, k, { enumerable: !0, get: function() {
      return b[y];
    } });
  } : function(f, b, y, k) {
    k === void 0 && (k = y), f[k] = b[y];
  }), r = D && D.__setModuleDefault || (Object.create ? function(f, b) {
    Object.defineProperty(f, "default", { enumerable: !0, value: b });
  } : function(f, b) {
    f.default = b;
  }), a = D && D.__importStar || function(f) {
    if (f && f.__esModule)
      return f;
    var b = {};
    if (f != null)
      for (var y in f)
        y !== "default" && Object.hasOwnProperty.call(f, y) && t(b, f, y);
    return r(b, f), b;
  }, i = D && D.__awaiter || function(f, b, y, k) {
    function N($) {
      return $ instanceof y ? $ : new y(function(O) {
        O($);
      });
    }
    return new (y || (y = Promise))(function($, O) {
      function P(S) {
        try {
          A(k.next(S));
        } catch (R) {
          O(R);
        }
      }
      function C(S) {
        try {
          A(k.throw(S));
        } catch (R) {
          O(R);
        }
      }
      function A(S) {
        S.done ? $(S.value) : N(S.value).then(P, C);
      }
      A((k = k.apply(f, b || [])).next());
    });
  }, s;
  Object.defineProperty(e, "__esModule", { value: !0 }), e.getCmdPath = e.tryGetExecutablePath = e.isRooted = e.isDirectory = e.exists = e.READONLY = e.UV_FS_O_EXLOCK = e.IS_WINDOWS = e.unlink = e.symlink = e.stat = e.rmdir = e.rm = e.rename = e.readlink = e.readdir = e.open = e.mkdir = e.lstat = e.copyFile = e.chmod = void 0;
  const o = a(Pe), d = a(ye);
  s = o.promises, e.chmod = s.chmod, e.copyFile = s.copyFile, e.lstat = s.lstat, e.mkdir = s.mkdir, e.open = s.open, e.readdir = s.readdir, e.readlink = s.readlink, e.rename = s.rename, e.rm = s.rm, e.rmdir = s.rmdir, e.stat = s.stat, e.symlink = s.symlink, e.unlink = s.unlink, e.IS_WINDOWS = process.platform === "win32", e.UV_FS_O_EXLOCK = 268435456, e.READONLY = o.constants.O_RDONLY;
  function l(f) {
    return i(this, void 0, void 0, function* () {
      try {
        yield e.stat(f);
      } catch (b) {
        if (b.code === "ENOENT")
          return !1;
        throw b;
      }
      return !0;
    });
  }
  e.exists = l;
  function u(f, b = !1) {
    return i(this, void 0, void 0, function* () {
      return (b ? yield e.stat(f) : yield e.lstat(f)).isDirectory();
    });
  }
  e.isDirectory = u;
  function c(f) {
    if (f = T(f), !f)
      throw new Error('isRooted() parameter "p" cannot be empty');
    return e.IS_WINDOWS ? f.startsWith("\\") || /^[A-Z]:/i.test(f) : f.startsWith("/");
  }
  e.isRooted = c;
  function v(f, b) {
    return i(this, void 0, void 0, function* () {
      let y;
      try {
        y = yield e.stat(f);
      } catch (N) {
        N.code !== "ENOENT" && console.log(`Unexpected error attempting to determine if executable file exists '${f}': ${N}`);
      }
      if (y && y.isFile()) {
        if (e.IS_WINDOWS) {
          const N = d.extname(f).toUpperCase();
          if (b.some(($) => $.toUpperCase() === N))
            return f;
        } else if (g(y))
          return f;
      }
      const k = f;
      for (const N of b) {
        f = k + N, y = void 0;
        try {
          y = yield e.stat(f);
        } catch ($) {
          $.code !== "ENOENT" && console.log(`Unexpected error attempting to determine if executable file exists '${f}': ${$}`);
        }
        if (y && y.isFile()) {
          if (e.IS_WINDOWS) {
            try {
              const $ = d.dirname(f), O = d.basename(f).toUpperCase();
              for (const P of yield e.readdir($))
                if (O === P.toUpperCase()) {
                  f = d.join($, P);
                  break;
                }
            } catch ($) {
              console.log(`Unexpected error attempting to determine the actual case of the file '${f}': ${$}`);
            }
            return f;
          } else if (g(y))
            return f;
        }
      }
      return "";
    });
  }
  e.tryGetExecutablePath = v;
  function T(f) {
    return f = f || "", e.IS_WINDOWS ? (f = f.replace(/\//g, "\\"), f.replace(/\\\\+/g, "\\")) : f.replace(/\/\/+/g, "/");
  }
  function g(f) {
    return (f.mode & 1) > 0 || (f.mode & 8) > 0 && f.gid === process.getgid() || (f.mode & 64) > 0 && f.uid === process.getuid();
  }
  function w() {
    var f;
    return (f = process.env.COMSPEC) !== null && f !== void 0 ? f : "cmd.exe";
  }
  e.getCmdPath = w;
})(_s);
var Pm = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), Bm = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), tl = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && Pm(t, e, r);
  return Bm(t, e), t;
}, ir = D && D.__awaiter || function(e, t, r, a) {
  function i(s) {
    return s instanceof r ? s : new r(function(o) {
      o(s);
    });
  }
  return new (r || (r = Promise))(function(s, o) {
    function d(c) {
      try {
        u(a.next(c));
      } catch (v) {
        o(v);
      }
    }
    function l(c) {
      try {
        u(a.throw(c));
      } catch (v) {
        o(v);
      }
    }
    function u(c) {
      c.done ? s(c.value) : i(c.value).then(d, l);
    }
    u((a = a.apply(e, t || [])).next());
  });
};
Object.defineProperty($e, "__esModule", { value: !0 });
var rl = $e.findInPath = dl = $e.which = ol = $e.mkdirP = sl = $e.rmRF = il = $e.mv = al = $e.cp = void 0;
const Fm = Sr, bt = tl(ye), ue = tl(_s);
function Nm(e, t, r = {}) {
  return ir(this, void 0, void 0, function* () {
    const { force: a, recursive: i, copySourceDirectory: s } = Im(r), o = (yield ue.exists(t)) ? yield ue.stat(t) : null;
    if (o && o.isFile() && !a)
      return;
    const d = o && o.isDirectory() && s ? bt.join(t, bt.basename(e)) : t;
    if (!(yield ue.exists(e)))
      throw new Error(`no such file or directory: ${e}`);
    if ((yield ue.stat(e)).isDirectory())
      if (i)
        yield ul(e, d, 0, a);
      else
        throw new Error(`Failed to copy. ${e} is a directory, but tried to copy without recursive flag.`);
    else {
      if (bt.relative(e, d) === "")
        throw new Error(`'${d}' and '${e}' are the same file`);
      yield ml(e, d, a);
    }
  });
}
var al = $e.cp = Nm;
function km(e, t, r = {}) {
  return ir(this, void 0, void 0, function* () {
    if (yield ue.exists(t)) {
      let a = !0;
      if ((yield ue.isDirectory(t)) && (t = bt.join(t, bt.basename(e)), a = yield ue.exists(t)), a)
        if (r.force == null || r.force)
          yield nl(t);
        else
          throw new Error("Destination already exists");
    }
    yield bs(bt.dirname(t)), yield ue.rename(e, t);
  });
}
var il = $e.mv = km;
function nl(e) {
  return ir(this, void 0, void 0, function* () {
    if (ue.IS_WINDOWS && /[*"<>|]/.test(e))
      throw new Error('File path must not contain `*`, `"`, `<`, `>` or `|` on Windows');
    try {
      yield ue.rm(e, {
        force: !0,
        maxRetries: 3,
        recursive: !0,
        retryDelay: 300
      });
    } catch (t) {
      throw new Error(`File was unable to be removed ${t}`);
    }
  });
}
var sl = $e.rmRF = nl;
function bs(e) {
  return ir(this, void 0, void 0, function* () {
    Fm.ok(e, "a path argument must be provided"), yield ue.mkdir(e, { recursive: !0 });
  });
}
var ol = $e.mkdirP = bs;
function pl(e, t) {
  return ir(this, void 0, void 0, function* () {
    if (!e)
      throw new Error("parameter 'tool' is required");
    if (t) {
      const a = yield pl(e, !1);
      if (!a)
        throw ue.IS_WINDOWS ? new Error(`Unable to locate executable file: ${e}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`) : new Error(`Unable to locate executable file: ${e}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
      return a;
    }
    const r = yield ll(e);
    return r && r.length > 0 ? r[0] : "";
  });
}
var dl = $e.which = pl;
function ll(e) {
  return ir(this, void 0, void 0, function* () {
    if (!e)
      throw new Error("parameter 'tool' is required");
    const t = [];
    if (ue.IS_WINDOWS && process.env.PATHEXT)
      for (const i of process.env.PATHEXT.split(bt.delimiter))
        i && t.push(i);
    if (ue.isRooted(e)) {
      const i = yield ue.tryGetExecutablePath(e, t);
      return i ? [i] : [];
    }
    if (e.includes(bt.sep))
      return [];
    const r = [];
    if (process.env.PATH)
      for (const i of process.env.PATH.split(bt.delimiter))
        i && r.push(i);
    const a = [];
    for (const i of r) {
      const s = yield ue.tryGetExecutablePath(bt.join(i, e), t);
      s && a.push(s);
    }
    return a;
  });
}
rl = $e.findInPath = ll;
function Im(e) {
  const t = e.force == null ? !0 : e.force, r = !!e.recursive, a = e.copySourceDirectory == null ? !0 : !!e.copySourceDirectory;
  return { force: t, recursive: r, copySourceDirectory: a };
}
function ul(e, t, r, a) {
  return ir(this, void 0, void 0, function* () {
    if (r >= 255)
      return;
    r++, yield bs(t);
    const i = yield ue.readdir(e);
    for (const s of i) {
      const o = `${e}/${s}`, d = `${t}/${s}`;
      (yield ue.lstat(o)).isDirectory() ? yield ul(o, d, r, a) : yield ml(o, d, a);
    }
    yield ue.chmod(t, (yield ue.stat(e)).mode);
  });
}
function ml(e, t, r) {
  return ir(this, void 0, void 0, function* () {
    if ((yield ue.lstat(e)).isSymbolicLink()) {
      try {
        yield ue.lstat(t), yield ue.unlink(t);
      } catch (i) {
        i.code === "EPERM" && (yield ue.chmod(t, "0666"), yield ue.unlink(t));
      }
      const a = yield ue.readlink(e);
      yield ue.symlink(a, t, ue.IS_WINDOWS ? "junction" : null);
    } else
      (!(yield ue.exists(t)) || r) && (yield ue.copyFile(e, t));
  });
}
const Gm = /* @__PURE__ */ Ya({
  __proto__: null,
  get cp() {
    return al;
  },
  default: $e,
  get findInPath() {
    return rl;
  },
  get mkdirP() {
    return ol;
  },
  get mv() {
    return il;
  },
  get rmRF() {
    return sl;
  },
  get which() {
    return dl;
  }
}, [$e]);
var $m = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), Um = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), ia = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && $m(t, e, r);
  return Um(t, e), t;
}, Cp = D && D.__awaiter || function(e, t, r, a) {
  function i(s) {
    return s instanceof r ? s : new r(function(o) {
      o(s);
    });
  }
  return new (r || (r = Promise))(function(s, o) {
    function d(c) {
      try {
        u(a.next(c));
      } catch (v) {
        o(v);
      }
    }
    function l(c) {
      try {
        u(a.throw(c));
      } catch (v) {
        o(v);
      }
    }
    function u(c) {
      c.done ? s(c.value) : i(c.value).then(d, l);
    }
    u((a = a.apply(e, t || [])).next());
  });
};
Object.defineProperty(Zr, "__esModule", { value: !0 });
Zr.argStringToArray = Zr.ToolRunner = void 0;
const z1 = ia(ar), cl = ia(ns), xm = ia(U0), Vm = ia(ye), Lm = ia($e), Dp = ia(_s), jm = x0, H1 = process.platform === "win32";
class Mm extends cl.EventEmitter {
  constructor(t, r, a) {
    if (super(), !t)
      throw new Error("Parameter 'toolPath' cannot be null or empty.");
    this.toolPath = t, this.args = r || [], this.options = a || {};
  }
  _debug(t) {
    this.options.listeners && this.options.listeners.debug && this.options.listeners.debug(t);
  }
  _getCommandString(t, r) {
    const a = this._getSpawnFileName(), i = this._getSpawnArgs(t);
    let s = r ? "" : "[command]";
    if (H1)
      if (this._isCmdFile()) {
        s += a;
        for (const o of i)
          s += ` ${o}`;
      } else if (t.windowsVerbatimArguments) {
        s += `"${a}"`;
        for (const o of i)
          s += ` ${o}`;
      } else {
        s += this._windowsQuoteCmdArg(a);
        for (const o of i)
          s += ` ${this._windowsQuoteCmdArg(o)}`;
      }
    else {
      s += a;
      for (const o of i)
        s += ` ${o}`;
    }
    return s;
  }
  _processLineBuffer(t, r, a) {
    try {
      let i = r + t.toString(), s = i.indexOf(z1.EOL);
      for (; s > -1; ) {
        const o = i.substring(0, s);
        a(o), i = i.substring(s + z1.EOL.length), s = i.indexOf(z1.EOL);
      }
      return i;
    } catch (i) {
      return this._debug(`error processing line. Failed with error ${i}`), "";
    }
  }
  _getSpawnFileName() {
    return H1 && this._isCmdFile() ? process.env.COMSPEC || "cmd.exe" : this.toolPath;
  }
  _getSpawnArgs(t) {
    if (H1 && this._isCmdFile()) {
      let r = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
      for (const a of this.args)
        r += " ", r += t.windowsVerbatimArguments ? a : this._windowsQuoteCmdArg(a);
      return r += '"', [r];
    }
    return this.args;
  }
  _endsWith(t, r) {
    return t.endsWith(r);
  }
  _isCmdFile() {
    const t = this.toolPath.toUpperCase();
    return this._endsWith(t, ".CMD") || this._endsWith(t, ".BAT");
  }
  _windowsQuoteCmdArg(t) {
    if (!this._isCmdFile())
      return this._uvQuoteCmdArg(t);
    if (!t)
      return '""';
    const r = [
      " ",
      "	",
      "&",
      "(",
      ")",
      "[",
      "]",
      "{",
      "}",
      "^",
      "=",
      ";",
      "!",
      "'",
      "+",
      ",",
      "`",
      "~",
      "|",
      "<",
      ">",
      '"'
    ];
    let a = !1;
    for (const o of t)
      if (r.some((d) => d === o)) {
        a = !0;
        break;
      }
    if (!a)
      return t;
    let i = '"', s = !0;
    for (let o = t.length; o > 0; o--)
      i += t[o - 1], s && t[o - 1] === "\\" ? i += "\\" : t[o - 1] === '"' ? (s = !0, i += '"') : s = !1;
    return i += '"', i.split("").reverse().join("");
  }
  _uvQuoteCmdArg(t) {
    if (!t)
      return '""';
    if (!t.includes(" ") && !t.includes("	") && !t.includes('"'))
      return t;
    if (!t.includes('"') && !t.includes("\\"))
      return `"${t}"`;
    let r = '"', a = !0;
    for (let i = t.length; i > 0; i--)
      r += t[i - 1], a && t[i - 1] === "\\" ? r += "\\" : t[i - 1] === '"' ? (a = !0, r += "\\") : a = !1;
    return r += '"', r.split("").reverse().join("");
  }
  _cloneExecOptions(t) {
    t = t || {};
    const r = {
      cwd: t.cwd || process.cwd(),
      env: t.env || process.env,
      silent: t.silent || !1,
      windowsVerbatimArguments: t.windowsVerbatimArguments || !1,
      failOnStdErr: t.failOnStdErr || !1,
      ignoreReturnCode: t.ignoreReturnCode || !1,
      delay: t.delay || 1e4
    };
    return r.outStream = t.outStream || process.stdout, r.errStream = t.errStream || process.stderr, r;
  }
  _getSpawnOptions(t, r) {
    t = t || {};
    const a = {};
    return a.cwd = t.cwd, a.env = t.env, a.windowsVerbatimArguments = t.windowsVerbatimArguments || this._isCmdFile(), t.windowsVerbatimArguments && (a.argv0 = `"${r}"`), a;
  }
  /**
   * Exec a tool.
   * Output will be streamed to the live console.
   * Returns promise with return code
   *
   * @param     tool     path to tool to exec
   * @param     options  optional exec options.  See ExecOptions
   * @returns   number
   */
  exec() {
    return Cp(this, void 0, void 0, function* () {
      return !Dp.isRooted(this.toolPath) && (this.toolPath.includes("/") || H1 && this.toolPath.includes("\\")) && (this.toolPath = Vm.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath)), this.toolPath = yield Lm.which(this.toolPath, !0), new Promise((t, r) => Cp(this, void 0, void 0, function* () {
        this._debug(`exec tool: ${this.toolPath}`), this._debug("arguments:");
        for (const u of this.args)
          this._debug(`   ${u}`);
        const a = this._cloneExecOptions(this.options);
        !a.silent && a.outStream && a.outStream.write(this._getCommandString(a) + z1.EOL);
        const i = new ys(a, this.toolPath);
        if (i.on("debug", (u) => {
          this._debug(u);
        }), this.options.cwd && !(yield Dp.exists(this.options.cwd)))
          return r(new Error(`The cwd: ${this.options.cwd} does not exist!`));
        const s = this._getSpawnFileName(), o = xm.spawn(s, this._getSpawnArgs(a), this._getSpawnOptions(this.options, s));
        let d = "";
        o.stdout && o.stdout.on("data", (u) => {
          this.options.listeners && this.options.listeners.stdout && this.options.listeners.stdout(u), !a.silent && a.outStream && a.outStream.write(u), d = this._processLineBuffer(u, d, (c) => {
            this.options.listeners && this.options.listeners.stdline && this.options.listeners.stdline(c);
          });
        });
        let l = "";
        if (o.stderr && o.stderr.on("data", (u) => {
          i.processStderr = !0, this.options.listeners && this.options.listeners.stderr && this.options.listeners.stderr(u), !a.silent && a.errStream && a.outStream && (a.failOnStdErr ? a.errStream : a.outStream).write(u), l = this._processLineBuffer(u, l, (c) => {
            this.options.listeners && this.options.listeners.errline && this.options.listeners.errline(c);
          });
        }), o.on("error", (u) => {
          i.processError = u.message, i.processExited = !0, i.processClosed = !0, i.CheckComplete();
        }), o.on("exit", (u) => {
          i.processExitCode = u, i.processExited = !0, this._debug(`Exit code ${u} received from tool '${this.toolPath}'`), i.CheckComplete();
        }), o.on("close", (u) => {
          i.processExitCode = u, i.processExited = !0, i.processClosed = !0, this._debug(`STDIO streams have closed for tool '${this.toolPath}'`), i.CheckComplete();
        }), i.on("done", (u, c) => {
          d.length > 0 && this.emit("stdline", d), l.length > 0 && this.emit("errline", l), o.removeAllListeners(), u ? r(u) : t(c);
        }), this.options.input) {
          if (!o.stdin)
            throw new Error("child process missing stdin");
          o.stdin.end(this.options.input);
        }
      }));
    });
  }
}
Zr.ToolRunner = Mm;
function qm(e) {
  const t = [];
  let r = !1, a = !1, i = "";
  function s(o) {
    a && o !== '"' && (i += "\\"), i += o, a = !1;
  }
  for (let o = 0; o < e.length; o++) {
    const d = e.charAt(o);
    if (d === '"') {
      a ? s(d) : r = !r;
      continue;
    }
    if (d === "\\" && a) {
      s(d);
      continue;
    }
    if (d === "\\" && r) {
      a = !0;
      continue;
    }
    if (d === " " && !r) {
      i.length > 0 && (t.push(i), i = "");
      continue;
    }
    s(d);
  }
  return i.length > 0 && t.push(i.trim()), t;
}
Zr.argStringToArray = qm;
class ys extends cl.EventEmitter {
  constructor(t, r) {
    if (super(), this.processClosed = !1, this.processError = "", this.processExitCode = 0, this.processExited = !1, this.processStderr = !1, this.delay = 1e4, this.done = !1, this.timeout = null, !r)
      throw new Error("toolPath must not be empty");
    this.options = t, this.toolPath = r, t.delay && (this.delay = t.delay);
  }
  CheckComplete() {
    this.done || (this.processClosed ? this._setResult() : this.processExited && (this.timeout = jm.setTimeout(ys.HandleTimeout, this.delay, this)));
  }
  _debug(t) {
    this.emit("debug", t);
  }
  _setResult() {
    let t;
    this.processExited && (this.processError ? t = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`) : this.processExitCode !== 0 && !this.options.ignoreReturnCode ? t = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`) : this.processStderr && this.options.failOnStdErr && (t = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`))), this.timeout && (clearTimeout(this.timeout), this.timeout = null), this.done = !0, this.emit("done", t, this.processExitCode);
  }
  static HandleTimeout(t) {
    if (!t.done) {
      if (!t.processClosed && t.processExited) {
        const r = `The STDIO streams did not close within ${t.delay / 1e3} seconds of the exit event from process '${t.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
        t._debug(r);
      }
      t._setResult();
    }
  }
}
var Wm = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), zm = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), Hm = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && Wm(t, e, r);
  return zm(t, e), t;
}, fl = D && D.__awaiter || function(e, t, r, a) {
  function i(s) {
    return s instanceof r ? s : new r(function(o) {
      o(s);
    });
  }
  return new (r || (r = Promise))(function(s, o) {
    function d(c) {
      try {
        u(a.next(c));
      } catch (v) {
        o(v);
      }
    }
    function l(c) {
      try {
        u(a.throw(c));
      } catch (v) {
        o(v);
      }
    }
    function u(c) {
      c.done ? s(c.value) : i(c.value).then(d, l);
    }
    u((a = a.apply(e, t || [])).next());
  });
};
Object.defineProperty(yr, "__esModule", { value: !0 });
var Es = yr.getExecOutput = Ts = yr.exec = void 0;
const Rp = $0, Op = Hm(Zr);
function hl(e, t, r) {
  return fl(this, void 0, void 0, function* () {
    const a = Op.argStringToArray(e);
    if (a.length === 0)
      throw new Error("Parameter 'commandLine' cannot be null or empty.");
    const i = a[0];
    return t = a.slice(1).concat(t || []), new Op.ToolRunner(i, t, r).exec();
  });
}
var Ts = yr.exec = hl;
function Km(e, t, r) {
  var a, i;
  return fl(this, void 0, void 0, function* () {
    let s = "", o = "";
    const d = new Rp.StringDecoder("utf8"), l = new Rp.StringDecoder("utf8"), u = (a = r == null ? void 0 : r.listeners) === null || a === void 0 ? void 0 : a.stdout, c = (i = r == null ? void 0 : r.listeners) === null || i === void 0 ? void 0 : i.stderr, v = (f) => {
      o += l.write(f), c && c(f);
    }, T = (f) => {
      s += d.write(f), u && u(f);
    }, g = Object.assign(Object.assign({}, r == null ? void 0 : r.listeners), { stdout: T, stderr: v }), w = yield hl(e, t, Object.assign(Object.assign({}, r), { listeners: g }));
    return s += d.end(), o += l.end(), {
      exitCode: w,
      stdout: s,
      stderr: o
    };
  });
}
Es = yr.getExecOutput = Km;
const Qm = /* @__PURE__ */ Ya({
  __proto__: null,
  default: yr,
  get exec() {
    return Ts;
  },
  get getExecOutput() {
    return Es;
  }
}, [yr]);
var ja = {}, t1 = {};
Object.defineProperty(t1, "__esModule", { value: !0 });
t1.Context = void 0;
const Pp = Pe, Ym = ar;
let Jm = class {
  /**
   * Hydrate the context from the environment
   */
  constructor() {
    var t, r, a;
    if (this.payload = {}, process.env.GITHUB_EVENT_PATH)
      if (Pp.existsSync(process.env.GITHUB_EVENT_PATH))
        this.payload = JSON.parse(Pp.readFileSync(process.env.GITHUB_EVENT_PATH, { encoding: "utf8" }));
      else {
        const i = process.env.GITHUB_EVENT_PATH;
        process.stdout.write(`GITHUB_EVENT_PATH ${i} does not exist${Ym.EOL}`);
      }
    this.eventName = process.env.GITHUB_EVENT_NAME, this.sha = process.env.GITHUB_SHA, this.ref = process.env.GITHUB_REF, this.workflow = process.env.GITHUB_WORKFLOW, this.action = process.env.GITHUB_ACTION, this.actor = process.env.GITHUB_ACTOR, this.job = process.env.GITHUB_JOB, this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10), this.runId = parseInt(process.env.GITHUB_RUN_ID, 10), this.apiUrl = (t = process.env.GITHUB_API_URL) !== null && t !== void 0 ? t : "https://api.github.com", this.serverUrl = (r = process.env.GITHUB_SERVER_URL) !== null && r !== void 0 ? r : "https://github.com", this.graphqlUrl = (a = process.env.GITHUB_GRAPHQL_URL) !== null && a !== void 0 ? a : "https://api.github.com/graphql";
  }
  get issue() {
    const t = this.payload;
    return Object.assign(Object.assign({}, this.repo), { number: (t.issue || t.pull_request || t).number });
  }
  get repo() {
    if (process.env.GITHUB_REPOSITORY) {
      const [t, r] = process.env.GITHUB_REPOSITORY.split("/");
      return { owner: t, repo: r };
    }
    if (this.payload.repository)
      return {
        owner: this.payload.repository.owner.login,
        repo: this.payload.repository.name
      };
    throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
  }
};
t1.Context = Jm;
var gl = {}, Xt = {}, Zm = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), Xm = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), e3 = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && Zm(t, e, r);
  return Xm(t, e), t;
};
Object.defineProperty(Xt, "__esModule", { value: !0 });
Xt.getApiBaseUrl = Xt.getProxyAgent = Xt.getAuthString = void 0;
const t3 = e3(Za);
function r3(e, t) {
  if (!e && !t.auth)
    throw new Error("Parameter token or opts.auth is required");
  if (e && t.auth)
    throw new Error("Parameters token and opts.auth may not both be specified");
  return typeof t.auth == "string" ? t.auth : `token ${e}`;
}
Xt.getAuthString = r3;
function a3(e) {
  return new t3.HttpClient().getAgent(e);
}
Xt.getProxyAgent = a3;
function i3() {
  return process.env.GITHUB_API_URL || "https://api.github.com";
}
Xt.getApiBaseUrl = i3;
function Pi() {
  return typeof navigator == "object" && "userAgent" in navigator ? navigator.userAgent : typeof process == "object" && "version" in process ? `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})` : "<environment undetectable>";
}
var Bi = { exports: {} }, n3 = vl;
function vl(e, t, r, a) {
  if (typeof r != "function")
    throw new Error("method for before hook must be a function");
  return a || (a = {}), Array.isArray(t) ? t.reverse().reduce(function(i, s) {
    return vl.bind(null, e, s, i, a);
  }, r)() : Promise.resolve().then(function() {
    return e.registry[t] ? e.registry[t].reduce(function(i, s) {
      return s.hook.bind(null, i, a);
    }, r)() : r(a);
  });
}
var s3 = o3;
function o3(e, t, r, a) {
  var i = a;
  e.registry[r] || (e.registry[r] = []), t === "before" && (a = function(s, o) {
    return Promise.resolve().then(i.bind(null, o)).then(s.bind(null, o));
  }), t === "after" && (a = function(s, o) {
    var d;
    return Promise.resolve().then(s.bind(null, o)).then(function(l) {
      return d = l, i(d, o);
    }).then(function() {
      return d;
    });
  }), t === "error" && (a = function(s, o) {
    return Promise.resolve().then(s.bind(null, o)).catch(function(d) {
      return i(d, o);
    });
  }), e.registry[r].push({
    hook: a,
    orig: i
  });
}
var p3 = d3;
function d3(e, t, r) {
  if (e.registry[t]) {
    var a = e.registry[t].map(function(i) {
      return i.orig;
    }).indexOf(r);
    a !== -1 && e.registry[t].splice(a, 1);
  }
}
var wl = n3, l3 = s3, u3 = p3, Bp = Function.bind, Fp = Bp.bind(Bp);
function _l(e, t, r) {
  var a = Fp(u3, null).apply(
    null,
    r ? [t, r] : [t]
  );
  e.api = { remove: a }, e.remove = a, ["before", "error", "after", "wrap"].forEach(function(i) {
    var s = r ? [t, i, r] : [t, i];
    e[i] = e.api[i] = Fp(l3, null).apply(null, s);
  });
}
function m3() {
  var e = "h", t = {
    registry: {}
  }, r = wl.bind(null, t, e);
  return _l(r, t, e), r;
}
function bl() {
  var e = {
    registry: {}
  }, t = wl.bind(null, e);
  return _l(t, e), t;
}
var Np = !1;
function na() {
  return Np || (console.warn(
    '[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'
  ), Np = !0), bl();
}
na.Singular = m3.bind();
na.Collection = bl.bind();
Bi.exports = na;
Bi.exports.Hook = na;
Bi.exports.Singular = na.Singular;
var c3 = Bi.exports.Collection = na.Collection;
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
function kp(e) {
  return Object.prototype.toString.call(e) === "[object Object]";
}
function yl(e) {
  var t, r;
  return kp(e) === !1 ? !1 : (t = e.constructor, t === void 0 ? !0 : (r = t.prototype, !(kp(r) === !1 || r.hasOwnProperty("isPrototypeOf") === !1)));
}
function f3(e) {
  return e ? Object.keys(e).reduce((t, r) => (t[r.toLowerCase()] = e[r], t), {}) : {};
}
function El(e, t) {
  const r = Object.assign({}, e);
  return Object.keys(t).forEach((a) => {
    yl(t[a]) ? a in e ? r[a] = El(e[a], t[a]) : Object.assign(r, { [a]: t[a] }) : Object.assign(r, { [a]: t[a] });
  }), r;
}
function Ip(e) {
  for (const t in e)
    e[t] === void 0 && delete e[t];
  return e;
}
function Qn(e, t, r) {
  if (typeof t == "string") {
    let [i, s] = t.split(" ");
    r = Object.assign(s ? { method: i, url: s } : { url: i }, r);
  } else
    r = Object.assign({}, t);
  r.headers = f3(r.headers), Ip(r), Ip(r.headers);
  const a = El(e || {}, r);
  return e && e.mediaType.previews.length && (a.mediaType.previews = e.mediaType.previews.filter((i) => !a.mediaType.previews.includes(i)).concat(a.mediaType.previews)), a.mediaType.previews = a.mediaType.previews.map((i) => i.replace(/-preview/, "")), a;
}
function h3(e, t) {
  const r = /\?/.test(e) ? "&" : "?", a = Object.keys(t);
  return a.length === 0 ? e : e + r + a.map((i) => i === "q" ? "q=" + t.q.split("+").map(encodeURIComponent).join("+") : `${i}=${encodeURIComponent(t[i])}`).join("&");
}
const g3 = /\{[^}]+\}/g;
function v3(e) {
  return e.replace(/^\W+|\W+$/g, "").split(/,/);
}
function w3(e) {
  const t = e.match(g3);
  return t ? t.map(v3).reduce((r, a) => r.concat(a), []) : [];
}
function Gp(e, t) {
  return Object.keys(e).filter((r) => !t.includes(r)).reduce((r, a) => (r[a] = e[a], r), {});
}
function Tl(e) {
  return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(t) {
    return /%[0-9A-Fa-f]/.test(t) || (t = encodeURI(t).replace(/%5B/g, "[").replace(/%5D/g, "]")), t;
  }).join("");
}
function Mr(e) {
  return encodeURIComponent(e).replace(/[!'()*]/g, function(t) {
    return "%" + t.charCodeAt(0).toString(16).toUpperCase();
  });
}
function Da(e, t, r) {
  return t = e === "+" || e === "#" ? Tl(t) : Mr(t), r ? Mr(r) + "=" + t : t;
}
function xr(e) {
  return e != null;
}
function Pn(e) {
  return e === ";" || e === "&" || e === "?";
}
function _3(e, t, r, a) {
  var i = e[r], s = [];
  if (xr(i) && i !== "")
    if (typeof i == "string" || typeof i == "number" || typeof i == "boolean")
      i = i.toString(), a && a !== "*" && (i = i.substring(0, parseInt(a, 10))), s.push(Da(t, i, Pn(t) ? r : ""));
    else if (a === "*")
      Array.isArray(i) ? i.filter(xr).forEach(function(o) {
        s.push(Da(t, o, Pn(t) ? r : ""));
      }) : Object.keys(i).forEach(function(o) {
        xr(i[o]) && s.push(Da(t, i[o], o));
      });
    else {
      const o = [];
      Array.isArray(i) ? i.filter(xr).forEach(function(d) {
        o.push(Da(t, d));
      }) : Object.keys(i).forEach(function(d) {
        xr(i[d]) && (o.push(Mr(d)), o.push(Da(t, i[d].toString())));
      }), Pn(t) ? s.push(Mr(r) + "=" + o.join(",")) : o.length !== 0 && s.push(o.join(","));
    }
  else
    t === ";" ? xr(i) && s.push(Mr(r)) : i === "" && (t === "&" || t === "?") ? s.push(Mr(r) + "=") : i === "" && s.push("");
  return s;
}
function b3(e) {
  return {
    expand: y3.bind(null, e)
  };
}
function y3(e, t) {
  var r = ["+", "#", ".", "/", ";", "?", "&"];
  return e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function(a, i, s) {
    if (i) {
      let d = "";
      const l = [];
      if (r.indexOf(i.charAt(0)) !== -1 && (d = i.charAt(0), i = i.substr(1)), i.split(/,/g).forEach(function(u) {
        var c = /([^:\*]*)(?::(\d+)|(\*))?/.exec(u);
        l.push(_3(t, d, c[1], c[2] || c[3]));
      }), d && d !== "+") {
        var o = ",";
        return d === "?" ? o = "&" : d !== "#" && (o = d), (l.length !== 0 ? d : "") + l.join(o);
      } else
        return l.join(",");
    } else
      return Tl(s);
  });
}
function Sl(e) {
  let t = e.method.toUpperCase(), r = (e.url || "/").replace(/:([a-z]\w+)/g, "{$1}"), a = Object.assign({}, e.headers), i, s = Gp(e, [
    "method",
    "baseUrl",
    "url",
    "headers",
    "request",
    "mediaType"
  ]);
  const o = w3(r);
  r = b3(r).expand(s), /^http/.test(r) || (r = e.baseUrl + r);
  const d = Object.keys(e).filter((c) => o.includes(c)).concat("baseUrl"), l = Gp(s, d);
  if (!/application\/octet-stream/i.test(a.accept) && (e.mediaType.format && (a.accept = a.accept.split(/,/).map((c) => c.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${e.mediaType.format}`)).join(",")), e.mediaType.previews.length)) {
    const c = a.accept.match(/[\w-]+(?=-preview)/g) || [];
    a.accept = c.concat(e.mediaType.previews).map((v) => {
      const T = e.mediaType.format ? `.${e.mediaType.format}` : "+json";
      return `application/vnd.github.${v}-preview${T}`;
    }).join(",");
  }
  return ["GET", "HEAD"].includes(t) ? r = h3(r, l) : "data" in l ? i = l.data : Object.keys(l).length ? i = l : a["content-length"] = 0, !a["content-type"] && typeof i < "u" && (a["content-type"] = "application/json; charset=utf-8"), ["PATCH", "PUT"].includes(t) && typeof i > "u" && (i = ""), Object.assign({ method: t, url: r, headers: a }, typeof i < "u" ? { body: i } : null, e.request ? { request: e.request } : null);
}
function E3(e, t, r) {
  return Sl(Qn(e, t, r));
}
function Al(e, t) {
  const r = Qn(e, t), a = E3.bind(null, r);
  return Object.assign(a, {
    DEFAULTS: r,
    defaults: Al.bind(null, r),
    merge: Qn.bind(null, r),
    parse: Sl
  });
}
const T3 = "6.0.12", S3 = `octokit-endpoint.js/${T3} ${Pi()}`, A3 = {
  method: "GET",
  baseUrl: "https://api.github.com",
  headers: {
    accept: "application/vnd.github.v3+json",
    "user-agent": S3
  },
  mediaType: {
    format: "",
    previews: []
  }
}, C3 = Al(null, A3);
var ct = {}, Cl = { exports: {} }, we = {}, D3 = we;
function $p(e) {
  return e < 0 ? -1 : 1;
}
function R3(e) {
  return e % 1 === 0.5 && !(e & 1) ? Math.floor(e) : Math.round(e);
}
function nr(e, t) {
  t.unsigned || --e;
  const r = t.unsigned ? 0 : -Math.pow(2, e), a = Math.pow(2, e) - 1, i = t.moduloBitLength ? Math.pow(2, t.moduloBitLength) : Math.pow(2, e), s = t.moduloBitLength ? Math.pow(2, t.moduloBitLength - 1) : Math.pow(2, e - 1);
  return function(o, d) {
    d || (d = {});
    let l = +o;
    if (d.enforceRange) {
      if (!Number.isFinite(l))
        throw new TypeError("Argument is not a finite number");
      if (l = $p(l) * Math.floor(Math.abs(l)), l < r || l > a)
        throw new TypeError("Argument is not in byte range");
      return l;
    }
    if (!isNaN(l) && d.clamp)
      return l = R3(l), l < r && (l = r), l > a && (l = a), l;
    if (!Number.isFinite(l) || l === 0)
      return 0;
    if (l = $p(l) * Math.floor(Math.abs(l)), l = l % i, !t.unsigned && l >= s)
      return l - i;
    if (t.unsigned) {
      if (l < 0)
        l += i;
      else if (l === -0)
        return 0;
    }
    return l;
  };
}
we.void = function() {
};
we.boolean = function(e) {
  return !!e;
};
we.byte = nr(8, { unsigned: !1 });
we.octet = nr(8, { unsigned: !0 });
we.short = nr(16, { unsigned: !1 });
we["unsigned short"] = nr(16, { unsigned: !0 });
we.long = nr(32, { unsigned: !1 });
we["unsigned long"] = nr(32, { unsigned: !0 });
we["long long"] = nr(32, { unsigned: !1, moduloBitLength: 64 });
we["unsigned long long"] = nr(32, { unsigned: !0, moduloBitLength: 64 });
we.double = function(e) {
  const t = +e;
  if (!Number.isFinite(t))
    throw new TypeError("Argument is not a finite floating-point value");
  return t;
};
we["unrestricted double"] = function(e) {
  const t = +e;
  if (isNaN(t))
    throw new TypeError("Argument is NaN");
  return t;
};
we.float = we.double;
we["unrestricted float"] = we["unrestricted double"];
we.DOMString = function(e, t) {
  return t || (t = {}), t.treatNullAsEmptyString && e === null ? "" : String(e);
};
we.ByteString = function(e, t) {
  const r = String(e);
  let a;
  for (let i = 0; (a = r.codePointAt(i)) !== void 0; ++i)
    if (a > 255)
      throw new TypeError("Argument is not a valid bytestring");
  return r;
};
we.USVString = function(e) {
  const t = String(e), r = t.length, a = [];
  for (let i = 0; i < r; ++i) {
    const s = t.charCodeAt(i);
    if (s < 55296 || s > 57343)
      a.push(String.fromCodePoint(s));
    else if (56320 <= s && s <= 57343)
      a.push(String.fromCodePoint(65533));
    else if (i === r - 1)
      a.push(String.fromCodePoint(65533));
    else {
      const o = t.charCodeAt(i + 1);
      if (56320 <= o && o <= 57343) {
        const d = s & 1023, l = o & 1023;
        a.push(String.fromCodePoint((2 << 15) + (2 << 9) * d + l)), ++i;
      } else
        a.push(String.fromCodePoint(65533));
    }
  }
  return a.join("");
};
we.Date = function(e, t) {
  if (!(e instanceof Date))
    throw new TypeError("Argument is not a Date object");
  if (!isNaN(e))
    return e;
};
we.RegExp = function(e, t) {
  return e instanceof RegExp || (e = new RegExp(e)), e;
};
var Dl = { exports: {} };
(function(e) {
  e.exports.mixin = function(r, a) {
    const i = Object.getOwnPropertyNames(a);
    for (let s = 0; s < i.length; ++s)
      Object.defineProperty(r, i[s], Object.getOwnPropertyDescriptor(a, i[s]));
  }, e.exports.wrapperSymbol = Symbol("wrapper"), e.exports.implSymbol = Symbol("impl"), e.exports.wrapperForImpl = function(t) {
    return t[e.exports.wrapperSymbol];
  }, e.exports.implForWrapper = function(t) {
    return t[e.exports.implSymbol];
  };
})(Dl);
var O3 = Dl.exports, Rl = {}, Ol = { exports: {} };
const qr = 2147483647, yt = 36, Ss = 1, Ma = 26, P3 = 38, B3 = 700, Pl = 72, Bl = 128, Fl = "-", F3 = /^xn--/, N3 = /[^\0-\x7E]/, k3 = /[\x2E\u3002\uFF0E\uFF61]/g, I3 = {
  overflow: "Overflow: input needs wider integers to process",
  "not-basic": "Illegal input >= 0x80 (not a basic code point)",
  "invalid-input": "Invalid input"
}, Bn = yt - Ss, Et = Math.floor, Fn = String.fromCharCode;
function fr(e) {
  throw new RangeError(I3[e]);
}
function G3(e, t) {
  const r = [];
  let a = e.length;
  for (; a--; )
    r[a] = t(e[a]);
  return r;
}
function Nl(e, t) {
  const r = e.split("@");
  let a = "";
  r.length > 1 && (a = r[0] + "@", e = r[1]), e = e.replace(k3, ".");
  const i = e.split("."), s = G3(i, t).join(".");
  return a + s;
}
function As(e) {
  const t = [];
  let r = 0;
  const a = e.length;
  for (; r < a; ) {
    const i = e.charCodeAt(r++);
    if (i >= 55296 && i <= 56319 && r < a) {
      const s = e.charCodeAt(r++);
      (s & 64512) == 56320 ? t.push(((i & 1023) << 10) + (s & 1023) + 65536) : (t.push(i), r--);
    } else
      t.push(i);
  }
  return t;
}
const kl = (e) => String.fromCodePoint(...e), $3 = function(e) {
  return e - 48 < 10 ? e - 22 : e - 65 < 26 ? e - 65 : e - 97 < 26 ? e - 97 : yt;
}, Up = function(e, t) {
  return e + 22 + 75 * (e < 26) - ((t != 0) << 5);
}, Il = function(e, t, r) {
  let a = 0;
  for (e = r ? Et(e / B3) : e >> 1, e += Et(e / t); e > Bn * Ma >> 1; a += yt)
    e = Et(e / Bn);
  return Et(a + (Bn + 1) * e / (e + P3));
}, Cs = function(e) {
  const t = [], r = e.length;
  let a = 0, i = Bl, s = Pl, o = e.lastIndexOf(Fl);
  o < 0 && (o = 0);
  for (let d = 0; d < o; ++d)
    e.charCodeAt(d) >= 128 && fr("not-basic"), t.push(e.charCodeAt(d));
  for (let d = o > 0 ? o + 1 : 0; d < r; ) {
    let l = a;
    for (let c = 1, v = yt; ; v += yt) {
      d >= r && fr("invalid-input");
      const T = $3(e.charCodeAt(d++));
      (T >= yt || T > Et((qr - a) / c)) && fr("overflow"), a += T * c;
      const g = v <= s ? Ss : v >= s + Ma ? Ma : v - s;
      if (T < g)
        break;
      const w = yt - g;
      c > Et(qr / w) && fr("overflow"), c *= w;
    }
    const u = t.length + 1;
    s = Il(a - l, u, l == 0), Et(a / u) > qr - i && fr("overflow"), i += Et(a / u), a %= u, t.splice(a++, 0, i);
  }
  return String.fromCodePoint(...t);
}, Ds = function(e) {
  const t = [];
  e = As(e);
  let r = e.length, a = Bl, i = 0, s = Pl;
  for (const l of e)
    l < 128 && t.push(Fn(l));
  let o = t.length, d = o;
  for (o && t.push(Fl); d < r; ) {
    let l = qr;
    for (const c of e)
      c >= a && c < l && (l = c);
    const u = d + 1;
    l - a > Et((qr - i) / u) && fr("overflow"), i += (l - a) * u, a = l;
    for (const c of e)
      if (c < a && ++i > qr && fr("overflow"), c == a) {
        let v = i;
        for (let T = yt; ; T += yt) {
          const g = T <= s ? Ss : T >= s + Ma ? Ma : T - s;
          if (v < g)
            break;
          const w = v - g, f = yt - g;
          t.push(
            Fn(Up(g + w % f, 0))
          ), v = Et(w / f);
        }
        t.push(Fn(Up(v, 0))), s = Il(i, u, d == o), i = 0, ++d;
      }
    ++i, ++a;
  }
  return t.join("");
}, Gl = function(e) {
  return Nl(e, function(t) {
    return F3.test(t) ? Cs(t.slice(4).toLowerCase()) : t;
  });
}, $l = function(e) {
  return Nl(e, function(t) {
    return N3.test(t) ? "xn--" + Ds(t) : t;
  });
}, U3 = {
  /**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */
  version: "2.1.0",
  /**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */
  ucs2: {
    decode: As,
    encode: kl
  },
  decode: Cs,
  encode: Ds,
  toASCII: $l,
  toUnicode: Gl
}, x3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  decode: Cs,
  default: U3,
  encode: Ds,
  toASCII: $l,
  toUnicode: Gl,
  ucs2decode: As,
  ucs2encode: kl
}, Symbol.toStringTag, { value: "Module" })), Ul = /* @__PURE__ */ Ja(x3);
var Fi = {};
const V3 = [
  [
    [
      0,
      44
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      45,
      46
    ],
    "valid"
  ],
  [
    [
      47,
      47
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      48,
      57
    ],
    "valid"
  ],
  [
    [
      58,
      64
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      65,
      65
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      66,
      66
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      67,
      67
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      68,
      68
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      69,
      69
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      70,
      70
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      71,
      71
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      72,
      72
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      73,
      73
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      74,
      74
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      75,
      75
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      76,
      76
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      77,
      77
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      78,
      78
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      79,
      79
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      80,
      80
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      81,
      81
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      82,
      82
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      83,
      83
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      84,
      84
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      85,
      85
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      86,
      86
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      87,
      87
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      88,
      88
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      89,
      89
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      90,
      90
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      91,
      96
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      97,
      122
    ],
    "valid"
  ],
  [
    [
      123,
      127
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      128,
      159
    ],
    "disallowed"
  ],
  [
    [
      160,
      160
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      161,
      167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      168,
      168
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776
    ]
  ],
  [
    [
      169,
      169
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      170,
      170
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      171,
      172
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      173,
      173
    ],
    "ignored"
  ],
  [
    [
      174,
      174
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      175,
      175
    ],
    "disallowed_STD3_mapped",
    [
      32,
      772
    ]
  ],
  [
    [
      176,
      177
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      178,
      178
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      179,
      179
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      180,
      180
    ],
    "disallowed_STD3_mapped",
    [
      32,
      769
    ]
  ],
  [
    [
      181,
      181
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      182,
      182
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      183,
      183
    ],
    "valid"
  ],
  [
    [
      184,
      184
    ],
    "disallowed_STD3_mapped",
    [
      32,
      807
    ]
  ],
  [
    [
      185,
      185
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      186,
      186
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      187,
      187
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      188,
      188
    ],
    "mapped",
    [
      49,
      8260,
      52
    ]
  ],
  [
    [
      189,
      189
    ],
    "mapped",
    [
      49,
      8260,
      50
    ]
  ],
  [
    [
      190,
      190
    ],
    "mapped",
    [
      51,
      8260,
      52
    ]
  ],
  [
    [
      191,
      191
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      192,
      192
    ],
    "mapped",
    [
      224
    ]
  ],
  [
    [
      193,
      193
    ],
    "mapped",
    [
      225
    ]
  ],
  [
    [
      194,
      194
    ],
    "mapped",
    [
      226
    ]
  ],
  [
    [
      195,
      195
    ],
    "mapped",
    [
      227
    ]
  ],
  [
    [
      196,
      196
    ],
    "mapped",
    [
      228
    ]
  ],
  [
    [
      197,
      197
    ],
    "mapped",
    [
      229
    ]
  ],
  [
    [
      198,
      198
    ],
    "mapped",
    [
      230
    ]
  ],
  [
    [
      199,
      199
    ],
    "mapped",
    [
      231
    ]
  ],
  [
    [
      200,
      200
    ],
    "mapped",
    [
      232
    ]
  ],
  [
    [
      201,
      201
    ],
    "mapped",
    [
      233
    ]
  ],
  [
    [
      202,
      202
    ],
    "mapped",
    [
      234
    ]
  ],
  [
    [
      203,
      203
    ],
    "mapped",
    [
      235
    ]
  ],
  [
    [
      204,
      204
    ],
    "mapped",
    [
      236
    ]
  ],
  [
    [
      205,
      205
    ],
    "mapped",
    [
      237
    ]
  ],
  [
    [
      206,
      206
    ],
    "mapped",
    [
      238
    ]
  ],
  [
    [
      207,
      207
    ],
    "mapped",
    [
      239
    ]
  ],
  [
    [
      208,
      208
    ],
    "mapped",
    [
      240
    ]
  ],
  [
    [
      209,
      209
    ],
    "mapped",
    [
      241
    ]
  ],
  [
    [
      210,
      210
    ],
    "mapped",
    [
      242
    ]
  ],
  [
    [
      211,
      211
    ],
    "mapped",
    [
      243
    ]
  ],
  [
    [
      212,
      212
    ],
    "mapped",
    [
      244
    ]
  ],
  [
    [
      213,
      213
    ],
    "mapped",
    [
      245
    ]
  ],
  [
    [
      214,
      214
    ],
    "mapped",
    [
      246
    ]
  ],
  [
    [
      215,
      215
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      216,
      216
    ],
    "mapped",
    [
      248
    ]
  ],
  [
    [
      217,
      217
    ],
    "mapped",
    [
      249
    ]
  ],
  [
    [
      218,
      218
    ],
    "mapped",
    [
      250
    ]
  ],
  [
    [
      219,
      219
    ],
    "mapped",
    [
      251
    ]
  ],
  [
    [
      220,
      220
    ],
    "mapped",
    [
      252
    ]
  ],
  [
    [
      221,
      221
    ],
    "mapped",
    [
      253
    ]
  ],
  [
    [
      222,
      222
    ],
    "mapped",
    [
      254
    ]
  ],
  [
    [
      223,
      223
    ],
    "deviation",
    [
      115,
      115
    ]
  ],
  [
    [
      224,
      246
    ],
    "valid"
  ],
  [
    [
      247,
      247
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      248,
      255
    ],
    "valid"
  ],
  [
    [
      256,
      256
    ],
    "mapped",
    [
      257
    ]
  ],
  [
    [
      257,
      257
    ],
    "valid"
  ],
  [
    [
      258,
      258
    ],
    "mapped",
    [
      259
    ]
  ],
  [
    [
      259,
      259
    ],
    "valid"
  ],
  [
    [
      260,
      260
    ],
    "mapped",
    [
      261
    ]
  ],
  [
    [
      261,
      261
    ],
    "valid"
  ],
  [
    [
      262,
      262
    ],
    "mapped",
    [
      263
    ]
  ],
  [
    [
      263,
      263
    ],
    "valid"
  ],
  [
    [
      264,
      264
    ],
    "mapped",
    [
      265
    ]
  ],
  [
    [
      265,
      265
    ],
    "valid"
  ],
  [
    [
      266,
      266
    ],
    "mapped",
    [
      267
    ]
  ],
  [
    [
      267,
      267
    ],
    "valid"
  ],
  [
    [
      268,
      268
    ],
    "mapped",
    [
      269
    ]
  ],
  [
    [
      269,
      269
    ],
    "valid"
  ],
  [
    [
      270,
      270
    ],
    "mapped",
    [
      271
    ]
  ],
  [
    [
      271,
      271
    ],
    "valid"
  ],
  [
    [
      272,
      272
    ],
    "mapped",
    [
      273
    ]
  ],
  [
    [
      273,
      273
    ],
    "valid"
  ],
  [
    [
      274,
      274
    ],
    "mapped",
    [
      275
    ]
  ],
  [
    [
      275,
      275
    ],
    "valid"
  ],
  [
    [
      276,
      276
    ],
    "mapped",
    [
      277
    ]
  ],
  [
    [
      277,
      277
    ],
    "valid"
  ],
  [
    [
      278,
      278
    ],
    "mapped",
    [
      279
    ]
  ],
  [
    [
      279,
      279
    ],
    "valid"
  ],
  [
    [
      280,
      280
    ],
    "mapped",
    [
      281
    ]
  ],
  [
    [
      281,
      281
    ],
    "valid"
  ],
  [
    [
      282,
      282
    ],
    "mapped",
    [
      283
    ]
  ],
  [
    [
      283,
      283
    ],
    "valid"
  ],
  [
    [
      284,
      284
    ],
    "mapped",
    [
      285
    ]
  ],
  [
    [
      285,
      285
    ],
    "valid"
  ],
  [
    [
      286,
      286
    ],
    "mapped",
    [
      287
    ]
  ],
  [
    [
      287,
      287
    ],
    "valid"
  ],
  [
    [
      288,
      288
    ],
    "mapped",
    [
      289
    ]
  ],
  [
    [
      289,
      289
    ],
    "valid"
  ],
  [
    [
      290,
      290
    ],
    "mapped",
    [
      291
    ]
  ],
  [
    [
      291,
      291
    ],
    "valid"
  ],
  [
    [
      292,
      292
    ],
    "mapped",
    [
      293
    ]
  ],
  [
    [
      293,
      293
    ],
    "valid"
  ],
  [
    [
      294,
      294
    ],
    "mapped",
    [
      295
    ]
  ],
  [
    [
      295,
      295
    ],
    "valid"
  ],
  [
    [
      296,
      296
    ],
    "mapped",
    [
      297
    ]
  ],
  [
    [
      297,
      297
    ],
    "valid"
  ],
  [
    [
      298,
      298
    ],
    "mapped",
    [
      299
    ]
  ],
  [
    [
      299,
      299
    ],
    "valid"
  ],
  [
    [
      300,
      300
    ],
    "mapped",
    [
      301
    ]
  ],
  [
    [
      301,
      301
    ],
    "valid"
  ],
  [
    [
      302,
      302
    ],
    "mapped",
    [
      303
    ]
  ],
  [
    [
      303,
      303
    ],
    "valid"
  ],
  [
    [
      304,
      304
    ],
    "mapped",
    [
      105,
      775
    ]
  ],
  [
    [
      305,
      305
    ],
    "valid"
  ],
  [
    [
      306,
      307
    ],
    "mapped",
    [
      105,
      106
    ]
  ],
  [
    [
      308,
      308
    ],
    "mapped",
    [
      309
    ]
  ],
  [
    [
      309,
      309
    ],
    "valid"
  ],
  [
    [
      310,
      310
    ],
    "mapped",
    [
      311
    ]
  ],
  [
    [
      311,
      312
    ],
    "valid"
  ],
  [
    [
      313,
      313
    ],
    "mapped",
    [
      314
    ]
  ],
  [
    [
      314,
      314
    ],
    "valid"
  ],
  [
    [
      315,
      315
    ],
    "mapped",
    [
      316
    ]
  ],
  [
    [
      316,
      316
    ],
    "valid"
  ],
  [
    [
      317,
      317
    ],
    "mapped",
    [
      318
    ]
  ],
  [
    [
      318,
      318
    ],
    "valid"
  ],
  [
    [
      319,
      320
    ],
    "mapped",
    [
      108,
      183
    ]
  ],
  [
    [
      321,
      321
    ],
    "mapped",
    [
      322
    ]
  ],
  [
    [
      322,
      322
    ],
    "valid"
  ],
  [
    [
      323,
      323
    ],
    "mapped",
    [
      324
    ]
  ],
  [
    [
      324,
      324
    ],
    "valid"
  ],
  [
    [
      325,
      325
    ],
    "mapped",
    [
      326
    ]
  ],
  [
    [
      326,
      326
    ],
    "valid"
  ],
  [
    [
      327,
      327
    ],
    "mapped",
    [
      328
    ]
  ],
  [
    [
      328,
      328
    ],
    "valid"
  ],
  [
    [
      329,
      329
    ],
    "mapped",
    [
      700,
      110
    ]
  ],
  [
    [
      330,
      330
    ],
    "mapped",
    [
      331
    ]
  ],
  [
    [
      331,
      331
    ],
    "valid"
  ],
  [
    [
      332,
      332
    ],
    "mapped",
    [
      333
    ]
  ],
  [
    [
      333,
      333
    ],
    "valid"
  ],
  [
    [
      334,
      334
    ],
    "mapped",
    [
      335
    ]
  ],
  [
    [
      335,
      335
    ],
    "valid"
  ],
  [
    [
      336,
      336
    ],
    "mapped",
    [
      337
    ]
  ],
  [
    [
      337,
      337
    ],
    "valid"
  ],
  [
    [
      338,
      338
    ],
    "mapped",
    [
      339
    ]
  ],
  [
    [
      339,
      339
    ],
    "valid"
  ],
  [
    [
      340,
      340
    ],
    "mapped",
    [
      341
    ]
  ],
  [
    [
      341,
      341
    ],
    "valid"
  ],
  [
    [
      342,
      342
    ],
    "mapped",
    [
      343
    ]
  ],
  [
    [
      343,
      343
    ],
    "valid"
  ],
  [
    [
      344,
      344
    ],
    "mapped",
    [
      345
    ]
  ],
  [
    [
      345,
      345
    ],
    "valid"
  ],
  [
    [
      346,
      346
    ],
    "mapped",
    [
      347
    ]
  ],
  [
    [
      347,
      347
    ],
    "valid"
  ],
  [
    [
      348,
      348
    ],
    "mapped",
    [
      349
    ]
  ],
  [
    [
      349,
      349
    ],
    "valid"
  ],
  [
    [
      350,
      350
    ],
    "mapped",
    [
      351
    ]
  ],
  [
    [
      351,
      351
    ],
    "valid"
  ],
  [
    [
      352,
      352
    ],
    "mapped",
    [
      353
    ]
  ],
  [
    [
      353,
      353
    ],
    "valid"
  ],
  [
    [
      354,
      354
    ],
    "mapped",
    [
      355
    ]
  ],
  [
    [
      355,
      355
    ],
    "valid"
  ],
  [
    [
      356,
      356
    ],
    "mapped",
    [
      357
    ]
  ],
  [
    [
      357,
      357
    ],
    "valid"
  ],
  [
    [
      358,
      358
    ],
    "mapped",
    [
      359
    ]
  ],
  [
    [
      359,
      359
    ],
    "valid"
  ],
  [
    [
      360,
      360
    ],
    "mapped",
    [
      361
    ]
  ],
  [
    [
      361,
      361
    ],
    "valid"
  ],
  [
    [
      362,
      362
    ],
    "mapped",
    [
      363
    ]
  ],
  [
    [
      363,
      363
    ],
    "valid"
  ],
  [
    [
      364,
      364
    ],
    "mapped",
    [
      365
    ]
  ],
  [
    [
      365,
      365
    ],
    "valid"
  ],
  [
    [
      366,
      366
    ],
    "mapped",
    [
      367
    ]
  ],
  [
    [
      367,
      367
    ],
    "valid"
  ],
  [
    [
      368,
      368
    ],
    "mapped",
    [
      369
    ]
  ],
  [
    [
      369,
      369
    ],
    "valid"
  ],
  [
    [
      370,
      370
    ],
    "mapped",
    [
      371
    ]
  ],
  [
    [
      371,
      371
    ],
    "valid"
  ],
  [
    [
      372,
      372
    ],
    "mapped",
    [
      373
    ]
  ],
  [
    [
      373,
      373
    ],
    "valid"
  ],
  [
    [
      374,
      374
    ],
    "mapped",
    [
      375
    ]
  ],
  [
    [
      375,
      375
    ],
    "valid"
  ],
  [
    [
      376,
      376
    ],
    "mapped",
    [
      255
    ]
  ],
  [
    [
      377,
      377
    ],
    "mapped",
    [
      378
    ]
  ],
  [
    [
      378,
      378
    ],
    "valid"
  ],
  [
    [
      379,
      379
    ],
    "mapped",
    [
      380
    ]
  ],
  [
    [
      380,
      380
    ],
    "valid"
  ],
  [
    [
      381,
      381
    ],
    "mapped",
    [
      382
    ]
  ],
  [
    [
      382,
      382
    ],
    "valid"
  ],
  [
    [
      383,
      383
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      384,
      384
    ],
    "valid"
  ],
  [
    [
      385,
      385
    ],
    "mapped",
    [
      595
    ]
  ],
  [
    [
      386,
      386
    ],
    "mapped",
    [
      387
    ]
  ],
  [
    [
      387,
      387
    ],
    "valid"
  ],
  [
    [
      388,
      388
    ],
    "mapped",
    [
      389
    ]
  ],
  [
    [
      389,
      389
    ],
    "valid"
  ],
  [
    [
      390,
      390
    ],
    "mapped",
    [
      596
    ]
  ],
  [
    [
      391,
      391
    ],
    "mapped",
    [
      392
    ]
  ],
  [
    [
      392,
      392
    ],
    "valid"
  ],
  [
    [
      393,
      393
    ],
    "mapped",
    [
      598
    ]
  ],
  [
    [
      394,
      394
    ],
    "mapped",
    [
      599
    ]
  ],
  [
    [
      395,
      395
    ],
    "mapped",
    [
      396
    ]
  ],
  [
    [
      396,
      397
    ],
    "valid"
  ],
  [
    [
      398,
      398
    ],
    "mapped",
    [
      477
    ]
  ],
  [
    [
      399,
      399
    ],
    "mapped",
    [
      601
    ]
  ],
  [
    [
      400,
      400
    ],
    "mapped",
    [
      603
    ]
  ],
  [
    [
      401,
      401
    ],
    "mapped",
    [
      402
    ]
  ],
  [
    [
      402,
      402
    ],
    "valid"
  ],
  [
    [
      403,
      403
    ],
    "mapped",
    [
      608
    ]
  ],
  [
    [
      404,
      404
    ],
    "mapped",
    [
      611
    ]
  ],
  [
    [
      405,
      405
    ],
    "valid"
  ],
  [
    [
      406,
      406
    ],
    "mapped",
    [
      617
    ]
  ],
  [
    [
      407,
      407
    ],
    "mapped",
    [
      616
    ]
  ],
  [
    [
      408,
      408
    ],
    "mapped",
    [
      409
    ]
  ],
  [
    [
      409,
      411
    ],
    "valid"
  ],
  [
    [
      412,
      412
    ],
    "mapped",
    [
      623
    ]
  ],
  [
    [
      413,
      413
    ],
    "mapped",
    [
      626
    ]
  ],
  [
    [
      414,
      414
    ],
    "valid"
  ],
  [
    [
      415,
      415
    ],
    "mapped",
    [
      629
    ]
  ],
  [
    [
      416,
      416
    ],
    "mapped",
    [
      417
    ]
  ],
  [
    [
      417,
      417
    ],
    "valid"
  ],
  [
    [
      418,
      418
    ],
    "mapped",
    [
      419
    ]
  ],
  [
    [
      419,
      419
    ],
    "valid"
  ],
  [
    [
      420,
      420
    ],
    "mapped",
    [
      421
    ]
  ],
  [
    [
      421,
      421
    ],
    "valid"
  ],
  [
    [
      422,
      422
    ],
    "mapped",
    [
      640
    ]
  ],
  [
    [
      423,
      423
    ],
    "mapped",
    [
      424
    ]
  ],
  [
    [
      424,
      424
    ],
    "valid"
  ],
  [
    [
      425,
      425
    ],
    "mapped",
    [
      643
    ]
  ],
  [
    [
      426,
      427
    ],
    "valid"
  ],
  [
    [
      428,
      428
    ],
    "mapped",
    [
      429
    ]
  ],
  [
    [
      429,
      429
    ],
    "valid"
  ],
  [
    [
      430,
      430
    ],
    "mapped",
    [
      648
    ]
  ],
  [
    [
      431,
      431
    ],
    "mapped",
    [
      432
    ]
  ],
  [
    [
      432,
      432
    ],
    "valid"
  ],
  [
    [
      433,
      433
    ],
    "mapped",
    [
      650
    ]
  ],
  [
    [
      434,
      434
    ],
    "mapped",
    [
      651
    ]
  ],
  [
    [
      435,
      435
    ],
    "mapped",
    [
      436
    ]
  ],
  [
    [
      436,
      436
    ],
    "valid"
  ],
  [
    [
      437,
      437
    ],
    "mapped",
    [
      438
    ]
  ],
  [
    [
      438,
      438
    ],
    "valid"
  ],
  [
    [
      439,
      439
    ],
    "mapped",
    [
      658
    ]
  ],
  [
    [
      440,
      440
    ],
    "mapped",
    [
      441
    ]
  ],
  [
    [
      441,
      443
    ],
    "valid"
  ],
  [
    [
      444,
      444
    ],
    "mapped",
    [
      445
    ]
  ],
  [
    [
      445,
      451
    ],
    "valid"
  ],
  [
    [
      452,
      454
    ],
    "mapped",
    [
      100,
      382
    ]
  ],
  [
    [
      455,
      457
    ],
    "mapped",
    [
      108,
      106
    ]
  ],
  [
    [
      458,
      460
    ],
    "mapped",
    [
      110,
      106
    ]
  ],
  [
    [
      461,
      461
    ],
    "mapped",
    [
      462
    ]
  ],
  [
    [
      462,
      462
    ],
    "valid"
  ],
  [
    [
      463,
      463
    ],
    "mapped",
    [
      464
    ]
  ],
  [
    [
      464,
      464
    ],
    "valid"
  ],
  [
    [
      465,
      465
    ],
    "mapped",
    [
      466
    ]
  ],
  [
    [
      466,
      466
    ],
    "valid"
  ],
  [
    [
      467,
      467
    ],
    "mapped",
    [
      468
    ]
  ],
  [
    [
      468,
      468
    ],
    "valid"
  ],
  [
    [
      469,
      469
    ],
    "mapped",
    [
      470
    ]
  ],
  [
    [
      470,
      470
    ],
    "valid"
  ],
  [
    [
      471,
      471
    ],
    "mapped",
    [
      472
    ]
  ],
  [
    [
      472,
      472
    ],
    "valid"
  ],
  [
    [
      473,
      473
    ],
    "mapped",
    [
      474
    ]
  ],
  [
    [
      474,
      474
    ],
    "valid"
  ],
  [
    [
      475,
      475
    ],
    "mapped",
    [
      476
    ]
  ],
  [
    [
      476,
      477
    ],
    "valid"
  ],
  [
    [
      478,
      478
    ],
    "mapped",
    [
      479
    ]
  ],
  [
    [
      479,
      479
    ],
    "valid"
  ],
  [
    [
      480,
      480
    ],
    "mapped",
    [
      481
    ]
  ],
  [
    [
      481,
      481
    ],
    "valid"
  ],
  [
    [
      482,
      482
    ],
    "mapped",
    [
      483
    ]
  ],
  [
    [
      483,
      483
    ],
    "valid"
  ],
  [
    [
      484,
      484
    ],
    "mapped",
    [
      485
    ]
  ],
  [
    [
      485,
      485
    ],
    "valid"
  ],
  [
    [
      486,
      486
    ],
    "mapped",
    [
      487
    ]
  ],
  [
    [
      487,
      487
    ],
    "valid"
  ],
  [
    [
      488,
      488
    ],
    "mapped",
    [
      489
    ]
  ],
  [
    [
      489,
      489
    ],
    "valid"
  ],
  [
    [
      490,
      490
    ],
    "mapped",
    [
      491
    ]
  ],
  [
    [
      491,
      491
    ],
    "valid"
  ],
  [
    [
      492,
      492
    ],
    "mapped",
    [
      493
    ]
  ],
  [
    [
      493,
      493
    ],
    "valid"
  ],
  [
    [
      494,
      494
    ],
    "mapped",
    [
      495
    ]
  ],
  [
    [
      495,
      496
    ],
    "valid"
  ],
  [
    [
      497,
      499
    ],
    "mapped",
    [
      100,
      122
    ]
  ],
  [
    [
      500,
      500
    ],
    "mapped",
    [
      501
    ]
  ],
  [
    [
      501,
      501
    ],
    "valid"
  ],
  [
    [
      502,
      502
    ],
    "mapped",
    [
      405
    ]
  ],
  [
    [
      503,
      503
    ],
    "mapped",
    [
      447
    ]
  ],
  [
    [
      504,
      504
    ],
    "mapped",
    [
      505
    ]
  ],
  [
    [
      505,
      505
    ],
    "valid"
  ],
  [
    [
      506,
      506
    ],
    "mapped",
    [
      507
    ]
  ],
  [
    [
      507,
      507
    ],
    "valid"
  ],
  [
    [
      508,
      508
    ],
    "mapped",
    [
      509
    ]
  ],
  [
    [
      509,
      509
    ],
    "valid"
  ],
  [
    [
      510,
      510
    ],
    "mapped",
    [
      511
    ]
  ],
  [
    [
      511,
      511
    ],
    "valid"
  ],
  [
    [
      512,
      512
    ],
    "mapped",
    [
      513
    ]
  ],
  [
    [
      513,
      513
    ],
    "valid"
  ],
  [
    [
      514,
      514
    ],
    "mapped",
    [
      515
    ]
  ],
  [
    [
      515,
      515
    ],
    "valid"
  ],
  [
    [
      516,
      516
    ],
    "mapped",
    [
      517
    ]
  ],
  [
    [
      517,
      517
    ],
    "valid"
  ],
  [
    [
      518,
      518
    ],
    "mapped",
    [
      519
    ]
  ],
  [
    [
      519,
      519
    ],
    "valid"
  ],
  [
    [
      520,
      520
    ],
    "mapped",
    [
      521
    ]
  ],
  [
    [
      521,
      521
    ],
    "valid"
  ],
  [
    [
      522,
      522
    ],
    "mapped",
    [
      523
    ]
  ],
  [
    [
      523,
      523
    ],
    "valid"
  ],
  [
    [
      524,
      524
    ],
    "mapped",
    [
      525
    ]
  ],
  [
    [
      525,
      525
    ],
    "valid"
  ],
  [
    [
      526,
      526
    ],
    "mapped",
    [
      527
    ]
  ],
  [
    [
      527,
      527
    ],
    "valid"
  ],
  [
    [
      528,
      528
    ],
    "mapped",
    [
      529
    ]
  ],
  [
    [
      529,
      529
    ],
    "valid"
  ],
  [
    [
      530,
      530
    ],
    "mapped",
    [
      531
    ]
  ],
  [
    [
      531,
      531
    ],
    "valid"
  ],
  [
    [
      532,
      532
    ],
    "mapped",
    [
      533
    ]
  ],
  [
    [
      533,
      533
    ],
    "valid"
  ],
  [
    [
      534,
      534
    ],
    "mapped",
    [
      535
    ]
  ],
  [
    [
      535,
      535
    ],
    "valid"
  ],
  [
    [
      536,
      536
    ],
    "mapped",
    [
      537
    ]
  ],
  [
    [
      537,
      537
    ],
    "valid"
  ],
  [
    [
      538,
      538
    ],
    "mapped",
    [
      539
    ]
  ],
  [
    [
      539,
      539
    ],
    "valid"
  ],
  [
    [
      540,
      540
    ],
    "mapped",
    [
      541
    ]
  ],
  [
    [
      541,
      541
    ],
    "valid"
  ],
  [
    [
      542,
      542
    ],
    "mapped",
    [
      543
    ]
  ],
  [
    [
      543,
      543
    ],
    "valid"
  ],
  [
    [
      544,
      544
    ],
    "mapped",
    [
      414
    ]
  ],
  [
    [
      545,
      545
    ],
    "valid"
  ],
  [
    [
      546,
      546
    ],
    "mapped",
    [
      547
    ]
  ],
  [
    [
      547,
      547
    ],
    "valid"
  ],
  [
    [
      548,
      548
    ],
    "mapped",
    [
      549
    ]
  ],
  [
    [
      549,
      549
    ],
    "valid"
  ],
  [
    [
      550,
      550
    ],
    "mapped",
    [
      551
    ]
  ],
  [
    [
      551,
      551
    ],
    "valid"
  ],
  [
    [
      552,
      552
    ],
    "mapped",
    [
      553
    ]
  ],
  [
    [
      553,
      553
    ],
    "valid"
  ],
  [
    [
      554,
      554
    ],
    "mapped",
    [
      555
    ]
  ],
  [
    [
      555,
      555
    ],
    "valid"
  ],
  [
    [
      556,
      556
    ],
    "mapped",
    [
      557
    ]
  ],
  [
    [
      557,
      557
    ],
    "valid"
  ],
  [
    [
      558,
      558
    ],
    "mapped",
    [
      559
    ]
  ],
  [
    [
      559,
      559
    ],
    "valid"
  ],
  [
    [
      560,
      560
    ],
    "mapped",
    [
      561
    ]
  ],
  [
    [
      561,
      561
    ],
    "valid"
  ],
  [
    [
      562,
      562
    ],
    "mapped",
    [
      563
    ]
  ],
  [
    [
      563,
      563
    ],
    "valid"
  ],
  [
    [
      564,
      566
    ],
    "valid"
  ],
  [
    [
      567,
      569
    ],
    "valid"
  ],
  [
    [
      570,
      570
    ],
    "mapped",
    [
      11365
    ]
  ],
  [
    [
      571,
      571
    ],
    "mapped",
    [
      572
    ]
  ],
  [
    [
      572,
      572
    ],
    "valid"
  ],
  [
    [
      573,
      573
    ],
    "mapped",
    [
      410
    ]
  ],
  [
    [
      574,
      574
    ],
    "mapped",
    [
      11366
    ]
  ],
  [
    [
      575,
      576
    ],
    "valid"
  ],
  [
    [
      577,
      577
    ],
    "mapped",
    [
      578
    ]
  ],
  [
    [
      578,
      578
    ],
    "valid"
  ],
  [
    [
      579,
      579
    ],
    "mapped",
    [
      384
    ]
  ],
  [
    [
      580,
      580
    ],
    "mapped",
    [
      649
    ]
  ],
  [
    [
      581,
      581
    ],
    "mapped",
    [
      652
    ]
  ],
  [
    [
      582,
      582
    ],
    "mapped",
    [
      583
    ]
  ],
  [
    [
      583,
      583
    ],
    "valid"
  ],
  [
    [
      584,
      584
    ],
    "mapped",
    [
      585
    ]
  ],
  [
    [
      585,
      585
    ],
    "valid"
  ],
  [
    [
      586,
      586
    ],
    "mapped",
    [
      587
    ]
  ],
  [
    [
      587,
      587
    ],
    "valid"
  ],
  [
    [
      588,
      588
    ],
    "mapped",
    [
      589
    ]
  ],
  [
    [
      589,
      589
    ],
    "valid"
  ],
  [
    [
      590,
      590
    ],
    "mapped",
    [
      591
    ]
  ],
  [
    [
      591,
      591
    ],
    "valid"
  ],
  [
    [
      592,
      680
    ],
    "valid"
  ],
  [
    [
      681,
      685
    ],
    "valid"
  ],
  [
    [
      686,
      687
    ],
    "valid"
  ],
  [
    [
      688,
      688
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      689,
      689
    ],
    "mapped",
    [
      614
    ]
  ],
  [
    [
      690,
      690
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      691,
      691
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      692,
      692
    ],
    "mapped",
    [
      633
    ]
  ],
  [
    [
      693,
      693
    ],
    "mapped",
    [
      635
    ]
  ],
  [
    [
      694,
      694
    ],
    "mapped",
    [
      641
    ]
  ],
  [
    [
      695,
      695
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      696,
      696
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      697,
      705
    ],
    "valid"
  ],
  [
    [
      706,
      709
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      710,
      721
    ],
    "valid"
  ],
  [
    [
      722,
      727
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      728,
      728
    ],
    "disallowed_STD3_mapped",
    [
      32,
      774
    ]
  ],
  [
    [
      729,
      729
    ],
    "disallowed_STD3_mapped",
    [
      32,
      775
    ]
  ],
  [
    [
      730,
      730
    ],
    "disallowed_STD3_mapped",
    [
      32,
      778
    ]
  ],
  [
    [
      731,
      731
    ],
    "disallowed_STD3_mapped",
    [
      32,
      808
    ]
  ],
  [
    [
      732,
      732
    ],
    "disallowed_STD3_mapped",
    [
      32,
      771
    ]
  ],
  [
    [
      733,
      733
    ],
    "disallowed_STD3_mapped",
    [
      32,
      779
    ]
  ],
  [
    [
      734,
      734
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      735,
      735
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      736,
      736
    ],
    "mapped",
    [
      611
    ]
  ],
  [
    [
      737,
      737
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      738,
      738
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      739,
      739
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      740,
      740
    ],
    "mapped",
    [
      661
    ]
  ],
  [
    [
      741,
      745
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      746,
      747
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      748,
      748
    ],
    "valid"
  ],
  [
    [
      749,
      749
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      750,
      750
    ],
    "valid"
  ],
  [
    [
      751,
      767
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      768,
      831
    ],
    "valid"
  ],
  [
    [
      832,
      832
    ],
    "mapped",
    [
      768
    ]
  ],
  [
    [
      833,
      833
    ],
    "mapped",
    [
      769
    ]
  ],
  [
    [
      834,
      834
    ],
    "valid"
  ],
  [
    [
      835,
      835
    ],
    "mapped",
    [
      787
    ]
  ],
  [
    [
      836,
      836
    ],
    "mapped",
    [
      776,
      769
    ]
  ],
  [
    [
      837,
      837
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      838,
      846
    ],
    "valid"
  ],
  [
    [
      847,
      847
    ],
    "ignored"
  ],
  [
    [
      848,
      855
    ],
    "valid"
  ],
  [
    [
      856,
      860
    ],
    "valid"
  ],
  [
    [
      861,
      863
    ],
    "valid"
  ],
  [
    [
      864,
      865
    ],
    "valid"
  ],
  [
    [
      866,
      866
    ],
    "valid"
  ],
  [
    [
      867,
      879
    ],
    "valid"
  ],
  [
    [
      880,
      880
    ],
    "mapped",
    [
      881
    ]
  ],
  [
    [
      881,
      881
    ],
    "valid"
  ],
  [
    [
      882,
      882
    ],
    "mapped",
    [
      883
    ]
  ],
  [
    [
      883,
      883
    ],
    "valid"
  ],
  [
    [
      884,
      884
    ],
    "mapped",
    [
      697
    ]
  ],
  [
    [
      885,
      885
    ],
    "valid"
  ],
  [
    [
      886,
      886
    ],
    "mapped",
    [
      887
    ]
  ],
  [
    [
      887,
      887
    ],
    "valid"
  ],
  [
    [
      888,
      889
    ],
    "disallowed"
  ],
  [
    [
      890,
      890
    ],
    "disallowed_STD3_mapped",
    [
      32,
      953
    ]
  ],
  [
    [
      891,
      893
    ],
    "valid"
  ],
  [
    [
      894,
      894
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      895,
      895
    ],
    "mapped",
    [
      1011
    ]
  ],
  [
    [
      896,
      899
    ],
    "disallowed"
  ],
  [
    [
      900,
      900
    ],
    "disallowed_STD3_mapped",
    [
      32,
      769
    ]
  ],
  [
    [
      901,
      901
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      769
    ]
  ],
  [
    [
      902,
      902
    ],
    "mapped",
    [
      940
    ]
  ],
  [
    [
      903,
      903
    ],
    "mapped",
    [
      183
    ]
  ],
  [
    [
      904,
      904
    ],
    "mapped",
    [
      941
    ]
  ],
  [
    [
      905,
      905
    ],
    "mapped",
    [
      942
    ]
  ],
  [
    [
      906,
      906
    ],
    "mapped",
    [
      943
    ]
  ],
  [
    [
      907,
      907
    ],
    "disallowed"
  ],
  [
    [
      908,
      908
    ],
    "mapped",
    [
      972
    ]
  ],
  [
    [
      909,
      909
    ],
    "disallowed"
  ],
  [
    [
      910,
      910
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      911,
      911
    ],
    "mapped",
    [
      974
    ]
  ],
  [
    [
      912,
      912
    ],
    "valid"
  ],
  [
    [
      913,
      913
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      914,
      914
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      915,
      915
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      916,
      916
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      917,
      917
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      918,
      918
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      919,
      919
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      920,
      920
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      921,
      921
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      922,
      922
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      923,
      923
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      924,
      924
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      925,
      925
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      926,
      926
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      927,
      927
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      928,
      928
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      929,
      929
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      930,
      930
    ],
    "disallowed"
  ],
  [
    [
      931,
      931
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      932,
      932
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      933,
      933
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      934,
      934
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      935,
      935
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      936,
      936
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      937,
      937
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      938,
      938
    ],
    "mapped",
    [
      970
    ]
  ],
  [
    [
      939,
      939
    ],
    "mapped",
    [
      971
    ]
  ],
  [
    [
      940,
      961
    ],
    "valid"
  ],
  [
    [
      962,
      962
    ],
    "deviation",
    [
      963
    ]
  ],
  [
    [
      963,
      974
    ],
    "valid"
  ],
  [
    [
      975,
      975
    ],
    "mapped",
    [
      983
    ]
  ],
  [
    [
      976,
      976
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      977,
      977
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      978,
      978
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      979,
      979
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      980,
      980
    ],
    "mapped",
    [
      971
    ]
  ],
  [
    [
      981,
      981
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      982,
      982
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      983,
      983
    ],
    "valid"
  ],
  [
    [
      984,
      984
    ],
    "mapped",
    [
      985
    ]
  ],
  [
    [
      985,
      985
    ],
    "valid"
  ],
  [
    [
      986,
      986
    ],
    "mapped",
    [
      987
    ]
  ],
  [
    [
      987,
      987
    ],
    "valid"
  ],
  [
    [
      988,
      988
    ],
    "mapped",
    [
      989
    ]
  ],
  [
    [
      989,
      989
    ],
    "valid"
  ],
  [
    [
      990,
      990
    ],
    "mapped",
    [
      991
    ]
  ],
  [
    [
      991,
      991
    ],
    "valid"
  ],
  [
    [
      992,
      992
    ],
    "mapped",
    [
      993
    ]
  ],
  [
    [
      993,
      993
    ],
    "valid"
  ],
  [
    [
      994,
      994
    ],
    "mapped",
    [
      995
    ]
  ],
  [
    [
      995,
      995
    ],
    "valid"
  ],
  [
    [
      996,
      996
    ],
    "mapped",
    [
      997
    ]
  ],
  [
    [
      997,
      997
    ],
    "valid"
  ],
  [
    [
      998,
      998
    ],
    "mapped",
    [
      999
    ]
  ],
  [
    [
      999,
      999
    ],
    "valid"
  ],
  [
    [
      1e3,
      1e3
    ],
    "mapped",
    [
      1001
    ]
  ],
  [
    [
      1001,
      1001
    ],
    "valid"
  ],
  [
    [
      1002,
      1002
    ],
    "mapped",
    [
      1003
    ]
  ],
  [
    [
      1003,
      1003
    ],
    "valid"
  ],
  [
    [
      1004,
      1004
    ],
    "mapped",
    [
      1005
    ]
  ],
  [
    [
      1005,
      1005
    ],
    "valid"
  ],
  [
    [
      1006,
      1006
    ],
    "mapped",
    [
      1007
    ]
  ],
  [
    [
      1007,
      1007
    ],
    "valid"
  ],
  [
    [
      1008,
      1008
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      1009,
      1009
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      1010,
      1010
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      1011,
      1011
    ],
    "valid"
  ],
  [
    [
      1012,
      1012
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      1013,
      1013
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      1014,
      1014
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1015,
      1015
    ],
    "mapped",
    [
      1016
    ]
  ],
  [
    [
      1016,
      1016
    ],
    "valid"
  ],
  [
    [
      1017,
      1017
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      1018,
      1018
    ],
    "mapped",
    [
      1019
    ]
  ],
  [
    [
      1019,
      1019
    ],
    "valid"
  ],
  [
    [
      1020,
      1020
    ],
    "valid"
  ],
  [
    [
      1021,
      1021
    ],
    "mapped",
    [
      891
    ]
  ],
  [
    [
      1022,
      1022
    ],
    "mapped",
    [
      892
    ]
  ],
  [
    [
      1023,
      1023
    ],
    "mapped",
    [
      893
    ]
  ],
  [
    [
      1024,
      1024
    ],
    "mapped",
    [
      1104
    ]
  ],
  [
    [
      1025,
      1025
    ],
    "mapped",
    [
      1105
    ]
  ],
  [
    [
      1026,
      1026
    ],
    "mapped",
    [
      1106
    ]
  ],
  [
    [
      1027,
      1027
    ],
    "mapped",
    [
      1107
    ]
  ],
  [
    [
      1028,
      1028
    ],
    "mapped",
    [
      1108
    ]
  ],
  [
    [
      1029,
      1029
    ],
    "mapped",
    [
      1109
    ]
  ],
  [
    [
      1030,
      1030
    ],
    "mapped",
    [
      1110
    ]
  ],
  [
    [
      1031,
      1031
    ],
    "mapped",
    [
      1111
    ]
  ],
  [
    [
      1032,
      1032
    ],
    "mapped",
    [
      1112
    ]
  ],
  [
    [
      1033,
      1033
    ],
    "mapped",
    [
      1113
    ]
  ],
  [
    [
      1034,
      1034
    ],
    "mapped",
    [
      1114
    ]
  ],
  [
    [
      1035,
      1035
    ],
    "mapped",
    [
      1115
    ]
  ],
  [
    [
      1036,
      1036
    ],
    "mapped",
    [
      1116
    ]
  ],
  [
    [
      1037,
      1037
    ],
    "mapped",
    [
      1117
    ]
  ],
  [
    [
      1038,
      1038
    ],
    "mapped",
    [
      1118
    ]
  ],
  [
    [
      1039,
      1039
    ],
    "mapped",
    [
      1119
    ]
  ],
  [
    [
      1040,
      1040
    ],
    "mapped",
    [
      1072
    ]
  ],
  [
    [
      1041,
      1041
    ],
    "mapped",
    [
      1073
    ]
  ],
  [
    [
      1042,
      1042
    ],
    "mapped",
    [
      1074
    ]
  ],
  [
    [
      1043,
      1043
    ],
    "mapped",
    [
      1075
    ]
  ],
  [
    [
      1044,
      1044
    ],
    "mapped",
    [
      1076
    ]
  ],
  [
    [
      1045,
      1045
    ],
    "mapped",
    [
      1077
    ]
  ],
  [
    [
      1046,
      1046
    ],
    "mapped",
    [
      1078
    ]
  ],
  [
    [
      1047,
      1047
    ],
    "mapped",
    [
      1079
    ]
  ],
  [
    [
      1048,
      1048
    ],
    "mapped",
    [
      1080
    ]
  ],
  [
    [
      1049,
      1049
    ],
    "mapped",
    [
      1081
    ]
  ],
  [
    [
      1050,
      1050
    ],
    "mapped",
    [
      1082
    ]
  ],
  [
    [
      1051,
      1051
    ],
    "mapped",
    [
      1083
    ]
  ],
  [
    [
      1052,
      1052
    ],
    "mapped",
    [
      1084
    ]
  ],
  [
    [
      1053,
      1053
    ],
    "mapped",
    [
      1085
    ]
  ],
  [
    [
      1054,
      1054
    ],
    "mapped",
    [
      1086
    ]
  ],
  [
    [
      1055,
      1055
    ],
    "mapped",
    [
      1087
    ]
  ],
  [
    [
      1056,
      1056
    ],
    "mapped",
    [
      1088
    ]
  ],
  [
    [
      1057,
      1057
    ],
    "mapped",
    [
      1089
    ]
  ],
  [
    [
      1058,
      1058
    ],
    "mapped",
    [
      1090
    ]
  ],
  [
    [
      1059,
      1059
    ],
    "mapped",
    [
      1091
    ]
  ],
  [
    [
      1060,
      1060
    ],
    "mapped",
    [
      1092
    ]
  ],
  [
    [
      1061,
      1061
    ],
    "mapped",
    [
      1093
    ]
  ],
  [
    [
      1062,
      1062
    ],
    "mapped",
    [
      1094
    ]
  ],
  [
    [
      1063,
      1063
    ],
    "mapped",
    [
      1095
    ]
  ],
  [
    [
      1064,
      1064
    ],
    "mapped",
    [
      1096
    ]
  ],
  [
    [
      1065,
      1065
    ],
    "mapped",
    [
      1097
    ]
  ],
  [
    [
      1066,
      1066
    ],
    "mapped",
    [
      1098
    ]
  ],
  [
    [
      1067,
      1067
    ],
    "mapped",
    [
      1099
    ]
  ],
  [
    [
      1068,
      1068
    ],
    "mapped",
    [
      1100
    ]
  ],
  [
    [
      1069,
      1069
    ],
    "mapped",
    [
      1101
    ]
  ],
  [
    [
      1070,
      1070
    ],
    "mapped",
    [
      1102
    ]
  ],
  [
    [
      1071,
      1071
    ],
    "mapped",
    [
      1103
    ]
  ],
  [
    [
      1072,
      1103
    ],
    "valid"
  ],
  [
    [
      1104,
      1104
    ],
    "valid"
  ],
  [
    [
      1105,
      1116
    ],
    "valid"
  ],
  [
    [
      1117,
      1117
    ],
    "valid"
  ],
  [
    [
      1118,
      1119
    ],
    "valid"
  ],
  [
    [
      1120,
      1120
    ],
    "mapped",
    [
      1121
    ]
  ],
  [
    [
      1121,
      1121
    ],
    "valid"
  ],
  [
    [
      1122,
      1122
    ],
    "mapped",
    [
      1123
    ]
  ],
  [
    [
      1123,
      1123
    ],
    "valid"
  ],
  [
    [
      1124,
      1124
    ],
    "mapped",
    [
      1125
    ]
  ],
  [
    [
      1125,
      1125
    ],
    "valid"
  ],
  [
    [
      1126,
      1126
    ],
    "mapped",
    [
      1127
    ]
  ],
  [
    [
      1127,
      1127
    ],
    "valid"
  ],
  [
    [
      1128,
      1128
    ],
    "mapped",
    [
      1129
    ]
  ],
  [
    [
      1129,
      1129
    ],
    "valid"
  ],
  [
    [
      1130,
      1130
    ],
    "mapped",
    [
      1131
    ]
  ],
  [
    [
      1131,
      1131
    ],
    "valid"
  ],
  [
    [
      1132,
      1132
    ],
    "mapped",
    [
      1133
    ]
  ],
  [
    [
      1133,
      1133
    ],
    "valid"
  ],
  [
    [
      1134,
      1134
    ],
    "mapped",
    [
      1135
    ]
  ],
  [
    [
      1135,
      1135
    ],
    "valid"
  ],
  [
    [
      1136,
      1136
    ],
    "mapped",
    [
      1137
    ]
  ],
  [
    [
      1137,
      1137
    ],
    "valid"
  ],
  [
    [
      1138,
      1138
    ],
    "mapped",
    [
      1139
    ]
  ],
  [
    [
      1139,
      1139
    ],
    "valid"
  ],
  [
    [
      1140,
      1140
    ],
    "mapped",
    [
      1141
    ]
  ],
  [
    [
      1141,
      1141
    ],
    "valid"
  ],
  [
    [
      1142,
      1142
    ],
    "mapped",
    [
      1143
    ]
  ],
  [
    [
      1143,
      1143
    ],
    "valid"
  ],
  [
    [
      1144,
      1144
    ],
    "mapped",
    [
      1145
    ]
  ],
  [
    [
      1145,
      1145
    ],
    "valid"
  ],
  [
    [
      1146,
      1146
    ],
    "mapped",
    [
      1147
    ]
  ],
  [
    [
      1147,
      1147
    ],
    "valid"
  ],
  [
    [
      1148,
      1148
    ],
    "mapped",
    [
      1149
    ]
  ],
  [
    [
      1149,
      1149
    ],
    "valid"
  ],
  [
    [
      1150,
      1150
    ],
    "mapped",
    [
      1151
    ]
  ],
  [
    [
      1151,
      1151
    ],
    "valid"
  ],
  [
    [
      1152,
      1152
    ],
    "mapped",
    [
      1153
    ]
  ],
  [
    [
      1153,
      1153
    ],
    "valid"
  ],
  [
    [
      1154,
      1154
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1155,
      1158
    ],
    "valid"
  ],
  [
    [
      1159,
      1159
    ],
    "valid"
  ],
  [
    [
      1160,
      1161
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1162,
      1162
    ],
    "mapped",
    [
      1163
    ]
  ],
  [
    [
      1163,
      1163
    ],
    "valid"
  ],
  [
    [
      1164,
      1164
    ],
    "mapped",
    [
      1165
    ]
  ],
  [
    [
      1165,
      1165
    ],
    "valid"
  ],
  [
    [
      1166,
      1166
    ],
    "mapped",
    [
      1167
    ]
  ],
  [
    [
      1167,
      1167
    ],
    "valid"
  ],
  [
    [
      1168,
      1168
    ],
    "mapped",
    [
      1169
    ]
  ],
  [
    [
      1169,
      1169
    ],
    "valid"
  ],
  [
    [
      1170,
      1170
    ],
    "mapped",
    [
      1171
    ]
  ],
  [
    [
      1171,
      1171
    ],
    "valid"
  ],
  [
    [
      1172,
      1172
    ],
    "mapped",
    [
      1173
    ]
  ],
  [
    [
      1173,
      1173
    ],
    "valid"
  ],
  [
    [
      1174,
      1174
    ],
    "mapped",
    [
      1175
    ]
  ],
  [
    [
      1175,
      1175
    ],
    "valid"
  ],
  [
    [
      1176,
      1176
    ],
    "mapped",
    [
      1177
    ]
  ],
  [
    [
      1177,
      1177
    ],
    "valid"
  ],
  [
    [
      1178,
      1178
    ],
    "mapped",
    [
      1179
    ]
  ],
  [
    [
      1179,
      1179
    ],
    "valid"
  ],
  [
    [
      1180,
      1180
    ],
    "mapped",
    [
      1181
    ]
  ],
  [
    [
      1181,
      1181
    ],
    "valid"
  ],
  [
    [
      1182,
      1182
    ],
    "mapped",
    [
      1183
    ]
  ],
  [
    [
      1183,
      1183
    ],
    "valid"
  ],
  [
    [
      1184,
      1184
    ],
    "mapped",
    [
      1185
    ]
  ],
  [
    [
      1185,
      1185
    ],
    "valid"
  ],
  [
    [
      1186,
      1186
    ],
    "mapped",
    [
      1187
    ]
  ],
  [
    [
      1187,
      1187
    ],
    "valid"
  ],
  [
    [
      1188,
      1188
    ],
    "mapped",
    [
      1189
    ]
  ],
  [
    [
      1189,
      1189
    ],
    "valid"
  ],
  [
    [
      1190,
      1190
    ],
    "mapped",
    [
      1191
    ]
  ],
  [
    [
      1191,
      1191
    ],
    "valid"
  ],
  [
    [
      1192,
      1192
    ],
    "mapped",
    [
      1193
    ]
  ],
  [
    [
      1193,
      1193
    ],
    "valid"
  ],
  [
    [
      1194,
      1194
    ],
    "mapped",
    [
      1195
    ]
  ],
  [
    [
      1195,
      1195
    ],
    "valid"
  ],
  [
    [
      1196,
      1196
    ],
    "mapped",
    [
      1197
    ]
  ],
  [
    [
      1197,
      1197
    ],
    "valid"
  ],
  [
    [
      1198,
      1198
    ],
    "mapped",
    [
      1199
    ]
  ],
  [
    [
      1199,
      1199
    ],
    "valid"
  ],
  [
    [
      1200,
      1200
    ],
    "mapped",
    [
      1201
    ]
  ],
  [
    [
      1201,
      1201
    ],
    "valid"
  ],
  [
    [
      1202,
      1202
    ],
    "mapped",
    [
      1203
    ]
  ],
  [
    [
      1203,
      1203
    ],
    "valid"
  ],
  [
    [
      1204,
      1204
    ],
    "mapped",
    [
      1205
    ]
  ],
  [
    [
      1205,
      1205
    ],
    "valid"
  ],
  [
    [
      1206,
      1206
    ],
    "mapped",
    [
      1207
    ]
  ],
  [
    [
      1207,
      1207
    ],
    "valid"
  ],
  [
    [
      1208,
      1208
    ],
    "mapped",
    [
      1209
    ]
  ],
  [
    [
      1209,
      1209
    ],
    "valid"
  ],
  [
    [
      1210,
      1210
    ],
    "mapped",
    [
      1211
    ]
  ],
  [
    [
      1211,
      1211
    ],
    "valid"
  ],
  [
    [
      1212,
      1212
    ],
    "mapped",
    [
      1213
    ]
  ],
  [
    [
      1213,
      1213
    ],
    "valid"
  ],
  [
    [
      1214,
      1214
    ],
    "mapped",
    [
      1215
    ]
  ],
  [
    [
      1215,
      1215
    ],
    "valid"
  ],
  [
    [
      1216,
      1216
    ],
    "disallowed"
  ],
  [
    [
      1217,
      1217
    ],
    "mapped",
    [
      1218
    ]
  ],
  [
    [
      1218,
      1218
    ],
    "valid"
  ],
  [
    [
      1219,
      1219
    ],
    "mapped",
    [
      1220
    ]
  ],
  [
    [
      1220,
      1220
    ],
    "valid"
  ],
  [
    [
      1221,
      1221
    ],
    "mapped",
    [
      1222
    ]
  ],
  [
    [
      1222,
      1222
    ],
    "valid"
  ],
  [
    [
      1223,
      1223
    ],
    "mapped",
    [
      1224
    ]
  ],
  [
    [
      1224,
      1224
    ],
    "valid"
  ],
  [
    [
      1225,
      1225
    ],
    "mapped",
    [
      1226
    ]
  ],
  [
    [
      1226,
      1226
    ],
    "valid"
  ],
  [
    [
      1227,
      1227
    ],
    "mapped",
    [
      1228
    ]
  ],
  [
    [
      1228,
      1228
    ],
    "valid"
  ],
  [
    [
      1229,
      1229
    ],
    "mapped",
    [
      1230
    ]
  ],
  [
    [
      1230,
      1230
    ],
    "valid"
  ],
  [
    [
      1231,
      1231
    ],
    "valid"
  ],
  [
    [
      1232,
      1232
    ],
    "mapped",
    [
      1233
    ]
  ],
  [
    [
      1233,
      1233
    ],
    "valid"
  ],
  [
    [
      1234,
      1234
    ],
    "mapped",
    [
      1235
    ]
  ],
  [
    [
      1235,
      1235
    ],
    "valid"
  ],
  [
    [
      1236,
      1236
    ],
    "mapped",
    [
      1237
    ]
  ],
  [
    [
      1237,
      1237
    ],
    "valid"
  ],
  [
    [
      1238,
      1238
    ],
    "mapped",
    [
      1239
    ]
  ],
  [
    [
      1239,
      1239
    ],
    "valid"
  ],
  [
    [
      1240,
      1240
    ],
    "mapped",
    [
      1241
    ]
  ],
  [
    [
      1241,
      1241
    ],
    "valid"
  ],
  [
    [
      1242,
      1242
    ],
    "mapped",
    [
      1243
    ]
  ],
  [
    [
      1243,
      1243
    ],
    "valid"
  ],
  [
    [
      1244,
      1244
    ],
    "mapped",
    [
      1245
    ]
  ],
  [
    [
      1245,
      1245
    ],
    "valid"
  ],
  [
    [
      1246,
      1246
    ],
    "mapped",
    [
      1247
    ]
  ],
  [
    [
      1247,
      1247
    ],
    "valid"
  ],
  [
    [
      1248,
      1248
    ],
    "mapped",
    [
      1249
    ]
  ],
  [
    [
      1249,
      1249
    ],
    "valid"
  ],
  [
    [
      1250,
      1250
    ],
    "mapped",
    [
      1251
    ]
  ],
  [
    [
      1251,
      1251
    ],
    "valid"
  ],
  [
    [
      1252,
      1252
    ],
    "mapped",
    [
      1253
    ]
  ],
  [
    [
      1253,
      1253
    ],
    "valid"
  ],
  [
    [
      1254,
      1254
    ],
    "mapped",
    [
      1255
    ]
  ],
  [
    [
      1255,
      1255
    ],
    "valid"
  ],
  [
    [
      1256,
      1256
    ],
    "mapped",
    [
      1257
    ]
  ],
  [
    [
      1257,
      1257
    ],
    "valid"
  ],
  [
    [
      1258,
      1258
    ],
    "mapped",
    [
      1259
    ]
  ],
  [
    [
      1259,
      1259
    ],
    "valid"
  ],
  [
    [
      1260,
      1260
    ],
    "mapped",
    [
      1261
    ]
  ],
  [
    [
      1261,
      1261
    ],
    "valid"
  ],
  [
    [
      1262,
      1262
    ],
    "mapped",
    [
      1263
    ]
  ],
  [
    [
      1263,
      1263
    ],
    "valid"
  ],
  [
    [
      1264,
      1264
    ],
    "mapped",
    [
      1265
    ]
  ],
  [
    [
      1265,
      1265
    ],
    "valid"
  ],
  [
    [
      1266,
      1266
    ],
    "mapped",
    [
      1267
    ]
  ],
  [
    [
      1267,
      1267
    ],
    "valid"
  ],
  [
    [
      1268,
      1268
    ],
    "mapped",
    [
      1269
    ]
  ],
  [
    [
      1269,
      1269
    ],
    "valid"
  ],
  [
    [
      1270,
      1270
    ],
    "mapped",
    [
      1271
    ]
  ],
  [
    [
      1271,
      1271
    ],
    "valid"
  ],
  [
    [
      1272,
      1272
    ],
    "mapped",
    [
      1273
    ]
  ],
  [
    [
      1273,
      1273
    ],
    "valid"
  ],
  [
    [
      1274,
      1274
    ],
    "mapped",
    [
      1275
    ]
  ],
  [
    [
      1275,
      1275
    ],
    "valid"
  ],
  [
    [
      1276,
      1276
    ],
    "mapped",
    [
      1277
    ]
  ],
  [
    [
      1277,
      1277
    ],
    "valid"
  ],
  [
    [
      1278,
      1278
    ],
    "mapped",
    [
      1279
    ]
  ],
  [
    [
      1279,
      1279
    ],
    "valid"
  ],
  [
    [
      1280,
      1280
    ],
    "mapped",
    [
      1281
    ]
  ],
  [
    [
      1281,
      1281
    ],
    "valid"
  ],
  [
    [
      1282,
      1282
    ],
    "mapped",
    [
      1283
    ]
  ],
  [
    [
      1283,
      1283
    ],
    "valid"
  ],
  [
    [
      1284,
      1284
    ],
    "mapped",
    [
      1285
    ]
  ],
  [
    [
      1285,
      1285
    ],
    "valid"
  ],
  [
    [
      1286,
      1286
    ],
    "mapped",
    [
      1287
    ]
  ],
  [
    [
      1287,
      1287
    ],
    "valid"
  ],
  [
    [
      1288,
      1288
    ],
    "mapped",
    [
      1289
    ]
  ],
  [
    [
      1289,
      1289
    ],
    "valid"
  ],
  [
    [
      1290,
      1290
    ],
    "mapped",
    [
      1291
    ]
  ],
  [
    [
      1291,
      1291
    ],
    "valid"
  ],
  [
    [
      1292,
      1292
    ],
    "mapped",
    [
      1293
    ]
  ],
  [
    [
      1293,
      1293
    ],
    "valid"
  ],
  [
    [
      1294,
      1294
    ],
    "mapped",
    [
      1295
    ]
  ],
  [
    [
      1295,
      1295
    ],
    "valid"
  ],
  [
    [
      1296,
      1296
    ],
    "mapped",
    [
      1297
    ]
  ],
  [
    [
      1297,
      1297
    ],
    "valid"
  ],
  [
    [
      1298,
      1298
    ],
    "mapped",
    [
      1299
    ]
  ],
  [
    [
      1299,
      1299
    ],
    "valid"
  ],
  [
    [
      1300,
      1300
    ],
    "mapped",
    [
      1301
    ]
  ],
  [
    [
      1301,
      1301
    ],
    "valid"
  ],
  [
    [
      1302,
      1302
    ],
    "mapped",
    [
      1303
    ]
  ],
  [
    [
      1303,
      1303
    ],
    "valid"
  ],
  [
    [
      1304,
      1304
    ],
    "mapped",
    [
      1305
    ]
  ],
  [
    [
      1305,
      1305
    ],
    "valid"
  ],
  [
    [
      1306,
      1306
    ],
    "mapped",
    [
      1307
    ]
  ],
  [
    [
      1307,
      1307
    ],
    "valid"
  ],
  [
    [
      1308,
      1308
    ],
    "mapped",
    [
      1309
    ]
  ],
  [
    [
      1309,
      1309
    ],
    "valid"
  ],
  [
    [
      1310,
      1310
    ],
    "mapped",
    [
      1311
    ]
  ],
  [
    [
      1311,
      1311
    ],
    "valid"
  ],
  [
    [
      1312,
      1312
    ],
    "mapped",
    [
      1313
    ]
  ],
  [
    [
      1313,
      1313
    ],
    "valid"
  ],
  [
    [
      1314,
      1314
    ],
    "mapped",
    [
      1315
    ]
  ],
  [
    [
      1315,
      1315
    ],
    "valid"
  ],
  [
    [
      1316,
      1316
    ],
    "mapped",
    [
      1317
    ]
  ],
  [
    [
      1317,
      1317
    ],
    "valid"
  ],
  [
    [
      1318,
      1318
    ],
    "mapped",
    [
      1319
    ]
  ],
  [
    [
      1319,
      1319
    ],
    "valid"
  ],
  [
    [
      1320,
      1320
    ],
    "mapped",
    [
      1321
    ]
  ],
  [
    [
      1321,
      1321
    ],
    "valid"
  ],
  [
    [
      1322,
      1322
    ],
    "mapped",
    [
      1323
    ]
  ],
  [
    [
      1323,
      1323
    ],
    "valid"
  ],
  [
    [
      1324,
      1324
    ],
    "mapped",
    [
      1325
    ]
  ],
  [
    [
      1325,
      1325
    ],
    "valid"
  ],
  [
    [
      1326,
      1326
    ],
    "mapped",
    [
      1327
    ]
  ],
  [
    [
      1327,
      1327
    ],
    "valid"
  ],
  [
    [
      1328,
      1328
    ],
    "disallowed"
  ],
  [
    [
      1329,
      1329
    ],
    "mapped",
    [
      1377
    ]
  ],
  [
    [
      1330,
      1330
    ],
    "mapped",
    [
      1378
    ]
  ],
  [
    [
      1331,
      1331
    ],
    "mapped",
    [
      1379
    ]
  ],
  [
    [
      1332,
      1332
    ],
    "mapped",
    [
      1380
    ]
  ],
  [
    [
      1333,
      1333
    ],
    "mapped",
    [
      1381
    ]
  ],
  [
    [
      1334,
      1334
    ],
    "mapped",
    [
      1382
    ]
  ],
  [
    [
      1335,
      1335
    ],
    "mapped",
    [
      1383
    ]
  ],
  [
    [
      1336,
      1336
    ],
    "mapped",
    [
      1384
    ]
  ],
  [
    [
      1337,
      1337
    ],
    "mapped",
    [
      1385
    ]
  ],
  [
    [
      1338,
      1338
    ],
    "mapped",
    [
      1386
    ]
  ],
  [
    [
      1339,
      1339
    ],
    "mapped",
    [
      1387
    ]
  ],
  [
    [
      1340,
      1340
    ],
    "mapped",
    [
      1388
    ]
  ],
  [
    [
      1341,
      1341
    ],
    "mapped",
    [
      1389
    ]
  ],
  [
    [
      1342,
      1342
    ],
    "mapped",
    [
      1390
    ]
  ],
  [
    [
      1343,
      1343
    ],
    "mapped",
    [
      1391
    ]
  ],
  [
    [
      1344,
      1344
    ],
    "mapped",
    [
      1392
    ]
  ],
  [
    [
      1345,
      1345
    ],
    "mapped",
    [
      1393
    ]
  ],
  [
    [
      1346,
      1346
    ],
    "mapped",
    [
      1394
    ]
  ],
  [
    [
      1347,
      1347
    ],
    "mapped",
    [
      1395
    ]
  ],
  [
    [
      1348,
      1348
    ],
    "mapped",
    [
      1396
    ]
  ],
  [
    [
      1349,
      1349
    ],
    "mapped",
    [
      1397
    ]
  ],
  [
    [
      1350,
      1350
    ],
    "mapped",
    [
      1398
    ]
  ],
  [
    [
      1351,
      1351
    ],
    "mapped",
    [
      1399
    ]
  ],
  [
    [
      1352,
      1352
    ],
    "mapped",
    [
      1400
    ]
  ],
  [
    [
      1353,
      1353
    ],
    "mapped",
    [
      1401
    ]
  ],
  [
    [
      1354,
      1354
    ],
    "mapped",
    [
      1402
    ]
  ],
  [
    [
      1355,
      1355
    ],
    "mapped",
    [
      1403
    ]
  ],
  [
    [
      1356,
      1356
    ],
    "mapped",
    [
      1404
    ]
  ],
  [
    [
      1357,
      1357
    ],
    "mapped",
    [
      1405
    ]
  ],
  [
    [
      1358,
      1358
    ],
    "mapped",
    [
      1406
    ]
  ],
  [
    [
      1359,
      1359
    ],
    "mapped",
    [
      1407
    ]
  ],
  [
    [
      1360,
      1360
    ],
    "mapped",
    [
      1408
    ]
  ],
  [
    [
      1361,
      1361
    ],
    "mapped",
    [
      1409
    ]
  ],
  [
    [
      1362,
      1362
    ],
    "mapped",
    [
      1410
    ]
  ],
  [
    [
      1363,
      1363
    ],
    "mapped",
    [
      1411
    ]
  ],
  [
    [
      1364,
      1364
    ],
    "mapped",
    [
      1412
    ]
  ],
  [
    [
      1365,
      1365
    ],
    "mapped",
    [
      1413
    ]
  ],
  [
    [
      1366,
      1366
    ],
    "mapped",
    [
      1414
    ]
  ],
  [
    [
      1367,
      1368
    ],
    "disallowed"
  ],
  [
    [
      1369,
      1369
    ],
    "valid"
  ],
  [
    [
      1370,
      1375
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1376,
      1376
    ],
    "disallowed"
  ],
  [
    [
      1377,
      1414
    ],
    "valid"
  ],
  [
    [
      1415,
      1415
    ],
    "mapped",
    [
      1381,
      1410
    ]
  ],
  [
    [
      1416,
      1416
    ],
    "disallowed"
  ],
  [
    [
      1417,
      1417
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1418,
      1418
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1419,
      1420
    ],
    "disallowed"
  ],
  [
    [
      1421,
      1422
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1423,
      1423
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1424,
      1424
    ],
    "disallowed"
  ],
  [
    [
      1425,
      1441
    ],
    "valid"
  ],
  [
    [
      1442,
      1442
    ],
    "valid"
  ],
  [
    [
      1443,
      1455
    ],
    "valid"
  ],
  [
    [
      1456,
      1465
    ],
    "valid"
  ],
  [
    [
      1466,
      1466
    ],
    "valid"
  ],
  [
    [
      1467,
      1469
    ],
    "valid"
  ],
  [
    [
      1470,
      1470
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1471,
      1471
    ],
    "valid"
  ],
  [
    [
      1472,
      1472
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1473,
      1474
    ],
    "valid"
  ],
  [
    [
      1475,
      1475
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1476,
      1476
    ],
    "valid"
  ],
  [
    [
      1477,
      1477
    ],
    "valid"
  ],
  [
    [
      1478,
      1478
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1479,
      1479
    ],
    "valid"
  ],
  [
    [
      1480,
      1487
    ],
    "disallowed"
  ],
  [
    [
      1488,
      1514
    ],
    "valid"
  ],
  [
    [
      1515,
      1519
    ],
    "disallowed"
  ],
  [
    [
      1520,
      1524
    ],
    "valid"
  ],
  [
    [
      1525,
      1535
    ],
    "disallowed"
  ],
  [
    [
      1536,
      1539
    ],
    "disallowed"
  ],
  [
    [
      1540,
      1540
    ],
    "disallowed"
  ],
  [
    [
      1541,
      1541
    ],
    "disallowed"
  ],
  [
    [
      1542,
      1546
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1547,
      1547
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1548,
      1548
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1549,
      1551
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1552,
      1557
    ],
    "valid"
  ],
  [
    [
      1558,
      1562
    ],
    "valid"
  ],
  [
    [
      1563,
      1563
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1564,
      1564
    ],
    "disallowed"
  ],
  [
    [
      1565,
      1565
    ],
    "disallowed"
  ],
  [
    [
      1566,
      1566
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1567,
      1567
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1568,
      1568
    ],
    "valid"
  ],
  [
    [
      1569,
      1594
    ],
    "valid"
  ],
  [
    [
      1595,
      1599
    ],
    "valid"
  ],
  [
    [
      1600,
      1600
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1601,
      1618
    ],
    "valid"
  ],
  [
    [
      1619,
      1621
    ],
    "valid"
  ],
  [
    [
      1622,
      1624
    ],
    "valid"
  ],
  [
    [
      1625,
      1630
    ],
    "valid"
  ],
  [
    [
      1631,
      1631
    ],
    "valid"
  ],
  [
    [
      1632,
      1641
    ],
    "valid"
  ],
  [
    [
      1642,
      1645
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1646,
      1647
    ],
    "valid"
  ],
  [
    [
      1648,
      1652
    ],
    "valid"
  ],
  [
    [
      1653,
      1653
    ],
    "mapped",
    [
      1575,
      1652
    ]
  ],
  [
    [
      1654,
      1654
    ],
    "mapped",
    [
      1608,
      1652
    ]
  ],
  [
    [
      1655,
      1655
    ],
    "mapped",
    [
      1735,
      1652
    ]
  ],
  [
    [
      1656,
      1656
    ],
    "mapped",
    [
      1610,
      1652
    ]
  ],
  [
    [
      1657,
      1719
    ],
    "valid"
  ],
  [
    [
      1720,
      1721
    ],
    "valid"
  ],
  [
    [
      1722,
      1726
    ],
    "valid"
  ],
  [
    [
      1727,
      1727
    ],
    "valid"
  ],
  [
    [
      1728,
      1742
    ],
    "valid"
  ],
  [
    [
      1743,
      1743
    ],
    "valid"
  ],
  [
    [
      1744,
      1747
    ],
    "valid"
  ],
  [
    [
      1748,
      1748
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1749,
      1756
    ],
    "valid"
  ],
  [
    [
      1757,
      1757
    ],
    "disallowed"
  ],
  [
    [
      1758,
      1758
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1759,
      1768
    ],
    "valid"
  ],
  [
    [
      1769,
      1769
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1770,
      1773
    ],
    "valid"
  ],
  [
    [
      1774,
      1775
    ],
    "valid"
  ],
  [
    [
      1776,
      1785
    ],
    "valid"
  ],
  [
    [
      1786,
      1790
    ],
    "valid"
  ],
  [
    [
      1791,
      1791
    ],
    "valid"
  ],
  [
    [
      1792,
      1805
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      1806,
      1806
    ],
    "disallowed"
  ],
  [
    [
      1807,
      1807
    ],
    "disallowed"
  ],
  [
    [
      1808,
      1836
    ],
    "valid"
  ],
  [
    [
      1837,
      1839
    ],
    "valid"
  ],
  [
    [
      1840,
      1866
    ],
    "valid"
  ],
  [
    [
      1867,
      1868
    ],
    "disallowed"
  ],
  [
    [
      1869,
      1871
    ],
    "valid"
  ],
  [
    [
      1872,
      1901
    ],
    "valid"
  ],
  [
    [
      1902,
      1919
    ],
    "valid"
  ],
  [
    [
      1920,
      1968
    ],
    "valid"
  ],
  [
    [
      1969,
      1969
    ],
    "valid"
  ],
  [
    [
      1970,
      1983
    ],
    "disallowed"
  ],
  [
    [
      1984,
      2037
    ],
    "valid"
  ],
  [
    [
      2038,
      2042
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2043,
      2047
    ],
    "disallowed"
  ],
  [
    [
      2048,
      2093
    ],
    "valid"
  ],
  [
    [
      2094,
      2095
    ],
    "disallowed"
  ],
  [
    [
      2096,
      2110
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2111,
      2111
    ],
    "disallowed"
  ],
  [
    [
      2112,
      2139
    ],
    "valid"
  ],
  [
    [
      2140,
      2141
    ],
    "disallowed"
  ],
  [
    [
      2142,
      2142
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2143,
      2207
    ],
    "disallowed"
  ],
  [
    [
      2208,
      2208
    ],
    "valid"
  ],
  [
    [
      2209,
      2209
    ],
    "valid"
  ],
  [
    [
      2210,
      2220
    ],
    "valid"
  ],
  [
    [
      2221,
      2226
    ],
    "valid"
  ],
  [
    [
      2227,
      2228
    ],
    "valid"
  ],
  [
    [
      2229,
      2274
    ],
    "disallowed"
  ],
  [
    [
      2275,
      2275
    ],
    "valid"
  ],
  [
    [
      2276,
      2302
    ],
    "valid"
  ],
  [
    [
      2303,
      2303
    ],
    "valid"
  ],
  [
    [
      2304,
      2304
    ],
    "valid"
  ],
  [
    [
      2305,
      2307
    ],
    "valid"
  ],
  [
    [
      2308,
      2308
    ],
    "valid"
  ],
  [
    [
      2309,
      2361
    ],
    "valid"
  ],
  [
    [
      2362,
      2363
    ],
    "valid"
  ],
  [
    [
      2364,
      2381
    ],
    "valid"
  ],
  [
    [
      2382,
      2382
    ],
    "valid"
  ],
  [
    [
      2383,
      2383
    ],
    "valid"
  ],
  [
    [
      2384,
      2388
    ],
    "valid"
  ],
  [
    [
      2389,
      2389
    ],
    "valid"
  ],
  [
    [
      2390,
      2391
    ],
    "valid"
  ],
  [
    [
      2392,
      2392
    ],
    "mapped",
    [
      2325,
      2364
    ]
  ],
  [
    [
      2393,
      2393
    ],
    "mapped",
    [
      2326,
      2364
    ]
  ],
  [
    [
      2394,
      2394
    ],
    "mapped",
    [
      2327,
      2364
    ]
  ],
  [
    [
      2395,
      2395
    ],
    "mapped",
    [
      2332,
      2364
    ]
  ],
  [
    [
      2396,
      2396
    ],
    "mapped",
    [
      2337,
      2364
    ]
  ],
  [
    [
      2397,
      2397
    ],
    "mapped",
    [
      2338,
      2364
    ]
  ],
  [
    [
      2398,
      2398
    ],
    "mapped",
    [
      2347,
      2364
    ]
  ],
  [
    [
      2399,
      2399
    ],
    "mapped",
    [
      2351,
      2364
    ]
  ],
  [
    [
      2400,
      2403
    ],
    "valid"
  ],
  [
    [
      2404,
      2405
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2406,
      2415
    ],
    "valid"
  ],
  [
    [
      2416,
      2416
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2417,
      2418
    ],
    "valid"
  ],
  [
    [
      2419,
      2423
    ],
    "valid"
  ],
  [
    [
      2424,
      2424
    ],
    "valid"
  ],
  [
    [
      2425,
      2426
    ],
    "valid"
  ],
  [
    [
      2427,
      2428
    ],
    "valid"
  ],
  [
    [
      2429,
      2429
    ],
    "valid"
  ],
  [
    [
      2430,
      2431
    ],
    "valid"
  ],
  [
    [
      2432,
      2432
    ],
    "valid"
  ],
  [
    [
      2433,
      2435
    ],
    "valid"
  ],
  [
    [
      2436,
      2436
    ],
    "disallowed"
  ],
  [
    [
      2437,
      2444
    ],
    "valid"
  ],
  [
    [
      2445,
      2446
    ],
    "disallowed"
  ],
  [
    [
      2447,
      2448
    ],
    "valid"
  ],
  [
    [
      2449,
      2450
    ],
    "disallowed"
  ],
  [
    [
      2451,
      2472
    ],
    "valid"
  ],
  [
    [
      2473,
      2473
    ],
    "disallowed"
  ],
  [
    [
      2474,
      2480
    ],
    "valid"
  ],
  [
    [
      2481,
      2481
    ],
    "disallowed"
  ],
  [
    [
      2482,
      2482
    ],
    "valid"
  ],
  [
    [
      2483,
      2485
    ],
    "disallowed"
  ],
  [
    [
      2486,
      2489
    ],
    "valid"
  ],
  [
    [
      2490,
      2491
    ],
    "disallowed"
  ],
  [
    [
      2492,
      2492
    ],
    "valid"
  ],
  [
    [
      2493,
      2493
    ],
    "valid"
  ],
  [
    [
      2494,
      2500
    ],
    "valid"
  ],
  [
    [
      2501,
      2502
    ],
    "disallowed"
  ],
  [
    [
      2503,
      2504
    ],
    "valid"
  ],
  [
    [
      2505,
      2506
    ],
    "disallowed"
  ],
  [
    [
      2507,
      2509
    ],
    "valid"
  ],
  [
    [
      2510,
      2510
    ],
    "valid"
  ],
  [
    [
      2511,
      2518
    ],
    "disallowed"
  ],
  [
    [
      2519,
      2519
    ],
    "valid"
  ],
  [
    [
      2520,
      2523
    ],
    "disallowed"
  ],
  [
    [
      2524,
      2524
    ],
    "mapped",
    [
      2465,
      2492
    ]
  ],
  [
    [
      2525,
      2525
    ],
    "mapped",
    [
      2466,
      2492
    ]
  ],
  [
    [
      2526,
      2526
    ],
    "disallowed"
  ],
  [
    [
      2527,
      2527
    ],
    "mapped",
    [
      2479,
      2492
    ]
  ],
  [
    [
      2528,
      2531
    ],
    "valid"
  ],
  [
    [
      2532,
      2533
    ],
    "disallowed"
  ],
  [
    [
      2534,
      2545
    ],
    "valid"
  ],
  [
    [
      2546,
      2554
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2555,
      2555
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2556,
      2560
    ],
    "disallowed"
  ],
  [
    [
      2561,
      2561
    ],
    "valid"
  ],
  [
    [
      2562,
      2562
    ],
    "valid"
  ],
  [
    [
      2563,
      2563
    ],
    "valid"
  ],
  [
    [
      2564,
      2564
    ],
    "disallowed"
  ],
  [
    [
      2565,
      2570
    ],
    "valid"
  ],
  [
    [
      2571,
      2574
    ],
    "disallowed"
  ],
  [
    [
      2575,
      2576
    ],
    "valid"
  ],
  [
    [
      2577,
      2578
    ],
    "disallowed"
  ],
  [
    [
      2579,
      2600
    ],
    "valid"
  ],
  [
    [
      2601,
      2601
    ],
    "disallowed"
  ],
  [
    [
      2602,
      2608
    ],
    "valid"
  ],
  [
    [
      2609,
      2609
    ],
    "disallowed"
  ],
  [
    [
      2610,
      2610
    ],
    "valid"
  ],
  [
    [
      2611,
      2611
    ],
    "mapped",
    [
      2610,
      2620
    ]
  ],
  [
    [
      2612,
      2612
    ],
    "disallowed"
  ],
  [
    [
      2613,
      2613
    ],
    "valid"
  ],
  [
    [
      2614,
      2614
    ],
    "mapped",
    [
      2616,
      2620
    ]
  ],
  [
    [
      2615,
      2615
    ],
    "disallowed"
  ],
  [
    [
      2616,
      2617
    ],
    "valid"
  ],
  [
    [
      2618,
      2619
    ],
    "disallowed"
  ],
  [
    [
      2620,
      2620
    ],
    "valid"
  ],
  [
    [
      2621,
      2621
    ],
    "disallowed"
  ],
  [
    [
      2622,
      2626
    ],
    "valid"
  ],
  [
    [
      2627,
      2630
    ],
    "disallowed"
  ],
  [
    [
      2631,
      2632
    ],
    "valid"
  ],
  [
    [
      2633,
      2634
    ],
    "disallowed"
  ],
  [
    [
      2635,
      2637
    ],
    "valid"
  ],
  [
    [
      2638,
      2640
    ],
    "disallowed"
  ],
  [
    [
      2641,
      2641
    ],
    "valid"
  ],
  [
    [
      2642,
      2648
    ],
    "disallowed"
  ],
  [
    [
      2649,
      2649
    ],
    "mapped",
    [
      2582,
      2620
    ]
  ],
  [
    [
      2650,
      2650
    ],
    "mapped",
    [
      2583,
      2620
    ]
  ],
  [
    [
      2651,
      2651
    ],
    "mapped",
    [
      2588,
      2620
    ]
  ],
  [
    [
      2652,
      2652
    ],
    "valid"
  ],
  [
    [
      2653,
      2653
    ],
    "disallowed"
  ],
  [
    [
      2654,
      2654
    ],
    "mapped",
    [
      2603,
      2620
    ]
  ],
  [
    [
      2655,
      2661
    ],
    "disallowed"
  ],
  [
    [
      2662,
      2676
    ],
    "valid"
  ],
  [
    [
      2677,
      2677
    ],
    "valid"
  ],
  [
    [
      2678,
      2688
    ],
    "disallowed"
  ],
  [
    [
      2689,
      2691
    ],
    "valid"
  ],
  [
    [
      2692,
      2692
    ],
    "disallowed"
  ],
  [
    [
      2693,
      2699
    ],
    "valid"
  ],
  [
    [
      2700,
      2700
    ],
    "valid"
  ],
  [
    [
      2701,
      2701
    ],
    "valid"
  ],
  [
    [
      2702,
      2702
    ],
    "disallowed"
  ],
  [
    [
      2703,
      2705
    ],
    "valid"
  ],
  [
    [
      2706,
      2706
    ],
    "disallowed"
  ],
  [
    [
      2707,
      2728
    ],
    "valid"
  ],
  [
    [
      2729,
      2729
    ],
    "disallowed"
  ],
  [
    [
      2730,
      2736
    ],
    "valid"
  ],
  [
    [
      2737,
      2737
    ],
    "disallowed"
  ],
  [
    [
      2738,
      2739
    ],
    "valid"
  ],
  [
    [
      2740,
      2740
    ],
    "disallowed"
  ],
  [
    [
      2741,
      2745
    ],
    "valid"
  ],
  [
    [
      2746,
      2747
    ],
    "disallowed"
  ],
  [
    [
      2748,
      2757
    ],
    "valid"
  ],
  [
    [
      2758,
      2758
    ],
    "disallowed"
  ],
  [
    [
      2759,
      2761
    ],
    "valid"
  ],
  [
    [
      2762,
      2762
    ],
    "disallowed"
  ],
  [
    [
      2763,
      2765
    ],
    "valid"
  ],
  [
    [
      2766,
      2767
    ],
    "disallowed"
  ],
  [
    [
      2768,
      2768
    ],
    "valid"
  ],
  [
    [
      2769,
      2783
    ],
    "disallowed"
  ],
  [
    [
      2784,
      2784
    ],
    "valid"
  ],
  [
    [
      2785,
      2787
    ],
    "valid"
  ],
  [
    [
      2788,
      2789
    ],
    "disallowed"
  ],
  [
    [
      2790,
      2799
    ],
    "valid"
  ],
  [
    [
      2800,
      2800
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2801,
      2801
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2802,
      2808
    ],
    "disallowed"
  ],
  [
    [
      2809,
      2809
    ],
    "valid"
  ],
  [
    [
      2810,
      2816
    ],
    "disallowed"
  ],
  [
    [
      2817,
      2819
    ],
    "valid"
  ],
  [
    [
      2820,
      2820
    ],
    "disallowed"
  ],
  [
    [
      2821,
      2828
    ],
    "valid"
  ],
  [
    [
      2829,
      2830
    ],
    "disallowed"
  ],
  [
    [
      2831,
      2832
    ],
    "valid"
  ],
  [
    [
      2833,
      2834
    ],
    "disallowed"
  ],
  [
    [
      2835,
      2856
    ],
    "valid"
  ],
  [
    [
      2857,
      2857
    ],
    "disallowed"
  ],
  [
    [
      2858,
      2864
    ],
    "valid"
  ],
  [
    [
      2865,
      2865
    ],
    "disallowed"
  ],
  [
    [
      2866,
      2867
    ],
    "valid"
  ],
  [
    [
      2868,
      2868
    ],
    "disallowed"
  ],
  [
    [
      2869,
      2869
    ],
    "valid"
  ],
  [
    [
      2870,
      2873
    ],
    "valid"
  ],
  [
    [
      2874,
      2875
    ],
    "disallowed"
  ],
  [
    [
      2876,
      2883
    ],
    "valid"
  ],
  [
    [
      2884,
      2884
    ],
    "valid"
  ],
  [
    [
      2885,
      2886
    ],
    "disallowed"
  ],
  [
    [
      2887,
      2888
    ],
    "valid"
  ],
  [
    [
      2889,
      2890
    ],
    "disallowed"
  ],
  [
    [
      2891,
      2893
    ],
    "valid"
  ],
  [
    [
      2894,
      2901
    ],
    "disallowed"
  ],
  [
    [
      2902,
      2903
    ],
    "valid"
  ],
  [
    [
      2904,
      2907
    ],
    "disallowed"
  ],
  [
    [
      2908,
      2908
    ],
    "mapped",
    [
      2849,
      2876
    ]
  ],
  [
    [
      2909,
      2909
    ],
    "mapped",
    [
      2850,
      2876
    ]
  ],
  [
    [
      2910,
      2910
    ],
    "disallowed"
  ],
  [
    [
      2911,
      2913
    ],
    "valid"
  ],
  [
    [
      2914,
      2915
    ],
    "valid"
  ],
  [
    [
      2916,
      2917
    ],
    "disallowed"
  ],
  [
    [
      2918,
      2927
    ],
    "valid"
  ],
  [
    [
      2928,
      2928
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2929,
      2929
    ],
    "valid"
  ],
  [
    [
      2930,
      2935
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      2936,
      2945
    ],
    "disallowed"
  ],
  [
    [
      2946,
      2947
    ],
    "valid"
  ],
  [
    [
      2948,
      2948
    ],
    "disallowed"
  ],
  [
    [
      2949,
      2954
    ],
    "valid"
  ],
  [
    [
      2955,
      2957
    ],
    "disallowed"
  ],
  [
    [
      2958,
      2960
    ],
    "valid"
  ],
  [
    [
      2961,
      2961
    ],
    "disallowed"
  ],
  [
    [
      2962,
      2965
    ],
    "valid"
  ],
  [
    [
      2966,
      2968
    ],
    "disallowed"
  ],
  [
    [
      2969,
      2970
    ],
    "valid"
  ],
  [
    [
      2971,
      2971
    ],
    "disallowed"
  ],
  [
    [
      2972,
      2972
    ],
    "valid"
  ],
  [
    [
      2973,
      2973
    ],
    "disallowed"
  ],
  [
    [
      2974,
      2975
    ],
    "valid"
  ],
  [
    [
      2976,
      2978
    ],
    "disallowed"
  ],
  [
    [
      2979,
      2980
    ],
    "valid"
  ],
  [
    [
      2981,
      2983
    ],
    "disallowed"
  ],
  [
    [
      2984,
      2986
    ],
    "valid"
  ],
  [
    [
      2987,
      2989
    ],
    "disallowed"
  ],
  [
    [
      2990,
      2997
    ],
    "valid"
  ],
  [
    [
      2998,
      2998
    ],
    "valid"
  ],
  [
    [
      2999,
      3001
    ],
    "valid"
  ],
  [
    [
      3002,
      3005
    ],
    "disallowed"
  ],
  [
    [
      3006,
      3010
    ],
    "valid"
  ],
  [
    [
      3011,
      3013
    ],
    "disallowed"
  ],
  [
    [
      3014,
      3016
    ],
    "valid"
  ],
  [
    [
      3017,
      3017
    ],
    "disallowed"
  ],
  [
    [
      3018,
      3021
    ],
    "valid"
  ],
  [
    [
      3022,
      3023
    ],
    "disallowed"
  ],
  [
    [
      3024,
      3024
    ],
    "valid"
  ],
  [
    [
      3025,
      3030
    ],
    "disallowed"
  ],
  [
    [
      3031,
      3031
    ],
    "valid"
  ],
  [
    [
      3032,
      3045
    ],
    "disallowed"
  ],
  [
    [
      3046,
      3046
    ],
    "valid"
  ],
  [
    [
      3047,
      3055
    ],
    "valid"
  ],
  [
    [
      3056,
      3058
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3059,
      3066
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3067,
      3071
    ],
    "disallowed"
  ],
  [
    [
      3072,
      3072
    ],
    "valid"
  ],
  [
    [
      3073,
      3075
    ],
    "valid"
  ],
  [
    [
      3076,
      3076
    ],
    "disallowed"
  ],
  [
    [
      3077,
      3084
    ],
    "valid"
  ],
  [
    [
      3085,
      3085
    ],
    "disallowed"
  ],
  [
    [
      3086,
      3088
    ],
    "valid"
  ],
  [
    [
      3089,
      3089
    ],
    "disallowed"
  ],
  [
    [
      3090,
      3112
    ],
    "valid"
  ],
  [
    [
      3113,
      3113
    ],
    "disallowed"
  ],
  [
    [
      3114,
      3123
    ],
    "valid"
  ],
  [
    [
      3124,
      3124
    ],
    "valid"
  ],
  [
    [
      3125,
      3129
    ],
    "valid"
  ],
  [
    [
      3130,
      3132
    ],
    "disallowed"
  ],
  [
    [
      3133,
      3133
    ],
    "valid"
  ],
  [
    [
      3134,
      3140
    ],
    "valid"
  ],
  [
    [
      3141,
      3141
    ],
    "disallowed"
  ],
  [
    [
      3142,
      3144
    ],
    "valid"
  ],
  [
    [
      3145,
      3145
    ],
    "disallowed"
  ],
  [
    [
      3146,
      3149
    ],
    "valid"
  ],
  [
    [
      3150,
      3156
    ],
    "disallowed"
  ],
  [
    [
      3157,
      3158
    ],
    "valid"
  ],
  [
    [
      3159,
      3159
    ],
    "disallowed"
  ],
  [
    [
      3160,
      3161
    ],
    "valid"
  ],
  [
    [
      3162,
      3162
    ],
    "valid"
  ],
  [
    [
      3163,
      3167
    ],
    "disallowed"
  ],
  [
    [
      3168,
      3169
    ],
    "valid"
  ],
  [
    [
      3170,
      3171
    ],
    "valid"
  ],
  [
    [
      3172,
      3173
    ],
    "disallowed"
  ],
  [
    [
      3174,
      3183
    ],
    "valid"
  ],
  [
    [
      3184,
      3191
    ],
    "disallowed"
  ],
  [
    [
      3192,
      3199
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3200,
      3200
    ],
    "disallowed"
  ],
  [
    [
      3201,
      3201
    ],
    "valid"
  ],
  [
    [
      3202,
      3203
    ],
    "valid"
  ],
  [
    [
      3204,
      3204
    ],
    "disallowed"
  ],
  [
    [
      3205,
      3212
    ],
    "valid"
  ],
  [
    [
      3213,
      3213
    ],
    "disallowed"
  ],
  [
    [
      3214,
      3216
    ],
    "valid"
  ],
  [
    [
      3217,
      3217
    ],
    "disallowed"
  ],
  [
    [
      3218,
      3240
    ],
    "valid"
  ],
  [
    [
      3241,
      3241
    ],
    "disallowed"
  ],
  [
    [
      3242,
      3251
    ],
    "valid"
  ],
  [
    [
      3252,
      3252
    ],
    "disallowed"
  ],
  [
    [
      3253,
      3257
    ],
    "valid"
  ],
  [
    [
      3258,
      3259
    ],
    "disallowed"
  ],
  [
    [
      3260,
      3261
    ],
    "valid"
  ],
  [
    [
      3262,
      3268
    ],
    "valid"
  ],
  [
    [
      3269,
      3269
    ],
    "disallowed"
  ],
  [
    [
      3270,
      3272
    ],
    "valid"
  ],
  [
    [
      3273,
      3273
    ],
    "disallowed"
  ],
  [
    [
      3274,
      3277
    ],
    "valid"
  ],
  [
    [
      3278,
      3284
    ],
    "disallowed"
  ],
  [
    [
      3285,
      3286
    ],
    "valid"
  ],
  [
    [
      3287,
      3293
    ],
    "disallowed"
  ],
  [
    [
      3294,
      3294
    ],
    "valid"
  ],
  [
    [
      3295,
      3295
    ],
    "disallowed"
  ],
  [
    [
      3296,
      3297
    ],
    "valid"
  ],
  [
    [
      3298,
      3299
    ],
    "valid"
  ],
  [
    [
      3300,
      3301
    ],
    "disallowed"
  ],
  [
    [
      3302,
      3311
    ],
    "valid"
  ],
  [
    [
      3312,
      3312
    ],
    "disallowed"
  ],
  [
    [
      3313,
      3314
    ],
    "valid"
  ],
  [
    [
      3315,
      3328
    ],
    "disallowed"
  ],
  [
    [
      3329,
      3329
    ],
    "valid"
  ],
  [
    [
      3330,
      3331
    ],
    "valid"
  ],
  [
    [
      3332,
      3332
    ],
    "disallowed"
  ],
  [
    [
      3333,
      3340
    ],
    "valid"
  ],
  [
    [
      3341,
      3341
    ],
    "disallowed"
  ],
  [
    [
      3342,
      3344
    ],
    "valid"
  ],
  [
    [
      3345,
      3345
    ],
    "disallowed"
  ],
  [
    [
      3346,
      3368
    ],
    "valid"
  ],
  [
    [
      3369,
      3369
    ],
    "valid"
  ],
  [
    [
      3370,
      3385
    ],
    "valid"
  ],
  [
    [
      3386,
      3386
    ],
    "valid"
  ],
  [
    [
      3387,
      3388
    ],
    "disallowed"
  ],
  [
    [
      3389,
      3389
    ],
    "valid"
  ],
  [
    [
      3390,
      3395
    ],
    "valid"
  ],
  [
    [
      3396,
      3396
    ],
    "valid"
  ],
  [
    [
      3397,
      3397
    ],
    "disallowed"
  ],
  [
    [
      3398,
      3400
    ],
    "valid"
  ],
  [
    [
      3401,
      3401
    ],
    "disallowed"
  ],
  [
    [
      3402,
      3405
    ],
    "valid"
  ],
  [
    [
      3406,
      3406
    ],
    "valid"
  ],
  [
    [
      3407,
      3414
    ],
    "disallowed"
  ],
  [
    [
      3415,
      3415
    ],
    "valid"
  ],
  [
    [
      3416,
      3422
    ],
    "disallowed"
  ],
  [
    [
      3423,
      3423
    ],
    "valid"
  ],
  [
    [
      3424,
      3425
    ],
    "valid"
  ],
  [
    [
      3426,
      3427
    ],
    "valid"
  ],
  [
    [
      3428,
      3429
    ],
    "disallowed"
  ],
  [
    [
      3430,
      3439
    ],
    "valid"
  ],
  [
    [
      3440,
      3445
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3446,
      3448
    ],
    "disallowed"
  ],
  [
    [
      3449,
      3449
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3450,
      3455
    ],
    "valid"
  ],
  [
    [
      3456,
      3457
    ],
    "disallowed"
  ],
  [
    [
      3458,
      3459
    ],
    "valid"
  ],
  [
    [
      3460,
      3460
    ],
    "disallowed"
  ],
  [
    [
      3461,
      3478
    ],
    "valid"
  ],
  [
    [
      3479,
      3481
    ],
    "disallowed"
  ],
  [
    [
      3482,
      3505
    ],
    "valid"
  ],
  [
    [
      3506,
      3506
    ],
    "disallowed"
  ],
  [
    [
      3507,
      3515
    ],
    "valid"
  ],
  [
    [
      3516,
      3516
    ],
    "disallowed"
  ],
  [
    [
      3517,
      3517
    ],
    "valid"
  ],
  [
    [
      3518,
      3519
    ],
    "disallowed"
  ],
  [
    [
      3520,
      3526
    ],
    "valid"
  ],
  [
    [
      3527,
      3529
    ],
    "disallowed"
  ],
  [
    [
      3530,
      3530
    ],
    "valid"
  ],
  [
    [
      3531,
      3534
    ],
    "disallowed"
  ],
  [
    [
      3535,
      3540
    ],
    "valid"
  ],
  [
    [
      3541,
      3541
    ],
    "disallowed"
  ],
  [
    [
      3542,
      3542
    ],
    "valid"
  ],
  [
    [
      3543,
      3543
    ],
    "disallowed"
  ],
  [
    [
      3544,
      3551
    ],
    "valid"
  ],
  [
    [
      3552,
      3557
    ],
    "disallowed"
  ],
  [
    [
      3558,
      3567
    ],
    "valid"
  ],
  [
    [
      3568,
      3569
    ],
    "disallowed"
  ],
  [
    [
      3570,
      3571
    ],
    "valid"
  ],
  [
    [
      3572,
      3572
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3573,
      3584
    ],
    "disallowed"
  ],
  [
    [
      3585,
      3634
    ],
    "valid"
  ],
  [
    [
      3635,
      3635
    ],
    "mapped",
    [
      3661,
      3634
    ]
  ],
  [
    [
      3636,
      3642
    ],
    "valid"
  ],
  [
    [
      3643,
      3646
    ],
    "disallowed"
  ],
  [
    [
      3647,
      3647
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3648,
      3662
    ],
    "valid"
  ],
  [
    [
      3663,
      3663
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3664,
      3673
    ],
    "valid"
  ],
  [
    [
      3674,
      3675
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3676,
      3712
    ],
    "disallowed"
  ],
  [
    [
      3713,
      3714
    ],
    "valid"
  ],
  [
    [
      3715,
      3715
    ],
    "disallowed"
  ],
  [
    [
      3716,
      3716
    ],
    "valid"
  ],
  [
    [
      3717,
      3718
    ],
    "disallowed"
  ],
  [
    [
      3719,
      3720
    ],
    "valid"
  ],
  [
    [
      3721,
      3721
    ],
    "disallowed"
  ],
  [
    [
      3722,
      3722
    ],
    "valid"
  ],
  [
    [
      3723,
      3724
    ],
    "disallowed"
  ],
  [
    [
      3725,
      3725
    ],
    "valid"
  ],
  [
    [
      3726,
      3731
    ],
    "disallowed"
  ],
  [
    [
      3732,
      3735
    ],
    "valid"
  ],
  [
    [
      3736,
      3736
    ],
    "disallowed"
  ],
  [
    [
      3737,
      3743
    ],
    "valid"
  ],
  [
    [
      3744,
      3744
    ],
    "disallowed"
  ],
  [
    [
      3745,
      3747
    ],
    "valid"
  ],
  [
    [
      3748,
      3748
    ],
    "disallowed"
  ],
  [
    [
      3749,
      3749
    ],
    "valid"
  ],
  [
    [
      3750,
      3750
    ],
    "disallowed"
  ],
  [
    [
      3751,
      3751
    ],
    "valid"
  ],
  [
    [
      3752,
      3753
    ],
    "disallowed"
  ],
  [
    [
      3754,
      3755
    ],
    "valid"
  ],
  [
    [
      3756,
      3756
    ],
    "disallowed"
  ],
  [
    [
      3757,
      3762
    ],
    "valid"
  ],
  [
    [
      3763,
      3763
    ],
    "mapped",
    [
      3789,
      3762
    ]
  ],
  [
    [
      3764,
      3769
    ],
    "valid"
  ],
  [
    [
      3770,
      3770
    ],
    "disallowed"
  ],
  [
    [
      3771,
      3773
    ],
    "valid"
  ],
  [
    [
      3774,
      3775
    ],
    "disallowed"
  ],
  [
    [
      3776,
      3780
    ],
    "valid"
  ],
  [
    [
      3781,
      3781
    ],
    "disallowed"
  ],
  [
    [
      3782,
      3782
    ],
    "valid"
  ],
  [
    [
      3783,
      3783
    ],
    "disallowed"
  ],
  [
    [
      3784,
      3789
    ],
    "valid"
  ],
  [
    [
      3790,
      3791
    ],
    "disallowed"
  ],
  [
    [
      3792,
      3801
    ],
    "valid"
  ],
  [
    [
      3802,
      3803
    ],
    "disallowed"
  ],
  [
    [
      3804,
      3804
    ],
    "mapped",
    [
      3755,
      3737
    ]
  ],
  [
    [
      3805,
      3805
    ],
    "mapped",
    [
      3755,
      3745
    ]
  ],
  [
    [
      3806,
      3807
    ],
    "valid"
  ],
  [
    [
      3808,
      3839
    ],
    "disallowed"
  ],
  [
    [
      3840,
      3840
    ],
    "valid"
  ],
  [
    [
      3841,
      3850
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3851,
      3851
    ],
    "valid"
  ],
  [
    [
      3852,
      3852
    ],
    "mapped",
    [
      3851
    ]
  ],
  [
    [
      3853,
      3863
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3864,
      3865
    ],
    "valid"
  ],
  [
    [
      3866,
      3871
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3872,
      3881
    ],
    "valid"
  ],
  [
    [
      3882,
      3892
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3893,
      3893
    ],
    "valid"
  ],
  [
    [
      3894,
      3894
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3895,
      3895
    ],
    "valid"
  ],
  [
    [
      3896,
      3896
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3897,
      3897
    ],
    "valid"
  ],
  [
    [
      3898,
      3901
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3902,
      3906
    ],
    "valid"
  ],
  [
    [
      3907,
      3907
    ],
    "mapped",
    [
      3906,
      4023
    ]
  ],
  [
    [
      3908,
      3911
    ],
    "valid"
  ],
  [
    [
      3912,
      3912
    ],
    "disallowed"
  ],
  [
    [
      3913,
      3916
    ],
    "valid"
  ],
  [
    [
      3917,
      3917
    ],
    "mapped",
    [
      3916,
      4023
    ]
  ],
  [
    [
      3918,
      3921
    ],
    "valid"
  ],
  [
    [
      3922,
      3922
    ],
    "mapped",
    [
      3921,
      4023
    ]
  ],
  [
    [
      3923,
      3926
    ],
    "valid"
  ],
  [
    [
      3927,
      3927
    ],
    "mapped",
    [
      3926,
      4023
    ]
  ],
  [
    [
      3928,
      3931
    ],
    "valid"
  ],
  [
    [
      3932,
      3932
    ],
    "mapped",
    [
      3931,
      4023
    ]
  ],
  [
    [
      3933,
      3944
    ],
    "valid"
  ],
  [
    [
      3945,
      3945
    ],
    "mapped",
    [
      3904,
      4021
    ]
  ],
  [
    [
      3946,
      3946
    ],
    "valid"
  ],
  [
    [
      3947,
      3948
    ],
    "valid"
  ],
  [
    [
      3949,
      3952
    ],
    "disallowed"
  ],
  [
    [
      3953,
      3954
    ],
    "valid"
  ],
  [
    [
      3955,
      3955
    ],
    "mapped",
    [
      3953,
      3954
    ]
  ],
  [
    [
      3956,
      3956
    ],
    "valid"
  ],
  [
    [
      3957,
      3957
    ],
    "mapped",
    [
      3953,
      3956
    ]
  ],
  [
    [
      3958,
      3958
    ],
    "mapped",
    [
      4018,
      3968
    ]
  ],
  [
    [
      3959,
      3959
    ],
    "mapped",
    [
      4018,
      3953,
      3968
    ]
  ],
  [
    [
      3960,
      3960
    ],
    "mapped",
    [
      4019,
      3968
    ]
  ],
  [
    [
      3961,
      3961
    ],
    "mapped",
    [
      4019,
      3953,
      3968
    ]
  ],
  [
    [
      3962,
      3968
    ],
    "valid"
  ],
  [
    [
      3969,
      3969
    ],
    "mapped",
    [
      3953,
      3968
    ]
  ],
  [
    [
      3970,
      3972
    ],
    "valid"
  ],
  [
    [
      3973,
      3973
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      3974,
      3979
    ],
    "valid"
  ],
  [
    [
      3980,
      3983
    ],
    "valid"
  ],
  [
    [
      3984,
      3986
    ],
    "valid"
  ],
  [
    [
      3987,
      3987
    ],
    "mapped",
    [
      3986,
      4023
    ]
  ],
  [
    [
      3988,
      3989
    ],
    "valid"
  ],
  [
    [
      3990,
      3990
    ],
    "valid"
  ],
  [
    [
      3991,
      3991
    ],
    "valid"
  ],
  [
    [
      3992,
      3992
    ],
    "disallowed"
  ],
  [
    [
      3993,
      3996
    ],
    "valid"
  ],
  [
    [
      3997,
      3997
    ],
    "mapped",
    [
      3996,
      4023
    ]
  ],
  [
    [
      3998,
      4001
    ],
    "valid"
  ],
  [
    [
      4002,
      4002
    ],
    "mapped",
    [
      4001,
      4023
    ]
  ],
  [
    [
      4003,
      4006
    ],
    "valid"
  ],
  [
    [
      4007,
      4007
    ],
    "mapped",
    [
      4006,
      4023
    ]
  ],
  [
    [
      4008,
      4011
    ],
    "valid"
  ],
  [
    [
      4012,
      4012
    ],
    "mapped",
    [
      4011,
      4023
    ]
  ],
  [
    [
      4013,
      4013
    ],
    "valid"
  ],
  [
    [
      4014,
      4016
    ],
    "valid"
  ],
  [
    [
      4017,
      4023
    ],
    "valid"
  ],
  [
    [
      4024,
      4024
    ],
    "valid"
  ],
  [
    [
      4025,
      4025
    ],
    "mapped",
    [
      3984,
      4021
    ]
  ],
  [
    [
      4026,
      4028
    ],
    "valid"
  ],
  [
    [
      4029,
      4029
    ],
    "disallowed"
  ],
  [
    [
      4030,
      4037
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4038,
      4038
    ],
    "valid"
  ],
  [
    [
      4039,
      4044
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4045,
      4045
    ],
    "disallowed"
  ],
  [
    [
      4046,
      4046
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4047,
      4047
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4048,
      4049
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4050,
      4052
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4053,
      4056
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4057,
      4058
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4059,
      4095
    ],
    "disallowed"
  ],
  [
    [
      4096,
      4129
    ],
    "valid"
  ],
  [
    [
      4130,
      4130
    ],
    "valid"
  ],
  [
    [
      4131,
      4135
    ],
    "valid"
  ],
  [
    [
      4136,
      4136
    ],
    "valid"
  ],
  [
    [
      4137,
      4138
    ],
    "valid"
  ],
  [
    [
      4139,
      4139
    ],
    "valid"
  ],
  [
    [
      4140,
      4146
    ],
    "valid"
  ],
  [
    [
      4147,
      4149
    ],
    "valid"
  ],
  [
    [
      4150,
      4153
    ],
    "valid"
  ],
  [
    [
      4154,
      4159
    ],
    "valid"
  ],
  [
    [
      4160,
      4169
    ],
    "valid"
  ],
  [
    [
      4170,
      4175
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4176,
      4185
    ],
    "valid"
  ],
  [
    [
      4186,
      4249
    ],
    "valid"
  ],
  [
    [
      4250,
      4253
    ],
    "valid"
  ],
  [
    [
      4254,
      4255
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4256,
      4293
    ],
    "disallowed"
  ],
  [
    [
      4294,
      4294
    ],
    "disallowed"
  ],
  [
    [
      4295,
      4295
    ],
    "mapped",
    [
      11559
    ]
  ],
  [
    [
      4296,
      4300
    ],
    "disallowed"
  ],
  [
    [
      4301,
      4301
    ],
    "mapped",
    [
      11565
    ]
  ],
  [
    [
      4302,
      4303
    ],
    "disallowed"
  ],
  [
    [
      4304,
      4342
    ],
    "valid"
  ],
  [
    [
      4343,
      4344
    ],
    "valid"
  ],
  [
    [
      4345,
      4346
    ],
    "valid"
  ],
  [
    [
      4347,
      4347
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4348,
      4348
    ],
    "mapped",
    [
      4316
    ]
  ],
  [
    [
      4349,
      4351
    ],
    "valid"
  ],
  [
    [
      4352,
      4441
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4442,
      4446
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4447,
      4448
    ],
    "disallowed"
  ],
  [
    [
      4449,
      4514
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4515,
      4519
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4520,
      4601
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4602,
      4607
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4608,
      4614
    ],
    "valid"
  ],
  [
    [
      4615,
      4615
    ],
    "valid"
  ],
  [
    [
      4616,
      4678
    ],
    "valid"
  ],
  [
    [
      4679,
      4679
    ],
    "valid"
  ],
  [
    [
      4680,
      4680
    ],
    "valid"
  ],
  [
    [
      4681,
      4681
    ],
    "disallowed"
  ],
  [
    [
      4682,
      4685
    ],
    "valid"
  ],
  [
    [
      4686,
      4687
    ],
    "disallowed"
  ],
  [
    [
      4688,
      4694
    ],
    "valid"
  ],
  [
    [
      4695,
      4695
    ],
    "disallowed"
  ],
  [
    [
      4696,
      4696
    ],
    "valid"
  ],
  [
    [
      4697,
      4697
    ],
    "disallowed"
  ],
  [
    [
      4698,
      4701
    ],
    "valid"
  ],
  [
    [
      4702,
      4703
    ],
    "disallowed"
  ],
  [
    [
      4704,
      4742
    ],
    "valid"
  ],
  [
    [
      4743,
      4743
    ],
    "valid"
  ],
  [
    [
      4744,
      4744
    ],
    "valid"
  ],
  [
    [
      4745,
      4745
    ],
    "disallowed"
  ],
  [
    [
      4746,
      4749
    ],
    "valid"
  ],
  [
    [
      4750,
      4751
    ],
    "disallowed"
  ],
  [
    [
      4752,
      4782
    ],
    "valid"
  ],
  [
    [
      4783,
      4783
    ],
    "valid"
  ],
  [
    [
      4784,
      4784
    ],
    "valid"
  ],
  [
    [
      4785,
      4785
    ],
    "disallowed"
  ],
  [
    [
      4786,
      4789
    ],
    "valid"
  ],
  [
    [
      4790,
      4791
    ],
    "disallowed"
  ],
  [
    [
      4792,
      4798
    ],
    "valid"
  ],
  [
    [
      4799,
      4799
    ],
    "disallowed"
  ],
  [
    [
      4800,
      4800
    ],
    "valid"
  ],
  [
    [
      4801,
      4801
    ],
    "disallowed"
  ],
  [
    [
      4802,
      4805
    ],
    "valid"
  ],
  [
    [
      4806,
      4807
    ],
    "disallowed"
  ],
  [
    [
      4808,
      4814
    ],
    "valid"
  ],
  [
    [
      4815,
      4815
    ],
    "valid"
  ],
  [
    [
      4816,
      4822
    ],
    "valid"
  ],
  [
    [
      4823,
      4823
    ],
    "disallowed"
  ],
  [
    [
      4824,
      4846
    ],
    "valid"
  ],
  [
    [
      4847,
      4847
    ],
    "valid"
  ],
  [
    [
      4848,
      4878
    ],
    "valid"
  ],
  [
    [
      4879,
      4879
    ],
    "valid"
  ],
  [
    [
      4880,
      4880
    ],
    "valid"
  ],
  [
    [
      4881,
      4881
    ],
    "disallowed"
  ],
  [
    [
      4882,
      4885
    ],
    "valid"
  ],
  [
    [
      4886,
      4887
    ],
    "disallowed"
  ],
  [
    [
      4888,
      4894
    ],
    "valid"
  ],
  [
    [
      4895,
      4895
    ],
    "valid"
  ],
  [
    [
      4896,
      4934
    ],
    "valid"
  ],
  [
    [
      4935,
      4935
    ],
    "valid"
  ],
  [
    [
      4936,
      4954
    ],
    "valid"
  ],
  [
    [
      4955,
      4956
    ],
    "disallowed"
  ],
  [
    [
      4957,
      4958
    ],
    "valid"
  ],
  [
    [
      4959,
      4959
    ],
    "valid"
  ],
  [
    [
      4960,
      4960
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4961,
      4988
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      4989,
      4991
    ],
    "disallowed"
  ],
  [
    [
      4992,
      5007
    ],
    "valid"
  ],
  [
    [
      5008,
      5017
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5018,
      5023
    ],
    "disallowed"
  ],
  [
    [
      5024,
      5108
    ],
    "valid"
  ],
  [
    [
      5109,
      5109
    ],
    "valid"
  ],
  [
    [
      5110,
      5111
    ],
    "disallowed"
  ],
  [
    [
      5112,
      5112
    ],
    "mapped",
    [
      5104
    ]
  ],
  [
    [
      5113,
      5113
    ],
    "mapped",
    [
      5105
    ]
  ],
  [
    [
      5114,
      5114
    ],
    "mapped",
    [
      5106
    ]
  ],
  [
    [
      5115,
      5115
    ],
    "mapped",
    [
      5107
    ]
  ],
  [
    [
      5116,
      5116
    ],
    "mapped",
    [
      5108
    ]
  ],
  [
    [
      5117,
      5117
    ],
    "mapped",
    [
      5109
    ]
  ],
  [
    [
      5118,
      5119
    ],
    "disallowed"
  ],
  [
    [
      5120,
      5120
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5121,
      5740
    ],
    "valid"
  ],
  [
    [
      5741,
      5742
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5743,
      5750
    ],
    "valid"
  ],
  [
    [
      5751,
      5759
    ],
    "valid"
  ],
  [
    [
      5760,
      5760
    ],
    "disallowed"
  ],
  [
    [
      5761,
      5786
    ],
    "valid"
  ],
  [
    [
      5787,
      5788
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5789,
      5791
    ],
    "disallowed"
  ],
  [
    [
      5792,
      5866
    ],
    "valid"
  ],
  [
    [
      5867,
      5872
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5873,
      5880
    ],
    "valid"
  ],
  [
    [
      5881,
      5887
    ],
    "disallowed"
  ],
  [
    [
      5888,
      5900
    ],
    "valid"
  ],
  [
    [
      5901,
      5901
    ],
    "disallowed"
  ],
  [
    [
      5902,
      5908
    ],
    "valid"
  ],
  [
    [
      5909,
      5919
    ],
    "disallowed"
  ],
  [
    [
      5920,
      5940
    ],
    "valid"
  ],
  [
    [
      5941,
      5942
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      5943,
      5951
    ],
    "disallowed"
  ],
  [
    [
      5952,
      5971
    ],
    "valid"
  ],
  [
    [
      5972,
      5983
    ],
    "disallowed"
  ],
  [
    [
      5984,
      5996
    ],
    "valid"
  ],
  [
    [
      5997,
      5997
    ],
    "disallowed"
  ],
  [
    [
      5998,
      6e3
    ],
    "valid"
  ],
  [
    [
      6001,
      6001
    ],
    "disallowed"
  ],
  [
    [
      6002,
      6003
    ],
    "valid"
  ],
  [
    [
      6004,
      6015
    ],
    "disallowed"
  ],
  [
    [
      6016,
      6067
    ],
    "valid"
  ],
  [
    [
      6068,
      6069
    ],
    "disallowed"
  ],
  [
    [
      6070,
      6099
    ],
    "valid"
  ],
  [
    [
      6100,
      6102
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6103,
      6103
    ],
    "valid"
  ],
  [
    [
      6104,
      6107
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6108,
      6108
    ],
    "valid"
  ],
  [
    [
      6109,
      6109
    ],
    "valid"
  ],
  [
    [
      6110,
      6111
    ],
    "disallowed"
  ],
  [
    [
      6112,
      6121
    ],
    "valid"
  ],
  [
    [
      6122,
      6127
    ],
    "disallowed"
  ],
  [
    [
      6128,
      6137
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6138,
      6143
    ],
    "disallowed"
  ],
  [
    [
      6144,
      6149
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6150,
      6150
    ],
    "disallowed"
  ],
  [
    [
      6151,
      6154
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6155,
      6157
    ],
    "ignored"
  ],
  [
    [
      6158,
      6158
    ],
    "disallowed"
  ],
  [
    [
      6159,
      6159
    ],
    "disallowed"
  ],
  [
    [
      6160,
      6169
    ],
    "valid"
  ],
  [
    [
      6170,
      6175
    ],
    "disallowed"
  ],
  [
    [
      6176,
      6263
    ],
    "valid"
  ],
  [
    [
      6264,
      6271
    ],
    "disallowed"
  ],
  [
    [
      6272,
      6313
    ],
    "valid"
  ],
  [
    [
      6314,
      6314
    ],
    "valid"
  ],
  [
    [
      6315,
      6319
    ],
    "disallowed"
  ],
  [
    [
      6320,
      6389
    ],
    "valid"
  ],
  [
    [
      6390,
      6399
    ],
    "disallowed"
  ],
  [
    [
      6400,
      6428
    ],
    "valid"
  ],
  [
    [
      6429,
      6430
    ],
    "valid"
  ],
  [
    [
      6431,
      6431
    ],
    "disallowed"
  ],
  [
    [
      6432,
      6443
    ],
    "valid"
  ],
  [
    [
      6444,
      6447
    ],
    "disallowed"
  ],
  [
    [
      6448,
      6459
    ],
    "valid"
  ],
  [
    [
      6460,
      6463
    ],
    "disallowed"
  ],
  [
    [
      6464,
      6464
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6465,
      6467
    ],
    "disallowed"
  ],
  [
    [
      6468,
      6469
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6470,
      6509
    ],
    "valid"
  ],
  [
    [
      6510,
      6511
    ],
    "disallowed"
  ],
  [
    [
      6512,
      6516
    ],
    "valid"
  ],
  [
    [
      6517,
      6527
    ],
    "disallowed"
  ],
  [
    [
      6528,
      6569
    ],
    "valid"
  ],
  [
    [
      6570,
      6571
    ],
    "valid"
  ],
  [
    [
      6572,
      6575
    ],
    "disallowed"
  ],
  [
    [
      6576,
      6601
    ],
    "valid"
  ],
  [
    [
      6602,
      6607
    ],
    "disallowed"
  ],
  [
    [
      6608,
      6617
    ],
    "valid"
  ],
  [
    [
      6618,
      6618
    ],
    "valid",
    [],
    "XV8"
  ],
  [
    [
      6619,
      6621
    ],
    "disallowed"
  ],
  [
    [
      6622,
      6623
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6624,
      6655
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6656,
      6683
    ],
    "valid"
  ],
  [
    [
      6684,
      6685
    ],
    "disallowed"
  ],
  [
    [
      6686,
      6687
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6688,
      6750
    ],
    "valid"
  ],
  [
    [
      6751,
      6751
    ],
    "disallowed"
  ],
  [
    [
      6752,
      6780
    ],
    "valid"
  ],
  [
    [
      6781,
      6782
    ],
    "disallowed"
  ],
  [
    [
      6783,
      6793
    ],
    "valid"
  ],
  [
    [
      6794,
      6799
    ],
    "disallowed"
  ],
  [
    [
      6800,
      6809
    ],
    "valid"
  ],
  [
    [
      6810,
      6815
    ],
    "disallowed"
  ],
  [
    [
      6816,
      6822
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6823,
      6823
    ],
    "valid"
  ],
  [
    [
      6824,
      6829
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6830,
      6831
    ],
    "disallowed"
  ],
  [
    [
      6832,
      6845
    ],
    "valid"
  ],
  [
    [
      6846,
      6846
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      6847,
      6911
    ],
    "disallowed"
  ],
  [
    [
      6912,
      6987
    ],
    "valid"
  ],
  [
    [
      6988,
      6991
    ],
    "disallowed"
  ],
  [
    [
      6992,
      7001
    ],
    "valid"
  ],
  [
    [
      7002,
      7018
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7019,
      7027
    ],
    "valid"
  ],
  [
    [
      7028,
      7036
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7037,
      7039
    ],
    "disallowed"
  ],
  [
    [
      7040,
      7082
    ],
    "valid"
  ],
  [
    [
      7083,
      7085
    ],
    "valid"
  ],
  [
    [
      7086,
      7097
    ],
    "valid"
  ],
  [
    [
      7098,
      7103
    ],
    "valid"
  ],
  [
    [
      7104,
      7155
    ],
    "valid"
  ],
  [
    [
      7156,
      7163
    ],
    "disallowed"
  ],
  [
    [
      7164,
      7167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7168,
      7223
    ],
    "valid"
  ],
  [
    [
      7224,
      7226
    ],
    "disallowed"
  ],
  [
    [
      7227,
      7231
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7232,
      7241
    ],
    "valid"
  ],
  [
    [
      7242,
      7244
    ],
    "disallowed"
  ],
  [
    [
      7245,
      7293
    ],
    "valid"
  ],
  [
    [
      7294,
      7295
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7296,
      7359
    ],
    "disallowed"
  ],
  [
    [
      7360,
      7367
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7368,
      7375
    ],
    "disallowed"
  ],
  [
    [
      7376,
      7378
    ],
    "valid"
  ],
  [
    [
      7379,
      7379
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      7380,
      7410
    ],
    "valid"
  ],
  [
    [
      7411,
      7414
    ],
    "valid"
  ],
  [
    [
      7415,
      7415
    ],
    "disallowed"
  ],
  [
    [
      7416,
      7417
    ],
    "valid"
  ],
  [
    [
      7418,
      7423
    ],
    "disallowed"
  ],
  [
    [
      7424,
      7467
    ],
    "valid"
  ],
  [
    [
      7468,
      7468
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      7469,
      7469
    ],
    "mapped",
    [
      230
    ]
  ],
  [
    [
      7470,
      7470
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      7471,
      7471
    ],
    "valid"
  ],
  [
    [
      7472,
      7472
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      7473,
      7473
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      7474,
      7474
    ],
    "mapped",
    [
      477
    ]
  ],
  [
    [
      7475,
      7475
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      7476,
      7476
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      7477,
      7477
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      7478,
      7478
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      7479,
      7479
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      7480,
      7480
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      7481,
      7481
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      7482,
      7482
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      7483,
      7483
    ],
    "valid"
  ],
  [
    [
      7484,
      7484
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      7485,
      7485
    ],
    "mapped",
    [
      547
    ]
  ],
  [
    [
      7486,
      7486
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      7487,
      7487
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      7488,
      7488
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      7489,
      7489
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      7490,
      7490
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      7491,
      7491
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      7492,
      7492
    ],
    "mapped",
    [
      592
    ]
  ],
  [
    [
      7493,
      7493
    ],
    "mapped",
    [
      593
    ]
  ],
  [
    [
      7494,
      7494
    ],
    "mapped",
    [
      7426
    ]
  ],
  [
    [
      7495,
      7495
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      7496,
      7496
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      7497,
      7497
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      7498,
      7498
    ],
    "mapped",
    [
      601
    ]
  ],
  [
    [
      7499,
      7499
    ],
    "mapped",
    [
      603
    ]
  ],
  [
    [
      7500,
      7500
    ],
    "mapped",
    [
      604
    ]
  ],
  [
    [
      7501,
      7501
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      7502,
      7502
    ],
    "valid"
  ],
  [
    [
      7503,
      7503
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      7504,
      7504
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      7505,
      7505
    ],
    "mapped",
    [
      331
    ]
  ],
  [
    [
      7506,
      7506
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      7507,
      7507
    ],
    "mapped",
    [
      596
    ]
  ],
  [
    [
      7508,
      7508
    ],
    "mapped",
    [
      7446
    ]
  ],
  [
    [
      7509,
      7509
    ],
    "mapped",
    [
      7447
    ]
  ],
  [
    [
      7510,
      7510
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      7511,
      7511
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      7512,
      7512
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      7513,
      7513
    ],
    "mapped",
    [
      7453
    ]
  ],
  [
    [
      7514,
      7514
    ],
    "mapped",
    [
      623
    ]
  ],
  [
    [
      7515,
      7515
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      7516,
      7516
    ],
    "mapped",
    [
      7461
    ]
  ],
  [
    [
      7517,
      7517
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      7518,
      7518
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      7519,
      7519
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      7520,
      7520
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      7521,
      7521
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      7522,
      7522
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      7523,
      7523
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      7524,
      7524
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      7525,
      7525
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      7526,
      7526
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      7527,
      7527
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      7528,
      7528
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      7529,
      7529
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      7530,
      7530
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      7531,
      7531
    ],
    "valid"
  ],
  [
    [
      7532,
      7543
    ],
    "valid"
  ],
  [
    [
      7544,
      7544
    ],
    "mapped",
    [
      1085
    ]
  ],
  [
    [
      7545,
      7578
    ],
    "valid"
  ],
  [
    [
      7579,
      7579
    ],
    "mapped",
    [
      594
    ]
  ],
  [
    [
      7580,
      7580
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      7581,
      7581
    ],
    "mapped",
    [
      597
    ]
  ],
  [
    [
      7582,
      7582
    ],
    "mapped",
    [
      240
    ]
  ],
  [
    [
      7583,
      7583
    ],
    "mapped",
    [
      604
    ]
  ],
  [
    [
      7584,
      7584
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      7585,
      7585
    ],
    "mapped",
    [
      607
    ]
  ],
  [
    [
      7586,
      7586
    ],
    "mapped",
    [
      609
    ]
  ],
  [
    [
      7587,
      7587
    ],
    "mapped",
    [
      613
    ]
  ],
  [
    [
      7588,
      7588
    ],
    "mapped",
    [
      616
    ]
  ],
  [
    [
      7589,
      7589
    ],
    "mapped",
    [
      617
    ]
  ],
  [
    [
      7590,
      7590
    ],
    "mapped",
    [
      618
    ]
  ],
  [
    [
      7591,
      7591
    ],
    "mapped",
    [
      7547
    ]
  ],
  [
    [
      7592,
      7592
    ],
    "mapped",
    [
      669
    ]
  ],
  [
    [
      7593,
      7593
    ],
    "mapped",
    [
      621
    ]
  ],
  [
    [
      7594,
      7594
    ],
    "mapped",
    [
      7557
    ]
  ],
  [
    [
      7595,
      7595
    ],
    "mapped",
    [
      671
    ]
  ],
  [
    [
      7596,
      7596
    ],
    "mapped",
    [
      625
    ]
  ],
  [
    [
      7597,
      7597
    ],
    "mapped",
    [
      624
    ]
  ],
  [
    [
      7598,
      7598
    ],
    "mapped",
    [
      626
    ]
  ],
  [
    [
      7599,
      7599
    ],
    "mapped",
    [
      627
    ]
  ],
  [
    [
      7600,
      7600
    ],
    "mapped",
    [
      628
    ]
  ],
  [
    [
      7601,
      7601
    ],
    "mapped",
    [
      629
    ]
  ],
  [
    [
      7602,
      7602
    ],
    "mapped",
    [
      632
    ]
  ],
  [
    [
      7603,
      7603
    ],
    "mapped",
    [
      642
    ]
  ],
  [
    [
      7604,
      7604
    ],
    "mapped",
    [
      643
    ]
  ],
  [
    [
      7605,
      7605
    ],
    "mapped",
    [
      427
    ]
  ],
  [
    [
      7606,
      7606
    ],
    "mapped",
    [
      649
    ]
  ],
  [
    [
      7607,
      7607
    ],
    "mapped",
    [
      650
    ]
  ],
  [
    [
      7608,
      7608
    ],
    "mapped",
    [
      7452
    ]
  ],
  [
    [
      7609,
      7609
    ],
    "mapped",
    [
      651
    ]
  ],
  [
    [
      7610,
      7610
    ],
    "mapped",
    [
      652
    ]
  ],
  [
    [
      7611,
      7611
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      7612,
      7612
    ],
    "mapped",
    [
      656
    ]
  ],
  [
    [
      7613,
      7613
    ],
    "mapped",
    [
      657
    ]
  ],
  [
    [
      7614,
      7614
    ],
    "mapped",
    [
      658
    ]
  ],
  [
    [
      7615,
      7615
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      7616,
      7619
    ],
    "valid"
  ],
  [
    [
      7620,
      7626
    ],
    "valid"
  ],
  [
    [
      7627,
      7654
    ],
    "valid"
  ],
  [
    [
      7655,
      7669
    ],
    "valid"
  ],
  [
    [
      7670,
      7675
    ],
    "disallowed"
  ],
  [
    [
      7676,
      7676
    ],
    "valid"
  ],
  [
    [
      7677,
      7677
    ],
    "valid"
  ],
  [
    [
      7678,
      7679
    ],
    "valid"
  ],
  [
    [
      7680,
      7680
    ],
    "mapped",
    [
      7681
    ]
  ],
  [
    [
      7681,
      7681
    ],
    "valid"
  ],
  [
    [
      7682,
      7682
    ],
    "mapped",
    [
      7683
    ]
  ],
  [
    [
      7683,
      7683
    ],
    "valid"
  ],
  [
    [
      7684,
      7684
    ],
    "mapped",
    [
      7685
    ]
  ],
  [
    [
      7685,
      7685
    ],
    "valid"
  ],
  [
    [
      7686,
      7686
    ],
    "mapped",
    [
      7687
    ]
  ],
  [
    [
      7687,
      7687
    ],
    "valid"
  ],
  [
    [
      7688,
      7688
    ],
    "mapped",
    [
      7689
    ]
  ],
  [
    [
      7689,
      7689
    ],
    "valid"
  ],
  [
    [
      7690,
      7690
    ],
    "mapped",
    [
      7691
    ]
  ],
  [
    [
      7691,
      7691
    ],
    "valid"
  ],
  [
    [
      7692,
      7692
    ],
    "mapped",
    [
      7693
    ]
  ],
  [
    [
      7693,
      7693
    ],
    "valid"
  ],
  [
    [
      7694,
      7694
    ],
    "mapped",
    [
      7695
    ]
  ],
  [
    [
      7695,
      7695
    ],
    "valid"
  ],
  [
    [
      7696,
      7696
    ],
    "mapped",
    [
      7697
    ]
  ],
  [
    [
      7697,
      7697
    ],
    "valid"
  ],
  [
    [
      7698,
      7698
    ],
    "mapped",
    [
      7699
    ]
  ],
  [
    [
      7699,
      7699
    ],
    "valid"
  ],
  [
    [
      7700,
      7700
    ],
    "mapped",
    [
      7701
    ]
  ],
  [
    [
      7701,
      7701
    ],
    "valid"
  ],
  [
    [
      7702,
      7702
    ],
    "mapped",
    [
      7703
    ]
  ],
  [
    [
      7703,
      7703
    ],
    "valid"
  ],
  [
    [
      7704,
      7704
    ],
    "mapped",
    [
      7705
    ]
  ],
  [
    [
      7705,
      7705
    ],
    "valid"
  ],
  [
    [
      7706,
      7706
    ],
    "mapped",
    [
      7707
    ]
  ],
  [
    [
      7707,
      7707
    ],
    "valid"
  ],
  [
    [
      7708,
      7708
    ],
    "mapped",
    [
      7709
    ]
  ],
  [
    [
      7709,
      7709
    ],
    "valid"
  ],
  [
    [
      7710,
      7710
    ],
    "mapped",
    [
      7711
    ]
  ],
  [
    [
      7711,
      7711
    ],
    "valid"
  ],
  [
    [
      7712,
      7712
    ],
    "mapped",
    [
      7713
    ]
  ],
  [
    [
      7713,
      7713
    ],
    "valid"
  ],
  [
    [
      7714,
      7714
    ],
    "mapped",
    [
      7715
    ]
  ],
  [
    [
      7715,
      7715
    ],
    "valid"
  ],
  [
    [
      7716,
      7716
    ],
    "mapped",
    [
      7717
    ]
  ],
  [
    [
      7717,
      7717
    ],
    "valid"
  ],
  [
    [
      7718,
      7718
    ],
    "mapped",
    [
      7719
    ]
  ],
  [
    [
      7719,
      7719
    ],
    "valid"
  ],
  [
    [
      7720,
      7720
    ],
    "mapped",
    [
      7721
    ]
  ],
  [
    [
      7721,
      7721
    ],
    "valid"
  ],
  [
    [
      7722,
      7722
    ],
    "mapped",
    [
      7723
    ]
  ],
  [
    [
      7723,
      7723
    ],
    "valid"
  ],
  [
    [
      7724,
      7724
    ],
    "mapped",
    [
      7725
    ]
  ],
  [
    [
      7725,
      7725
    ],
    "valid"
  ],
  [
    [
      7726,
      7726
    ],
    "mapped",
    [
      7727
    ]
  ],
  [
    [
      7727,
      7727
    ],
    "valid"
  ],
  [
    [
      7728,
      7728
    ],
    "mapped",
    [
      7729
    ]
  ],
  [
    [
      7729,
      7729
    ],
    "valid"
  ],
  [
    [
      7730,
      7730
    ],
    "mapped",
    [
      7731
    ]
  ],
  [
    [
      7731,
      7731
    ],
    "valid"
  ],
  [
    [
      7732,
      7732
    ],
    "mapped",
    [
      7733
    ]
  ],
  [
    [
      7733,
      7733
    ],
    "valid"
  ],
  [
    [
      7734,
      7734
    ],
    "mapped",
    [
      7735
    ]
  ],
  [
    [
      7735,
      7735
    ],
    "valid"
  ],
  [
    [
      7736,
      7736
    ],
    "mapped",
    [
      7737
    ]
  ],
  [
    [
      7737,
      7737
    ],
    "valid"
  ],
  [
    [
      7738,
      7738
    ],
    "mapped",
    [
      7739
    ]
  ],
  [
    [
      7739,
      7739
    ],
    "valid"
  ],
  [
    [
      7740,
      7740
    ],
    "mapped",
    [
      7741
    ]
  ],
  [
    [
      7741,
      7741
    ],
    "valid"
  ],
  [
    [
      7742,
      7742
    ],
    "mapped",
    [
      7743
    ]
  ],
  [
    [
      7743,
      7743
    ],
    "valid"
  ],
  [
    [
      7744,
      7744
    ],
    "mapped",
    [
      7745
    ]
  ],
  [
    [
      7745,
      7745
    ],
    "valid"
  ],
  [
    [
      7746,
      7746
    ],
    "mapped",
    [
      7747
    ]
  ],
  [
    [
      7747,
      7747
    ],
    "valid"
  ],
  [
    [
      7748,
      7748
    ],
    "mapped",
    [
      7749
    ]
  ],
  [
    [
      7749,
      7749
    ],
    "valid"
  ],
  [
    [
      7750,
      7750
    ],
    "mapped",
    [
      7751
    ]
  ],
  [
    [
      7751,
      7751
    ],
    "valid"
  ],
  [
    [
      7752,
      7752
    ],
    "mapped",
    [
      7753
    ]
  ],
  [
    [
      7753,
      7753
    ],
    "valid"
  ],
  [
    [
      7754,
      7754
    ],
    "mapped",
    [
      7755
    ]
  ],
  [
    [
      7755,
      7755
    ],
    "valid"
  ],
  [
    [
      7756,
      7756
    ],
    "mapped",
    [
      7757
    ]
  ],
  [
    [
      7757,
      7757
    ],
    "valid"
  ],
  [
    [
      7758,
      7758
    ],
    "mapped",
    [
      7759
    ]
  ],
  [
    [
      7759,
      7759
    ],
    "valid"
  ],
  [
    [
      7760,
      7760
    ],
    "mapped",
    [
      7761
    ]
  ],
  [
    [
      7761,
      7761
    ],
    "valid"
  ],
  [
    [
      7762,
      7762
    ],
    "mapped",
    [
      7763
    ]
  ],
  [
    [
      7763,
      7763
    ],
    "valid"
  ],
  [
    [
      7764,
      7764
    ],
    "mapped",
    [
      7765
    ]
  ],
  [
    [
      7765,
      7765
    ],
    "valid"
  ],
  [
    [
      7766,
      7766
    ],
    "mapped",
    [
      7767
    ]
  ],
  [
    [
      7767,
      7767
    ],
    "valid"
  ],
  [
    [
      7768,
      7768
    ],
    "mapped",
    [
      7769
    ]
  ],
  [
    [
      7769,
      7769
    ],
    "valid"
  ],
  [
    [
      7770,
      7770
    ],
    "mapped",
    [
      7771
    ]
  ],
  [
    [
      7771,
      7771
    ],
    "valid"
  ],
  [
    [
      7772,
      7772
    ],
    "mapped",
    [
      7773
    ]
  ],
  [
    [
      7773,
      7773
    ],
    "valid"
  ],
  [
    [
      7774,
      7774
    ],
    "mapped",
    [
      7775
    ]
  ],
  [
    [
      7775,
      7775
    ],
    "valid"
  ],
  [
    [
      7776,
      7776
    ],
    "mapped",
    [
      7777
    ]
  ],
  [
    [
      7777,
      7777
    ],
    "valid"
  ],
  [
    [
      7778,
      7778
    ],
    "mapped",
    [
      7779
    ]
  ],
  [
    [
      7779,
      7779
    ],
    "valid"
  ],
  [
    [
      7780,
      7780
    ],
    "mapped",
    [
      7781
    ]
  ],
  [
    [
      7781,
      7781
    ],
    "valid"
  ],
  [
    [
      7782,
      7782
    ],
    "mapped",
    [
      7783
    ]
  ],
  [
    [
      7783,
      7783
    ],
    "valid"
  ],
  [
    [
      7784,
      7784
    ],
    "mapped",
    [
      7785
    ]
  ],
  [
    [
      7785,
      7785
    ],
    "valid"
  ],
  [
    [
      7786,
      7786
    ],
    "mapped",
    [
      7787
    ]
  ],
  [
    [
      7787,
      7787
    ],
    "valid"
  ],
  [
    [
      7788,
      7788
    ],
    "mapped",
    [
      7789
    ]
  ],
  [
    [
      7789,
      7789
    ],
    "valid"
  ],
  [
    [
      7790,
      7790
    ],
    "mapped",
    [
      7791
    ]
  ],
  [
    [
      7791,
      7791
    ],
    "valid"
  ],
  [
    [
      7792,
      7792
    ],
    "mapped",
    [
      7793
    ]
  ],
  [
    [
      7793,
      7793
    ],
    "valid"
  ],
  [
    [
      7794,
      7794
    ],
    "mapped",
    [
      7795
    ]
  ],
  [
    [
      7795,
      7795
    ],
    "valid"
  ],
  [
    [
      7796,
      7796
    ],
    "mapped",
    [
      7797
    ]
  ],
  [
    [
      7797,
      7797
    ],
    "valid"
  ],
  [
    [
      7798,
      7798
    ],
    "mapped",
    [
      7799
    ]
  ],
  [
    [
      7799,
      7799
    ],
    "valid"
  ],
  [
    [
      7800,
      7800
    ],
    "mapped",
    [
      7801
    ]
  ],
  [
    [
      7801,
      7801
    ],
    "valid"
  ],
  [
    [
      7802,
      7802
    ],
    "mapped",
    [
      7803
    ]
  ],
  [
    [
      7803,
      7803
    ],
    "valid"
  ],
  [
    [
      7804,
      7804
    ],
    "mapped",
    [
      7805
    ]
  ],
  [
    [
      7805,
      7805
    ],
    "valid"
  ],
  [
    [
      7806,
      7806
    ],
    "mapped",
    [
      7807
    ]
  ],
  [
    [
      7807,
      7807
    ],
    "valid"
  ],
  [
    [
      7808,
      7808
    ],
    "mapped",
    [
      7809
    ]
  ],
  [
    [
      7809,
      7809
    ],
    "valid"
  ],
  [
    [
      7810,
      7810
    ],
    "mapped",
    [
      7811
    ]
  ],
  [
    [
      7811,
      7811
    ],
    "valid"
  ],
  [
    [
      7812,
      7812
    ],
    "mapped",
    [
      7813
    ]
  ],
  [
    [
      7813,
      7813
    ],
    "valid"
  ],
  [
    [
      7814,
      7814
    ],
    "mapped",
    [
      7815
    ]
  ],
  [
    [
      7815,
      7815
    ],
    "valid"
  ],
  [
    [
      7816,
      7816
    ],
    "mapped",
    [
      7817
    ]
  ],
  [
    [
      7817,
      7817
    ],
    "valid"
  ],
  [
    [
      7818,
      7818
    ],
    "mapped",
    [
      7819
    ]
  ],
  [
    [
      7819,
      7819
    ],
    "valid"
  ],
  [
    [
      7820,
      7820
    ],
    "mapped",
    [
      7821
    ]
  ],
  [
    [
      7821,
      7821
    ],
    "valid"
  ],
  [
    [
      7822,
      7822
    ],
    "mapped",
    [
      7823
    ]
  ],
  [
    [
      7823,
      7823
    ],
    "valid"
  ],
  [
    [
      7824,
      7824
    ],
    "mapped",
    [
      7825
    ]
  ],
  [
    [
      7825,
      7825
    ],
    "valid"
  ],
  [
    [
      7826,
      7826
    ],
    "mapped",
    [
      7827
    ]
  ],
  [
    [
      7827,
      7827
    ],
    "valid"
  ],
  [
    [
      7828,
      7828
    ],
    "mapped",
    [
      7829
    ]
  ],
  [
    [
      7829,
      7833
    ],
    "valid"
  ],
  [
    [
      7834,
      7834
    ],
    "mapped",
    [
      97,
      702
    ]
  ],
  [
    [
      7835,
      7835
    ],
    "mapped",
    [
      7777
    ]
  ],
  [
    [
      7836,
      7837
    ],
    "valid"
  ],
  [
    [
      7838,
      7838
    ],
    "mapped",
    [
      115,
      115
    ]
  ],
  [
    [
      7839,
      7839
    ],
    "valid"
  ],
  [
    [
      7840,
      7840
    ],
    "mapped",
    [
      7841
    ]
  ],
  [
    [
      7841,
      7841
    ],
    "valid"
  ],
  [
    [
      7842,
      7842
    ],
    "mapped",
    [
      7843
    ]
  ],
  [
    [
      7843,
      7843
    ],
    "valid"
  ],
  [
    [
      7844,
      7844
    ],
    "mapped",
    [
      7845
    ]
  ],
  [
    [
      7845,
      7845
    ],
    "valid"
  ],
  [
    [
      7846,
      7846
    ],
    "mapped",
    [
      7847
    ]
  ],
  [
    [
      7847,
      7847
    ],
    "valid"
  ],
  [
    [
      7848,
      7848
    ],
    "mapped",
    [
      7849
    ]
  ],
  [
    [
      7849,
      7849
    ],
    "valid"
  ],
  [
    [
      7850,
      7850
    ],
    "mapped",
    [
      7851
    ]
  ],
  [
    [
      7851,
      7851
    ],
    "valid"
  ],
  [
    [
      7852,
      7852
    ],
    "mapped",
    [
      7853
    ]
  ],
  [
    [
      7853,
      7853
    ],
    "valid"
  ],
  [
    [
      7854,
      7854
    ],
    "mapped",
    [
      7855
    ]
  ],
  [
    [
      7855,
      7855
    ],
    "valid"
  ],
  [
    [
      7856,
      7856
    ],
    "mapped",
    [
      7857
    ]
  ],
  [
    [
      7857,
      7857
    ],
    "valid"
  ],
  [
    [
      7858,
      7858
    ],
    "mapped",
    [
      7859
    ]
  ],
  [
    [
      7859,
      7859
    ],
    "valid"
  ],
  [
    [
      7860,
      7860
    ],
    "mapped",
    [
      7861
    ]
  ],
  [
    [
      7861,
      7861
    ],
    "valid"
  ],
  [
    [
      7862,
      7862
    ],
    "mapped",
    [
      7863
    ]
  ],
  [
    [
      7863,
      7863
    ],
    "valid"
  ],
  [
    [
      7864,
      7864
    ],
    "mapped",
    [
      7865
    ]
  ],
  [
    [
      7865,
      7865
    ],
    "valid"
  ],
  [
    [
      7866,
      7866
    ],
    "mapped",
    [
      7867
    ]
  ],
  [
    [
      7867,
      7867
    ],
    "valid"
  ],
  [
    [
      7868,
      7868
    ],
    "mapped",
    [
      7869
    ]
  ],
  [
    [
      7869,
      7869
    ],
    "valid"
  ],
  [
    [
      7870,
      7870
    ],
    "mapped",
    [
      7871
    ]
  ],
  [
    [
      7871,
      7871
    ],
    "valid"
  ],
  [
    [
      7872,
      7872
    ],
    "mapped",
    [
      7873
    ]
  ],
  [
    [
      7873,
      7873
    ],
    "valid"
  ],
  [
    [
      7874,
      7874
    ],
    "mapped",
    [
      7875
    ]
  ],
  [
    [
      7875,
      7875
    ],
    "valid"
  ],
  [
    [
      7876,
      7876
    ],
    "mapped",
    [
      7877
    ]
  ],
  [
    [
      7877,
      7877
    ],
    "valid"
  ],
  [
    [
      7878,
      7878
    ],
    "mapped",
    [
      7879
    ]
  ],
  [
    [
      7879,
      7879
    ],
    "valid"
  ],
  [
    [
      7880,
      7880
    ],
    "mapped",
    [
      7881
    ]
  ],
  [
    [
      7881,
      7881
    ],
    "valid"
  ],
  [
    [
      7882,
      7882
    ],
    "mapped",
    [
      7883
    ]
  ],
  [
    [
      7883,
      7883
    ],
    "valid"
  ],
  [
    [
      7884,
      7884
    ],
    "mapped",
    [
      7885
    ]
  ],
  [
    [
      7885,
      7885
    ],
    "valid"
  ],
  [
    [
      7886,
      7886
    ],
    "mapped",
    [
      7887
    ]
  ],
  [
    [
      7887,
      7887
    ],
    "valid"
  ],
  [
    [
      7888,
      7888
    ],
    "mapped",
    [
      7889
    ]
  ],
  [
    [
      7889,
      7889
    ],
    "valid"
  ],
  [
    [
      7890,
      7890
    ],
    "mapped",
    [
      7891
    ]
  ],
  [
    [
      7891,
      7891
    ],
    "valid"
  ],
  [
    [
      7892,
      7892
    ],
    "mapped",
    [
      7893
    ]
  ],
  [
    [
      7893,
      7893
    ],
    "valid"
  ],
  [
    [
      7894,
      7894
    ],
    "mapped",
    [
      7895
    ]
  ],
  [
    [
      7895,
      7895
    ],
    "valid"
  ],
  [
    [
      7896,
      7896
    ],
    "mapped",
    [
      7897
    ]
  ],
  [
    [
      7897,
      7897
    ],
    "valid"
  ],
  [
    [
      7898,
      7898
    ],
    "mapped",
    [
      7899
    ]
  ],
  [
    [
      7899,
      7899
    ],
    "valid"
  ],
  [
    [
      7900,
      7900
    ],
    "mapped",
    [
      7901
    ]
  ],
  [
    [
      7901,
      7901
    ],
    "valid"
  ],
  [
    [
      7902,
      7902
    ],
    "mapped",
    [
      7903
    ]
  ],
  [
    [
      7903,
      7903
    ],
    "valid"
  ],
  [
    [
      7904,
      7904
    ],
    "mapped",
    [
      7905
    ]
  ],
  [
    [
      7905,
      7905
    ],
    "valid"
  ],
  [
    [
      7906,
      7906
    ],
    "mapped",
    [
      7907
    ]
  ],
  [
    [
      7907,
      7907
    ],
    "valid"
  ],
  [
    [
      7908,
      7908
    ],
    "mapped",
    [
      7909
    ]
  ],
  [
    [
      7909,
      7909
    ],
    "valid"
  ],
  [
    [
      7910,
      7910
    ],
    "mapped",
    [
      7911
    ]
  ],
  [
    [
      7911,
      7911
    ],
    "valid"
  ],
  [
    [
      7912,
      7912
    ],
    "mapped",
    [
      7913
    ]
  ],
  [
    [
      7913,
      7913
    ],
    "valid"
  ],
  [
    [
      7914,
      7914
    ],
    "mapped",
    [
      7915
    ]
  ],
  [
    [
      7915,
      7915
    ],
    "valid"
  ],
  [
    [
      7916,
      7916
    ],
    "mapped",
    [
      7917
    ]
  ],
  [
    [
      7917,
      7917
    ],
    "valid"
  ],
  [
    [
      7918,
      7918
    ],
    "mapped",
    [
      7919
    ]
  ],
  [
    [
      7919,
      7919
    ],
    "valid"
  ],
  [
    [
      7920,
      7920
    ],
    "mapped",
    [
      7921
    ]
  ],
  [
    [
      7921,
      7921
    ],
    "valid"
  ],
  [
    [
      7922,
      7922
    ],
    "mapped",
    [
      7923
    ]
  ],
  [
    [
      7923,
      7923
    ],
    "valid"
  ],
  [
    [
      7924,
      7924
    ],
    "mapped",
    [
      7925
    ]
  ],
  [
    [
      7925,
      7925
    ],
    "valid"
  ],
  [
    [
      7926,
      7926
    ],
    "mapped",
    [
      7927
    ]
  ],
  [
    [
      7927,
      7927
    ],
    "valid"
  ],
  [
    [
      7928,
      7928
    ],
    "mapped",
    [
      7929
    ]
  ],
  [
    [
      7929,
      7929
    ],
    "valid"
  ],
  [
    [
      7930,
      7930
    ],
    "mapped",
    [
      7931
    ]
  ],
  [
    [
      7931,
      7931
    ],
    "valid"
  ],
  [
    [
      7932,
      7932
    ],
    "mapped",
    [
      7933
    ]
  ],
  [
    [
      7933,
      7933
    ],
    "valid"
  ],
  [
    [
      7934,
      7934
    ],
    "mapped",
    [
      7935
    ]
  ],
  [
    [
      7935,
      7935
    ],
    "valid"
  ],
  [
    [
      7936,
      7943
    ],
    "valid"
  ],
  [
    [
      7944,
      7944
    ],
    "mapped",
    [
      7936
    ]
  ],
  [
    [
      7945,
      7945
    ],
    "mapped",
    [
      7937
    ]
  ],
  [
    [
      7946,
      7946
    ],
    "mapped",
    [
      7938
    ]
  ],
  [
    [
      7947,
      7947
    ],
    "mapped",
    [
      7939
    ]
  ],
  [
    [
      7948,
      7948
    ],
    "mapped",
    [
      7940
    ]
  ],
  [
    [
      7949,
      7949
    ],
    "mapped",
    [
      7941
    ]
  ],
  [
    [
      7950,
      7950
    ],
    "mapped",
    [
      7942
    ]
  ],
  [
    [
      7951,
      7951
    ],
    "mapped",
    [
      7943
    ]
  ],
  [
    [
      7952,
      7957
    ],
    "valid"
  ],
  [
    [
      7958,
      7959
    ],
    "disallowed"
  ],
  [
    [
      7960,
      7960
    ],
    "mapped",
    [
      7952
    ]
  ],
  [
    [
      7961,
      7961
    ],
    "mapped",
    [
      7953
    ]
  ],
  [
    [
      7962,
      7962
    ],
    "mapped",
    [
      7954
    ]
  ],
  [
    [
      7963,
      7963
    ],
    "mapped",
    [
      7955
    ]
  ],
  [
    [
      7964,
      7964
    ],
    "mapped",
    [
      7956
    ]
  ],
  [
    [
      7965,
      7965
    ],
    "mapped",
    [
      7957
    ]
  ],
  [
    [
      7966,
      7967
    ],
    "disallowed"
  ],
  [
    [
      7968,
      7975
    ],
    "valid"
  ],
  [
    [
      7976,
      7976
    ],
    "mapped",
    [
      7968
    ]
  ],
  [
    [
      7977,
      7977
    ],
    "mapped",
    [
      7969
    ]
  ],
  [
    [
      7978,
      7978
    ],
    "mapped",
    [
      7970
    ]
  ],
  [
    [
      7979,
      7979
    ],
    "mapped",
    [
      7971
    ]
  ],
  [
    [
      7980,
      7980
    ],
    "mapped",
    [
      7972
    ]
  ],
  [
    [
      7981,
      7981
    ],
    "mapped",
    [
      7973
    ]
  ],
  [
    [
      7982,
      7982
    ],
    "mapped",
    [
      7974
    ]
  ],
  [
    [
      7983,
      7983
    ],
    "mapped",
    [
      7975
    ]
  ],
  [
    [
      7984,
      7991
    ],
    "valid"
  ],
  [
    [
      7992,
      7992
    ],
    "mapped",
    [
      7984
    ]
  ],
  [
    [
      7993,
      7993
    ],
    "mapped",
    [
      7985
    ]
  ],
  [
    [
      7994,
      7994
    ],
    "mapped",
    [
      7986
    ]
  ],
  [
    [
      7995,
      7995
    ],
    "mapped",
    [
      7987
    ]
  ],
  [
    [
      7996,
      7996
    ],
    "mapped",
    [
      7988
    ]
  ],
  [
    [
      7997,
      7997
    ],
    "mapped",
    [
      7989
    ]
  ],
  [
    [
      7998,
      7998
    ],
    "mapped",
    [
      7990
    ]
  ],
  [
    [
      7999,
      7999
    ],
    "mapped",
    [
      7991
    ]
  ],
  [
    [
      8e3,
      8005
    ],
    "valid"
  ],
  [
    [
      8006,
      8007
    ],
    "disallowed"
  ],
  [
    [
      8008,
      8008
    ],
    "mapped",
    [
      8e3
    ]
  ],
  [
    [
      8009,
      8009
    ],
    "mapped",
    [
      8001
    ]
  ],
  [
    [
      8010,
      8010
    ],
    "mapped",
    [
      8002
    ]
  ],
  [
    [
      8011,
      8011
    ],
    "mapped",
    [
      8003
    ]
  ],
  [
    [
      8012,
      8012
    ],
    "mapped",
    [
      8004
    ]
  ],
  [
    [
      8013,
      8013
    ],
    "mapped",
    [
      8005
    ]
  ],
  [
    [
      8014,
      8015
    ],
    "disallowed"
  ],
  [
    [
      8016,
      8023
    ],
    "valid"
  ],
  [
    [
      8024,
      8024
    ],
    "disallowed"
  ],
  [
    [
      8025,
      8025
    ],
    "mapped",
    [
      8017
    ]
  ],
  [
    [
      8026,
      8026
    ],
    "disallowed"
  ],
  [
    [
      8027,
      8027
    ],
    "mapped",
    [
      8019
    ]
  ],
  [
    [
      8028,
      8028
    ],
    "disallowed"
  ],
  [
    [
      8029,
      8029
    ],
    "mapped",
    [
      8021
    ]
  ],
  [
    [
      8030,
      8030
    ],
    "disallowed"
  ],
  [
    [
      8031,
      8031
    ],
    "mapped",
    [
      8023
    ]
  ],
  [
    [
      8032,
      8039
    ],
    "valid"
  ],
  [
    [
      8040,
      8040
    ],
    "mapped",
    [
      8032
    ]
  ],
  [
    [
      8041,
      8041
    ],
    "mapped",
    [
      8033
    ]
  ],
  [
    [
      8042,
      8042
    ],
    "mapped",
    [
      8034
    ]
  ],
  [
    [
      8043,
      8043
    ],
    "mapped",
    [
      8035
    ]
  ],
  [
    [
      8044,
      8044
    ],
    "mapped",
    [
      8036
    ]
  ],
  [
    [
      8045,
      8045
    ],
    "mapped",
    [
      8037
    ]
  ],
  [
    [
      8046,
      8046
    ],
    "mapped",
    [
      8038
    ]
  ],
  [
    [
      8047,
      8047
    ],
    "mapped",
    [
      8039
    ]
  ],
  [
    [
      8048,
      8048
    ],
    "valid"
  ],
  [
    [
      8049,
      8049
    ],
    "mapped",
    [
      940
    ]
  ],
  [
    [
      8050,
      8050
    ],
    "valid"
  ],
  [
    [
      8051,
      8051
    ],
    "mapped",
    [
      941
    ]
  ],
  [
    [
      8052,
      8052
    ],
    "valid"
  ],
  [
    [
      8053,
      8053
    ],
    "mapped",
    [
      942
    ]
  ],
  [
    [
      8054,
      8054
    ],
    "valid"
  ],
  [
    [
      8055,
      8055
    ],
    "mapped",
    [
      943
    ]
  ],
  [
    [
      8056,
      8056
    ],
    "valid"
  ],
  [
    [
      8057,
      8057
    ],
    "mapped",
    [
      972
    ]
  ],
  [
    [
      8058,
      8058
    ],
    "valid"
  ],
  [
    [
      8059,
      8059
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      8060,
      8060
    ],
    "valid"
  ],
  [
    [
      8061,
      8061
    ],
    "mapped",
    [
      974
    ]
  ],
  [
    [
      8062,
      8063
    ],
    "disallowed"
  ],
  [
    [
      8064,
      8064
    ],
    "mapped",
    [
      7936,
      953
    ]
  ],
  [
    [
      8065,
      8065
    ],
    "mapped",
    [
      7937,
      953
    ]
  ],
  [
    [
      8066,
      8066
    ],
    "mapped",
    [
      7938,
      953
    ]
  ],
  [
    [
      8067,
      8067
    ],
    "mapped",
    [
      7939,
      953
    ]
  ],
  [
    [
      8068,
      8068
    ],
    "mapped",
    [
      7940,
      953
    ]
  ],
  [
    [
      8069,
      8069
    ],
    "mapped",
    [
      7941,
      953
    ]
  ],
  [
    [
      8070,
      8070
    ],
    "mapped",
    [
      7942,
      953
    ]
  ],
  [
    [
      8071,
      8071
    ],
    "mapped",
    [
      7943,
      953
    ]
  ],
  [
    [
      8072,
      8072
    ],
    "mapped",
    [
      7936,
      953
    ]
  ],
  [
    [
      8073,
      8073
    ],
    "mapped",
    [
      7937,
      953
    ]
  ],
  [
    [
      8074,
      8074
    ],
    "mapped",
    [
      7938,
      953
    ]
  ],
  [
    [
      8075,
      8075
    ],
    "mapped",
    [
      7939,
      953
    ]
  ],
  [
    [
      8076,
      8076
    ],
    "mapped",
    [
      7940,
      953
    ]
  ],
  [
    [
      8077,
      8077
    ],
    "mapped",
    [
      7941,
      953
    ]
  ],
  [
    [
      8078,
      8078
    ],
    "mapped",
    [
      7942,
      953
    ]
  ],
  [
    [
      8079,
      8079
    ],
    "mapped",
    [
      7943,
      953
    ]
  ],
  [
    [
      8080,
      8080
    ],
    "mapped",
    [
      7968,
      953
    ]
  ],
  [
    [
      8081,
      8081
    ],
    "mapped",
    [
      7969,
      953
    ]
  ],
  [
    [
      8082,
      8082
    ],
    "mapped",
    [
      7970,
      953
    ]
  ],
  [
    [
      8083,
      8083
    ],
    "mapped",
    [
      7971,
      953
    ]
  ],
  [
    [
      8084,
      8084
    ],
    "mapped",
    [
      7972,
      953
    ]
  ],
  [
    [
      8085,
      8085
    ],
    "mapped",
    [
      7973,
      953
    ]
  ],
  [
    [
      8086,
      8086
    ],
    "mapped",
    [
      7974,
      953
    ]
  ],
  [
    [
      8087,
      8087
    ],
    "mapped",
    [
      7975,
      953
    ]
  ],
  [
    [
      8088,
      8088
    ],
    "mapped",
    [
      7968,
      953
    ]
  ],
  [
    [
      8089,
      8089
    ],
    "mapped",
    [
      7969,
      953
    ]
  ],
  [
    [
      8090,
      8090
    ],
    "mapped",
    [
      7970,
      953
    ]
  ],
  [
    [
      8091,
      8091
    ],
    "mapped",
    [
      7971,
      953
    ]
  ],
  [
    [
      8092,
      8092
    ],
    "mapped",
    [
      7972,
      953
    ]
  ],
  [
    [
      8093,
      8093
    ],
    "mapped",
    [
      7973,
      953
    ]
  ],
  [
    [
      8094,
      8094
    ],
    "mapped",
    [
      7974,
      953
    ]
  ],
  [
    [
      8095,
      8095
    ],
    "mapped",
    [
      7975,
      953
    ]
  ],
  [
    [
      8096,
      8096
    ],
    "mapped",
    [
      8032,
      953
    ]
  ],
  [
    [
      8097,
      8097
    ],
    "mapped",
    [
      8033,
      953
    ]
  ],
  [
    [
      8098,
      8098
    ],
    "mapped",
    [
      8034,
      953
    ]
  ],
  [
    [
      8099,
      8099
    ],
    "mapped",
    [
      8035,
      953
    ]
  ],
  [
    [
      8100,
      8100
    ],
    "mapped",
    [
      8036,
      953
    ]
  ],
  [
    [
      8101,
      8101
    ],
    "mapped",
    [
      8037,
      953
    ]
  ],
  [
    [
      8102,
      8102
    ],
    "mapped",
    [
      8038,
      953
    ]
  ],
  [
    [
      8103,
      8103
    ],
    "mapped",
    [
      8039,
      953
    ]
  ],
  [
    [
      8104,
      8104
    ],
    "mapped",
    [
      8032,
      953
    ]
  ],
  [
    [
      8105,
      8105
    ],
    "mapped",
    [
      8033,
      953
    ]
  ],
  [
    [
      8106,
      8106
    ],
    "mapped",
    [
      8034,
      953
    ]
  ],
  [
    [
      8107,
      8107
    ],
    "mapped",
    [
      8035,
      953
    ]
  ],
  [
    [
      8108,
      8108
    ],
    "mapped",
    [
      8036,
      953
    ]
  ],
  [
    [
      8109,
      8109
    ],
    "mapped",
    [
      8037,
      953
    ]
  ],
  [
    [
      8110,
      8110
    ],
    "mapped",
    [
      8038,
      953
    ]
  ],
  [
    [
      8111,
      8111
    ],
    "mapped",
    [
      8039,
      953
    ]
  ],
  [
    [
      8112,
      8113
    ],
    "valid"
  ],
  [
    [
      8114,
      8114
    ],
    "mapped",
    [
      8048,
      953
    ]
  ],
  [
    [
      8115,
      8115
    ],
    "mapped",
    [
      945,
      953
    ]
  ],
  [
    [
      8116,
      8116
    ],
    "mapped",
    [
      940,
      953
    ]
  ],
  [
    [
      8117,
      8117
    ],
    "disallowed"
  ],
  [
    [
      8118,
      8118
    ],
    "valid"
  ],
  [
    [
      8119,
      8119
    ],
    "mapped",
    [
      8118,
      953
    ]
  ],
  [
    [
      8120,
      8120
    ],
    "mapped",
    [
      8112
    ]
  ],
  [
    [
      8121,
      8121
    ],
    "mapped",
    [
      8113
    ]
  ],
  [
    [
      8122,
      8122
    ],
    "mapped",
    [
      8048
    ]
  ],
  [
    [
      8123,
      8123
    ],
    "mapped",
    [
      940
    ]
  ],
  [
    [
      8124,
      8124
    ],
    "mapped",
    [
      945,
      953
    ]
  ],
  [
    [
      8125,
      8125
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787
    ]
  ],
  [
    [
      8126,
      8126
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      8127,
      8127
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787
    ]
  ],
  [
    [
      8128,
      8128
    ],
    "disallowed_STD3_mapped",
    [
      32,
      834
    ]
  ],
  [
    [
      8129,
      8129
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      834
    ]
  ],
  [
    [
      8130,
      8130
    ],
    "mapped",
    [
      8052,
      953
    ]
  ],
  [
    [
      8131,
      8131
    ],
    "mapped",
    [
      951,
      953
    ]
  ],
  [
    [
      8132,
      8132
    ],
    "mapped",
    [
      942,
      953
    ]
  ],
  [
    [
      8133,
      8133
    ],
    "disallowed"
  ],
  [
    [
      8134,
      8134
    ],
    "valid"
  ],
  [
    [
      8135,
      8135
    ],
    "mapped",
    [
      8134,
      953
    ]
  ],
  [
    [
      8136,
      8136
    ],
    "mapped",
    [
      8050
    ]
  ],
  [
    [
      8137,
      8137
    ],
    "mapped",
    [
      941
    ]
  ],
  [
    [
      8138,
      8138
    ],
    "mapped",
    [
      8052
    ]
  ],
  [
    [
      8139,
      8139
    ],
    "mapped",
    [
      942
    ]
  ],
  [
    [
      8140,
      8140
    ],
    "mapped",
    [
      951,
      953
    ]
  ],
  [
    [
      8141,
      8141
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787,
      768
    ]
  ],
  [
    [
      8142,
      8142
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787,
      769
    ]
  ],
  [
    [
      8143,
      8143
    ],
    "disallowed_STD3_mapped",
    [
      32,
      787,
      834
    ]
  ],
  [
    [
      8144,
      8146
    ],
    "valid"
  ],
  [
    [
      8147,
      8147
    ],
    "mapped",
    [
      912
    ]
  ],
  [
    [
      8148,
      8149
    ],
    "disallowed"
  ],
  [
    [
      8150,
      8151
    ],
    "valid"
  ],
  [
    [
      8152,
      8152
    ],
    "mapped",
    [
      8144
    ]
  ],
  [
    [
      8153,
      8153
    ],
    "mapped",
    [
      8145
    ]
  ],
  [
    [
      8154,
      8154
    ],
    "mapped",
    [
      8054
    ]
  ],
  [
    [
      8155,
      8155
    ],
    "mapped",
    [
      943
    ]
  ],
  [
    [
      8156,
      8156
    ],
    "disallowed"
  ],
  [
    [
      8157,
      8157
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788,
      768
    ]
  ],
  [
    [
      8158,
      8158
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788,
      769
    ]
  ],
  [
    [
      8159,
      8159
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788,
      834
    ]
  ],
  [
    [
      8160,
      8162
    ],
    "valid"
  ],
  [
    [
      8163,
      8163
    ],
    "mapped",
    [
      944
    ]
  ],
  [
    [
      8164,
      8167
    ],
    "valid"
  ],
  [
    [
      8168,
      8168
    ],
    "mapped",
    [
      8160
    ]
  ],
  [
    [
      8169,
      8169
    ],
    "mapped",
    [
      8161
    ]
  ],
  [
    [
      8170,
      8170
    ],
    "mapped",
    [
      8058
    ]
  ],
  [
    [
      8171,
      8171
    ],
    "mapped",
    [
      973
    ]
  ],
  [
    [
      8172,
      8172
    ],
    "mapped",
    [
      8165
    ]
  ],
  [
    [
      8173,
      8173
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      768
    ]
  ],
  [
    [
      8174,
      8174
    ],
    "disallowed_STD3_mapped",
    [
      32,
      776,
      769
    ]
  ],
  [
    [
      8175,
      8175
    ],
    "disallowed_STD3_mapped",
    [
      96
    ]
  ],
  [
    [
      8176,
      8177
    ],
    "disallowed"
  ],
  [
    [
      8178,
      8178
    ],
    "mapped",
    [
      8060,
      953
    ]
  ],
  [
    [
      8179,
      8179
    ],
    "mapped",
    [
      969,
      953
    ]
  ],
  [
    [
      8180,
      8180
    ],
    "mapped",
    [
      974,
      953
    ]
  ],
  [
    [
      8181,
      8181
    ],
    "disallowed"
  ],
  [
    [
      8182,
      8182
    ],
    "valid"
  ],
  [
    [
      8183,
      8183
    ],
    "mapped",
    [
      8182,
      953
    ]
  ],
  [
    [
      8184,
      8184
    ],
    "mapped",
    [
      8056
    ]
  ],
  [
    [
      8185,
      8185
    ],
    "mapped",
    [
      972
    ]
  ],
  [
    [
      8186,
      8186
    ],
    "mapped",
    [
      8060
    ]
  ],
  [
    [
      8187,
      8187
    ],
    "mapped",
    [
      974
    ]
  ],
  [
    [
      8188,
      8188
    ],
    "mapped",
    [
      969,
      953
    ]
  ],
  [
    [
      8189,
      8189
    ],
    "disallowed_STD3_mapped",
    [
      32,
      769
    ]
  ],
  [
    [
      8190,
      8190
    ],
    "disallowed_STD3_mapped",
    [
      32,
      788
    ]
  ],
  [
    [
      8191,
      8191
    ],
    "disallowed"
  ],
  [
    [
      8192,
      8202
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      8203,
      8203
    ],
    "ignored"
  ],
  [
    [
      8204,
      8205
    ],
    "deviation",
    []
  ],
  [
    [
      8206,
      8207
    ],
    "disallowed"
  ],
  [
    [
      8208,
      8208
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8209,
      8209
    ],
    "mapped",
    [
      8208
    ]
  ],
  [
    [
      8210,
      8214
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8215,
      8215
    ],
    "disallowed_STD3_mapped",
    [
      32,
      819
    ]
  ],
  [
    [
      8216,
      8227
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8228,
      8230
    ],
    "disallowed"
  ],
  [
    [
      8231,
      8231
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8232,
      8238
    ],
    "disallowed"
  ],
  [
    [
      8239,
      8239
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      8240,
      8242
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8243,
      8243
    ],
    "mapped",
    [
      8242,
      8242
    ]
  ],
  [
    [
      8244,
      8244
    ],
    "mapped",
    [
      8242,
      8242,
      8242
    ]
  ],
  [
    [
      8245,
      8245
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8246,
      8246
    ],
    "mapped",
    [
      8245,
      8245
    ]
  ],
  [
    [
      8247,
      8247
    ],
    "mapped",
    [
      8245,
      8245,
      8245
    ]
  ],
  [
    [
      8248,
      8251
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8252,
      8252
    ],
    "disallowed_STD3_mapped",
    [
      33,
      33
    ]
  ],
  [
    [
      8253,
      8253
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8254,
      8254
    ],
    "disallowed_STD3_mapped",
    [
      32,
      773
    ]
  ],
  [
    [
      8255,
      8262
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8263,
      8263
    ],
    "disallowed_STD3_mapped",
    [
      63,
      63
    ]
  ],
  [
    [
      8264,
      8264
    ],
    "disallowed_STD3_mapped",
    [
      63,
      33
    ]
  ],
  [
    [
      8265,
      8265
    ],
    "disallowed_STD3_mapped",
    [
      33,
      63
    ]
  ],
  [
    [
      8266,
      8269
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8270,
      8274
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8275,
      8276
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8277,
      8278
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8279,
      8279
    ],
    "mapped",
    [
      8242,
      8242,
      8242,
      8242
    ]
  ],
  [
    [
      8280,
      8286
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8287,
      8287
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      8288,
      8288
    ],
    "ignored"
  ],
  [
    [
      8289,
      8291
    ],
    "disallowed"
  ],
  [
    [
      8292,
      8292
    ],
    "ignored"
  ],
  [
    [
      8293,
      8293
    ],
    "disallowed"
  ],
  [
    [
      8294,
      8297
    ],
    "disallowed"
  ],
  [
    [
      8298,
      8303
    ],
    "disallowed"
  ],
  [
    [
      8304,
      8304
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      8305,
      8305
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8306,
      8307
    ],
    "disallowed"
  ],
  [
    [
      8308,
      8308
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      8309,
      8309
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      8310,
      8310
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      8311,
      8311
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      8312,
      8312
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      8313,
      8313
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      8314,
      8314
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      8315,
      8315
    ],
    "mapped",
    [
      8722
    ]
  ],
  [
    [
      8316,
      8316
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      8317,
      8317
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      8318,
      8318
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      8319,
      8319
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      8320,
      8320
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      8321,
      8321
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      8322,
      8322
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      8323,
      8323
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      8324,
      8324
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      8325,
      8325
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      8326,
      8326
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      8327,
      8327
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      8328,
      8328
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      8329,
      8329
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      8330,
      8330
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      8331,
      8331
    ],
    "mapped",
    [
      8722
    ]
  ],
  [
    [
      8332,
      8332
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      8333,
      8333
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      8334,
      8334
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      8335,
      8335
    ],
    "disallowed"
  ],
  [
    [
      8336,
      8336
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      8337,
      8337
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      8338,
      8338
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      8339,
      8339
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      8340,
      8340
    ],
    "mapped",
    [
      601
    ]
  ],
  [
    [
      8341,
      8341
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      8342,
      8342
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      8343,
      8343
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8344,
      8344
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8345,
      8345
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      8346,
      8346
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      8347,
      8347
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      8348,
      8348
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      8349,
      8351
    ],
    "disallowed"
  ],
  [
    [
      8352,
      8359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8360,
      8360
    ],
    "mapped",
    [
      114,
      115
    ]
  ],
  [
    [
      8361,
      8362
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8363,
      8363
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8364,
      8364
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8365,
      8367
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8368,
      8369
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8370,
      8373
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8374,
      8376
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8377,
      8377
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8378,
      8378
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8379,
      8381
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8382,
      8382
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8383,
      8399
    ],
    "disallowed"
  ],
  [
    [
      8400,
      8417
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8418,
      8419
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8420,
      8426
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8427,
      8427
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8428,
      8431
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8432,
      8432
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8433,
      8447
    ],
    "disallowed"
  ],
  [
    [
      8448,
      8448
    ],
    "disallowed_STD3_mapped",
    [
      97,
      47,
      99
    ]
  ],
  [
    [
      8449,
      8449
    ],
    "disallowed_STD3_mapped",
    [
      97,
      47,
      115
    ]
  ],
  [
    [
      8450,
      8450
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8451,
      8451
    ],
    "mapped",
    [
      176,
      99
    ]
  ],
  [
    [
      8452,
      8452
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8453,
      8453
    ],
    "disallowed_STD3_mapped",
    [
      99,
      47,
      111
    ]
  ],
  [
    [
      8454,
      8454
    ],
    "disallowed_STD3_mapped",
    [
      99,
      47,
      117
    ]
  ],
  [
    [
      8455,
      8455
    ],
    "mapped",
    [
      603
    ]
  ],
  [
    [
      8456,
      8456
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8457,
      8457
    ],
    "mapped",
    [
      176,
      102
    ]
  ],
  [
    [
      8458,
      8458
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      8459,
      8462
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      8463,
      8463
    ],
    "mapped",
    [
      295
    ]
  ],
  [
    [
      8464,
      8465
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8466,
      8467
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8468,
      8468
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8469,
      8469
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      8470,
      8470
    ],
    "mapped",
    [
      110,
      111
    ]
  ],
  [
    [
      8471,
      8472
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8473,
      8473
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      8474,
      8474
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      8475,
      8477
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      8478,
      8479
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8480,
      8480
    ],
    "mapped",
    [
      115,
      109
    ]
  ],
  [
    [
      8481,
      8481
    ],
    "mapped",
    [
      116,
      101,
      108
    ]
  ],
  [
    [
      8482,
      8482
    ],
    "mapped",
    [
      116,
      109
    ]
  ],
  [
    [
      8483,
      8483
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8484,
      8484
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      8485,
      8485
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8486,
      8486
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      8487,
      8487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8488,
      8488
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      8489,
      8489
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8490,
      8490
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      8491,
      8491
    ],
    "mapped",
    [
      229
    ]
  ],
  [
    [
      8492,
      8492
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      8493,
      8493
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8494,
      8494
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8495,
      8496
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      8497,
      8497
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      8498,
      8498
    ],
    "disallowed"
  ],
  [
    [
      8499,
      8499
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8500,
      8500
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      8501,
      8501
    ],
    "mapped",
    [
      1488
    ]
  ],
  [
    [
      8502,
      8502
    ],
    "mapped",
    [
      1489
    ]
  ],
  [
    [
      8503,
      8503
    ],
    "mapped",
    [
      1490
    ]
  ],
  [
    [
      8504,
      8504
    ],
    "mapped",
    [
      1491
    ]
  ],
  [
    [
      8505,
      8505
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8506,
      8506
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8507,
      8507
    ],
    "mapped",
    [
      102,
      97,
      120
    ]
  ],
  [
    [
      8508,
      8508
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      8509,
      8510
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      8511,
      8511
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      8512,
      8512
    ],
    "mapped",
    [
      8721
    ]
  ],
  [
    [
      8513,
      8516
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8517,
      8518
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      8519,
      8519
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      8520,
      8520
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8521,
      8521
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      8522,
      8523
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8524,
      8524
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8525,
      8525
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8526,
      8526
    ],
    "valid"
  ],
  [
    [
      8527,
      8527
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8528,
      8528
    ],
    "mapped",
    [
      49,
      8260,
      55
    ]
  ],
  [
    [
      8529,
      8529
    ],
    "mapped",
    [
      49,
      8260,
      57
    ]
  ],
  [
    [
      8530,
      8530
    ],
    "mapped",
    [
      49,
      8260,
      49,
      48
    ]
  ],
  [
    [
      8531,
      8531
    ],
    "mapped",
    [
      49,
      8260,
      51
    ]
  ],
  [
    [
      8532,
      8532
    ],
    "mapped",
    [
      50,
      8260,
      51
    ]
  ],
  [
    [
      8533,
      8533
    ],
    "mapped",
    [
      49,
      8260,
      53
    ]
  ],
  [
    [
      8534,
      8534
    ],
    "mapped",
    [
      50,
      8260,
      53
    ]
  ],
  [
    [
      8535,
      8535
    ],
    "mapped",
    [
      51,
      8260,
      53
    ]
  ],
  [
    [
      8536,
      8536
    ],
    "mapped",
    [
      52,
      8260,
      53
    ]
  ],
  [
    [
      8537,
      8537
    ],
    "mapped",
    [
      49,
      8260,
      54
    ]
  ],
  [
    [
      8538,
      8538
    ],
    "mapped",
    [
      53,
      8260,
      54
    ]
  ],
  [
    [
      8539,
      8539
    ],
    "mapped",
    [
      49,
      8260,
      56
    ]
  ],
  [
    [
      8540,
      8540
    ],
    "mapped",
    [
      51,
      8260,
      56
    ]
  ],
  [
    [
      8541,
      8541
    ],
    "mapped",
    [
      53,
      8260,
      56
    ]
  ],
  [
    [
      8542,
      8542
    ],
    "mapped",
    [
      55,
      8260,
      56
    ]
  ],
  [
    [
      8543,
      8543
    ],
    "mapped",
    [
      49,
      8260
    ]
  ],
  [
    [
      8544,
      8544
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8545,
      8545
    ],
    "mapped",
    [
      105,
      105
    ]
  ],
  [
    [
      8546,
      8546
    ],
    "mapped",
    [
      105,
      105,
      105
    ]
  ],
  [
    [
      8547,
      8547
    ],
    "mapped",
    [
      105,
      118
    ]
  ],
  [
    [
      8548,
      8548
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      8549,
      8549
    ],
    "mapped",
    [
      118,
      105
    ]
  ],
  [
    [
      8550,
      8550
    ],
    "mapped",
    [
      118,
      105,
      105
    ]
  ],
  [
    [
      8551,
      8551
    ],
    "mapped",
    [
      118,
      105,
      105,
      105
    ]
  ],
  [
    [
      8552,
      8552
    ],
    "mapped",
    [
      105,
      120
    ]
  ],
  [
    [
      8553,
      8553
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      8554,
      8554
    ],
    "mapped",
    [
      120,
      105
    ]
  ],
  [
    [
      8555,
      8555
    ],
    "mapped",
    [
      120,
      105,
      105
    ]
  ],
  [
    [
      8556,
      8556
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8557,
      8557
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8558,
      8558
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      8559,
      8559
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8560,
      8560
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      8561,
      8561
    ],
    "mapped",
    [
      105,
      105
    ]
  ],
  [
    [
      8562,
      8562
    ],
    "mapped",
    [
      105,
      105,
      105
    ]
  ],
  [
    [
      8563,
      8563
    ],
    "mapped",
    [
      105,
      118
    ]
  ],
  [
    [
      8564,
      8564
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      8565,
      8565
    ],
    "mapped",
    [
      118,
      105
    ]
  ],
  [
    [
      8566,
      8566
    ],
    "mapped",
    [
      118,
      105,
      105
    ]
  ],
  [
    [
      8567,
      8567
    ],
    "mapped",
    [
      118,
      105,
      105,
      105
    ]
  ],
  [
    [
      8568,
      8568
    ],
    "mapped",
    [
      105,
      120
    ]
  ],
  [
    [
      8569,
      8569
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      8570,
      8570
    ],
    "mapped",
    [
      120,
      105
    ]
  ],
  [
    [
      8571,
      8571
    ],
    "mapped",
    [
      120,
      105,
      105
    ]
  ],
  [
    [
      8572,
      8572
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      8573,
      8573
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      8574,
      8574
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      8575,
      8575
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      8576,
      8578
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8579,
      8579
    ],
    "disallowed"
  ],
  [
    [
      8580,
      8580
    ],
    "valid"
  ],
  [
    [
      8581,
      8584
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8585,
      8585
    ],
    "mapped",
    [
      48,
      8260,
      51
    ]
  ],
  [
    [
      8586,
      8587
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8588,
      8591
    ],
    "disallowed"
  ],
  [
    [
      8592,
      8682
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8683,
      8691
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8692,
      8703
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8704,
      8747
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8748,
      8748
    ],
    "mapped",
    [
      8747,
      8747
    ]
  ],
  [
    [
      8749,
      8749
    ],
    "mapped",
    [
      8747,
      8747,
      8747
    ]
  ],
  [
    [
      8750,
      8750
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8751,
      8751
    ],
    "mapped",
    [
      8750,
      8750
    ]
  ],
  [
    [
      8752,
      8752
    ],
    "mapped",
    [
      8750,
      8750,
      8750
    ]
  ],
  [
    [
      8753,
      8799
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8800,
      8800
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      8801,
      8813
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8814,
      8815
    ],
    "disallowed_STD3_valid"
  ],
  [
    [
      8816,
      8945
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8946,
      8959
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8960,
      8960
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8961,
      8961
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      8962,
      9e3
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9001,
      9001
    ],
    "mapped",
    [
      12296
    ]
  ],
  [
    [
      9002,
      9002
    ],
    "mapped",
    [
      12297
    ]
  ],
  [
    [
      9003,
      9082
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9083,
      9083
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9084,
      9084
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9085,
      9114
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9115,
      9166
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9167,
      9168
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9169,
      9179
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9180,
      9191
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9192,
      9192
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9193,
      9203
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9204,
      9210
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9211,
      9215
    ],
    "disallowed"
  ],
  [
    [
      9216,
      9252
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9253,
      9254
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9255,
      9279
    ],
    "disallowed"
  ],
  [
    [
      9280,
      9290
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9291,
      9311
    ],
    "disallowed"
  ],
  [
    [
      9312,
      9312
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      9313,
      9313
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      9314,
      9314
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      9315,
      9315
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      9316,
      9316
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      9317,
      9317
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      9318,
      9318
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      9319,
      9319
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      9320,
      9320
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      9321,
      9321
    ],
    "mapped",
    [
      49,
      48
    ]
  ],
  [
    [
      9322,
      9322
    ],
    "mapped",
    [
      49,
      49
    ]
  ],
  [
    [
      9323,
      9323
    ],
    "mapped",
    [
      49,
      50
    ]
  ],
  [
    [
      9324,
      9324
    ],
    "mapped",
    [
      49,
      51
    ]
  ],
  [
    [
      9325,
      9325
    ],
    "mapped",
    [
      49,
      52
    ]
  ],
  [
    [
      9326,
      9326
    ],
    "mapped",
    [
      49,
      53
    ]
  ],
  [
    [
      9327,
      9327
    ],
    "mapped",
    [
      49,
      54
    ]
  ],
  [
    [
      9328,
      9328
    ],
    "mapped",
    [
      49,
      55
    ]
  ],
  [
    [
      9329,
      9329
    ],
    "mapped",
    [
      49,
      56
    ]
  ],
  [
    [
      9330,
      9330
    ],
    "mapped",
    [
      49,
      57
    ]
  ],
  [
    [
      9331,
      9331
    ],
    "mapped",
    [
      50,
      48
    ]
  ],
  [
    [
      9332,
      9332
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      41
    ]
  ],
  [
    [
      9333,
      9333
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50,
      41
    ]
  ],
  [
    [
      9334,
      9334
    ],
    "disallowed_STD3_mapped",
    [
      40,
      51,
      41
    ]
  ],
  [
    [
      9335,
      9335
    ],
    "disallowed_STD3_mapped",
    [
      40,
      52,
      41
    ]
  ],
  [
    [
      9336,
      9336
    ],
    "disallowed_STD3_mapped",
    [
      40,
      53,
      41
    ]
  ],
  [
    [
      9337,
      9337
    ],
    "disallowed_STD3_mapped",
    [
      40,
      54,
      41
    ]
  ],
  [
    [
      9338,
      9338
    ],
    "disallowed_STD3_mapped",
    [
      40,
      55,
      41
    ]
  ],
  [
    [
      9339,
      9339
    ],
    "disallowed_STD3_mapped",
    [
      40,
      56,
      41
    ]
  ],
  [
    [
      9340,
      9340
    ],
    "disallowed_STD3_mapped",
    [
      40,
      57,
      41
    ]
  ],
  [
    [
      9341,
      9341
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      48,
      41
    ]
  ],
  [
    [
      9342,
      9342
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      49,
      41
    ]
  ],
  [
    [
      9343,
      9343
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      50,
      41
    ]
  ],
  [
    [
      9344,
      9344
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      51,
      41
    ]
  ],
  [
    [
      9345,
      9345
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      52,
      41
    ]
  ],
  [
    [
      9346,
      9346
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      53,
      41
    ]
  ],
  [
    [
      9347,
      9347
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      54,
      41
    ]
  ],
  [
    [
      9348,
      9348
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      55,
      41
    ]
  ],
  [
    [
      9349,
      9349
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      56,
      41
    ]
  ],
  [
    [
      9350,
      9350
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49,
      57,
      41
    ]
  ],
  [
    [
      9351,
      9351
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50,
      48,
      41
    ]
  ],
  [
    [
      9352,
      9371
    ],
    "disallowed"
  ],
  [
    [
      9372,
      9372
    ],
    "disallowed_STD3_mapped",
    [
      40,
      97,
      41
    ]
  ],
  [
    [
      9373,
      9373
    ],
    "disallowed_STD3_mapped",
    [
      40,
      98,
      41
    ]
  ],
  [
    [
      9374,
      9374
    ],
    "disallowed_STD3_mapped",
    [
      40,
      99,
      41
    ]
  ],
  [
    [
      9375,
      9375
    ],
    "disallowed_STD3_mapped",
    [
      40,
      100,
      41
    ]
  ],
  [
    [
      9376,
      9376
    ],
    "disallowed_STD3_mapped",
    [
      40,
      101,
      41
    ]
  ],
  [
    [
      9377,
      9377
    ],
    "disallowed_STD3_mapped",
    [
      40,
      102,
      41
    ]
  ],
  [
    [
      9378,
      9378
    ],
    "disallowed_STD3_mapped",
    [
      40,
      103,
      41
    ]
  ],
  [
    [
      9379,
      9379
    ],
    "disallowed_STD3_mapped",
    [
      40,
      104,
      41
    ]
  ],
  [
    [
      9380,
      9380
    ],
    "disallowed_STD3_mapped",
    [
      40,
      105,
      41
    ]
  ],
  [
    [
      9381,
      9381
    ],
    "disallowed_STD3_mapped",
    [
      40,
      106,
      41
    ]
  ],
  [
    [
      9382,
      9382
    ],
    "disallowed_STD3_mapped",
    [
      40,
      107,
      41
    ]
  ],
  [
    [
      9383,
      9383
    ],
    "disallowed_STD3_mapped",
    [
      40,
      108,
      41
    ]
  ],
  [
    [
      9384,
      9384
    ],
    "disallowed_STD3_mapped",
    [
      40,
      109,
      41
    ]
  ],
  [
    [
      9385,
      9385
    ],
    "disallowed_STD3_mapped",
    [
      40,
      110,
      41
    ]
  ],
  [
    [
      9386,
      9386
    ],
    "disallowed_STD3_mapped",
    [
      40,
      111,
      41
    ]
  ],
  [
    [
      9387,
      9387
    ],
    "disallowed_STD3_mapped",
    [
      40,
      112,
      41
    ]
  ],
  [
    [
      9388,
      9388
    ],
    "disallowed_STD3_mapped",
    [
      40,
      113,
      41
    ]
  ],
  [
    [
      9389,
      9389
    ],
    "disallowed_STD3_mapped",
    [
      40,
      114,
      41
    ]
  ],
  [
    [
      9390,
      9390
    ],
    "disallowed_STD3_mapped",
    [
      40,
      115,
      41
    ]
  ],
  [
    [
      9391,
      9391
    ],
    "disallowed_STD3_mapped",
    [
      40,
      116,
      41
    ]
  ],
  [
    [
      9392,
      9392
    ],
    "disallowed_STD3_mapped",
    [
      40,
      117,
      41
    ]
  ],
  [
    [
      9393,
      9393
    ],
    "disallowed_STD3_mapped",
    [
      40,
      118,
      41
    ]
  ],
  [
    [
      9394,
      9394
    ],
    "disallowed_STD3_mapped",
    [
      40,
      119,
      41
    ]
  ],
  [
    [
      9395,
      9395
    ],
    "disallowed_STD3_mapped",
    [
      40,
      120,
      41
    ]
  ],
  [
    [
      9396,
      9396
    ],
    "disallowed_STD3_mapped",
    [
      40,
      121,
      41
    ]
  ],
  [
    [
      9397,
      9397
    ],
    "disallowed_STD3_mapped",
    [
      40,
      122,
      41
    ]
  ],
  [
    [
      9398,
      9398
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      9399,
      9399
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      9400,
      9400
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      9401,
      9401
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      9402,
      9402
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      9403,
      9403
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      9404,
      9404
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      9405,
      9405
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      9406,
      9406
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      9407,
      9407
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      9408,
      9408
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      9409,
      9409
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      9410,
      9410
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      9411,
      9411
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      9412,
      9412
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      9413,
      9413
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      9414,
      9414
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      9415,
      9415
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      9416,
      9416
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      9417,
      9417
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      9418,
      9418
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      9419,
      9419
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      9420,
      9420
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      9421,
      9421
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      9422,
      9422
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      9423,
      9423
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      9424,
      9424
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      9425,
      9425
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      9426,
      9426
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      9427,
      9427
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      9428,
      9428
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      9429,
      9429
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      9430,
      9430
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      9431,
      9431
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      9432,
      9432
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      9433,
      9433
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      9434,
      9434
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      9435,
      9435
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      9436,
      9436
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      9437,
      9437
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      9438,
      9438
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      9439,
      9439
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      9440,
      9440
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      9441,
      9441
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      9442,
      9442
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      9443,
      9443
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      9444,
      9444
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      9445,
      9445
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      9446,
      9446
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      9447,
      9447
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      9448,
      9448
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      9449,
      9449
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      9450,
      9450
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      9451,
      9470
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9471,
      9471
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9472,
      9621
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9622,
      9631
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9632,
      9711
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9712,
      9719
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9720,
      9727
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9728,
      9747
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9748,
      9749
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9750,
      9751
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9752,
      9752
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9753,
      9753
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9754,
      9839
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9840,
      9841
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9842,
      9853
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9854,
      9855
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9856,
      9865
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9866,
      9873
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9874,
      9884
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9885,
      9885
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9886,
      9887
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9888,
      9889
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9890,
      9905
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9906,
      9906
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9907,
      9916
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9917,
      9919
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9920,
      9923
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9924,
      9933
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9934,
      9934
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9935,
      9953
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9954,
      9954
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9955,
      9955
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9956,
      9959
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9960,
      9983
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9984,
      9984
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9985,
      9988
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9989,
      9989
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9990,
      9993
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9994,
      9995
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      9996,
      10023
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10024,
      10024
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10025,
      10059
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10060,
      10060
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10061,
      10061
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10062,
      10062
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10063,
      10066
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10067,
      10069
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10070,
      10070
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10071,
      10071
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10072,
      10078
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10079,
      10080
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10081,
      10087
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10088,
      10101
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10102,
      10132
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10133,
      10135
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10136,
      10159
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10160,
      10160
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10161,
      10174
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10175,
      10175
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10176,
      10182
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10183,
      10186
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10187,
      10187
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10188,
      10188
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10189,
      10189
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10190,
      10191
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10192,
      10219
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10220,
      10223
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10224,
      10239
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10240,
      10495
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10496,
      10763
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10764,
      10764
    ],
    "mapped",
    [
      8747,
      8747,
      8747,
      8747
    ]
  ],
  [
    [
      10765,
      10867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10868,
      10868
    ],
    "disallowed_STD3_mapped",
    [
      58,
      58,
      61
    ]
  ],
  [
    [
      10869,
      10869
    ],
    "disallowed_STD3_mapped",
    [
      61,
      61
    ]
  ],
  [
    [
      10870,
      10870
    ],
    "disallowed_STD3_mapped",
    [
      61,
      61,
      61
    ]
  ],
  [
    [
      10871,
      10971
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      10972,
      10972
    ],
    "mapped",
    [
      10973,
      824
    ]
  ],
  [
    [
      10973,
      11007
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11008,
      11021
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11022,
      11027
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11028,
      11034
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11035,
      11039
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11040,
      11043
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11044,
      11084
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11085,
      11087
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11088,
      11092
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11093,
      11097
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11098,
      11123
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11124,
      11125
    ],
    "disallowed"
  ],
  [
    [
      11126,
      11157
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11158,
      11159
    ],
    "disallowed"
  ],
  [
    [
      11160,
      11193
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11194,
      11196
    ],
    "disallowed"
  ],
  [
    [
      11197,
      11208
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11209,
      11209
    ],
    "disallowed"
  ],
  [
    [
      11210,
      11217
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11218,
      11243
    ],
    "disallowed"
  ],
  [
    [
      11244,
      11247
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11248,
      11263
    ],
    "disallowed"
  ],
  [
    [
      11264,
      11264
    ],
    "mapped",
    [
      11312
    ]
  ],
  [
    [
      11265,
      11265
    ],
    "mapped",
    [
      11313
    ]
  ],
  [
    [
      11266,
      11266
    ],
    "mapped",
    [
      11314
    ]
  ],
  [
    [
      11267,
      11267
    ],
    "mapped",
    [
      11315
    ]
  ],
  [
    [
      11268,
      11268
    ],
    "mapped",
    [
      11316
    ]
  ],
  [
    [
      11269,
      11269
    ],
    "mapped",
    [
      11317
    ]
  ],
  [
    [
      11270,
      11270
    ],
    "mapped",
    [
      11318
    ]
  ],
  [
    [
      11271,
      11271
    ],
    "mapped",
    [
      11319
    ]
  ],
  [
    [
      11272,
      11272
    ],
    "mapped",
    [
      11320
    ]
  ],
  [
    [
      11273,
      11273
    ],
    "mapped",
    [
      11321
    ]
  ],
  [
    [
      11274,
      11274
    ],
    "mapped",
    [
      11322
    ]
  ],
  [
    [
      11275,
      11275
    ],
    "mapped",
    [
      11323
    ]
  ],
  [
    [
      11276,
      11276
    ],
    "mapped",
    [
      11324
    ]
  ],
  [
    [
      11277,
      11277
    ],
    "mapped",
    [
      11325
    ]
  ],
  [
    [
      11278,
      11278
    ],
    "mapped",
    [
      11326
    ]
  ],
  [
    [
      11279,
      11279
    ],
    "mapped",
    [
      11327
    ]
  ],
  [
    [
      11280,
      11280
    ],
    "mapped",
    [
      11328
    ]
  ],
  [
    [
      11281,
      11281
    ],
    "mapped",
    [
      11329
    ]
  ],
  [
    [
      11282,
      11282
    ],
    "mapped",
    [
      11330
    ]
  ],
  [
    [
      11283,
      11283
    ],
    "mapped",
    [
      11331
    ]
  ],
  [
    [
      11284,
      11284
    ],
    "mapped",
    [
      11332
    ]
  ],
  [
    [
      11285,
      11285
    ],
    "mapped",
    [
      11333
    ]
  ],
  [
    [
      11286,
      11286
    ],
    "mapped",
    [
      11334
    ]
  ],
  [
    [
      11287,
      11287
    ],
    "mapped",
    [
      11335
    ]
  ],
  [
    [
      11288,
      11288
    ],
    "mapped",
    [
      11336
    ]
  ],
  [
    [
      11289,
      11289
    ],
    "mapped",
    [
      11337
    ]
  ],
  [
    [
      11290,
      11290
    ],
    "mapped",
    [
      11338
    ]
  ],
  [
    [
      11291,
      11291
    ],
    "mapped",
    [
      11339
    ]
  ],
  [
    [
      11292,
      11292
    ],
    "mapped",
    [
      11340
    ]
  ],
  [
    [
      11293,
      11293
    ],
    "mapped",
    [
      11341
    ]
  ],
  [
    [
      11294,
      11294
    ],
    "mapped",
    [
      11342
    ]
  ],
  [
    [
      11295,
      11295
    ],
    "mapped",
    [
      11343
    ]
  ],
  [
    [
      11296,
      11296
    ],
    "mapped",
    [
      11344
    ]
  ],
  [
    [
      11297,
      11297
    ],
    "mapped",
    [
      11345
    ]
  ],
  [
    [
      11298,
      11298
    ],
    "mapped",
    [
      11346
    ]
  ],
  [
    [
      11299,
      11299
    ],
    "mapped",
    [
      11347
    ]
  ],
  [
    [
      11300,
      11300
    ],
    "mapped",
    [
      11348
    ]
  ],
  [
    [
      11301,
      11301
    ],
    "mapped",
    [
      11349
    ]
  ],
  [
    [
      11302,
      11302
    ],
    "mapped",
    [
      11350
    ]
  ],
  [
    [
      11303,
      11303
    ],
    "mapped",
    [
      11351
    ]
  ],
  [
    [
      11304,
      11304
    ],
    "mapped",
    [
      11352
    ]
  ],
  [
    [
      11305,
      11305
    ],
    "mapped",
    [
      11353
    ]
  ],
  [
    [
      11306,
      11306
    ],
    "mapped",
    [
      11354
    ]
  ],
  [
    [
      11307,
      11307
    ],
    "mapped",
    [
      11355
    ]
  ],
  [
    [
      11308,
      11308
    ],
    "mapped",
    [
      11356
    ]
  ],
  [
    [
      11309,
      11309
    ],
    "mapped",
    [
      11357
    ]
  ],
  [
    [
      11310,
      11310
    ],
    "mapped",
    [
      11358
    ]
  ],
  [
    [
      11311,
      11311
    ],
    "disallowed"
  ],
  [
    [
      11312,
      11358
    ],
    "valid"
  ],
  [
    [
      11359,
      11359
    ],
    "disallowed"
  ],
  [
    [
      11360,
      11360
    ],
    "mapped",
    [
      11361
    ]
  ],
  [
    [
      11361,
      11361
    ],
    "valid"
  ],
  [
    [
      11362,
      11362
    ],
    "mapped",
    [
      619
    ]
  ],
  [
    [
      11363,
      11363
    ],
    "mapped",
    [
      7549
    ]
  ],
  [
    [
      11364,
      11364
    ],
    "mapped",
    [
      637
    ]
  ],
  [
    [
      11365,
      11366
    ],
    "valid"
  ],
  [
    [
      11367,
      11367
    ],
    "mapped",
    [
      11368
    ]
  ],
  [
    [
      11368,
      11368
    ],
    "valid"
  ],
  [
    [
      11369,
      11369
    ],
    "mapped",
    [
      11370
    ]
  ],
  [
    [
      11370,
      11370
    ],
    "valid"
  ],
  [
    [
      11371,
      11371
    ],
    "mapped",
    [
      11372
    ]
  ],
  [
    [
      11372,
      11372
    ],
    "valid"
  ],
  [
    [
      11373,
      11373
    ],
    "mapped",
    [
      593
    ]
  ],
  [
    [
      11374,
      11374
    ],
    "mapped",
    [
      625
    ]
  ],
  [
    [
      11375,
      11375
    ],
    "mapped",
    [
      592
    ]
  ],
  [
    [
      11376,
      11376
    ],
    "mapped",
    [
      594
    ]
  ],
  [
    [
      11377,
      11377
    ],
    "valid"
  ],
  [
    [
      11378,
      11378
    ],
    "mapped",
    [
      11379
    ]
  ],
  [
    [
      11379,
      11379
    ],
    "valid"
  ],
  [
    [
      11380,
      11380
    ],
    "valid"
  ],
  [
    [
      11381,
      11381
    ],
    "mapped",
    [
      11382
    ]
  ],
  [
    [
      11382,
      11383
    ],
    "valid"
  ],
  [
    [
      11384,
      11387
    ],
    "valid"
  ],
  [
    [
      11388,
      11388
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      11389,
      11389
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      11390,
      11390
    ],
    "mapped",
    [
      575
    ]
  ],
  [
    [
      11391,
      11391
    ],
    "mapped",
    [
      576
    ]
  ],
  [
    [
      11392,
      11392
    ],
    "mapped",
    [
      11393
    ]
  ],
  [
    [
      11393,
      11393
    ],
    "valid"
  ],
  [
    [
      11394,
      11394
    ],
    "mapped",
    [
      11395
    ]
  ],
  [
    [
      11395,
      11395
    ],
    "valid"
  ],
  [
    [
      11396,
      11396
    ],
    "mapped",
    [
      11397
    ]
  ],
  [
    [
      11397,
      11397
    ],
    "valid"
  ],
  [
    [
      11398,
      11398
    ],
    "mapped",
    [
      11399
    ]
  ],
  [
    [
      11399,
      11399
    ],
    "valid"
  ],
  [
    [
      11400,
      11400
    ],
    "mapped",
    [
      11401
    ]
  ],
  [
    [
      11401,
      11401
    ],
    "valid"
  ],
  [
    [
      11402,
      11402
    ],
    "mapped",
    [
      11403
    ]
  ],
  [
    [
      11403,
      11403
    ],
    "valid"
  ],
  [
    [
      11404,
      11404
    ],
    "mapped",
    [
      11405
    ]
  ],
  [
    [
      11405,
      11405
    ],
    "valid"
  ],
  [
    [
      11406,
      11406
    ],
    "mapped",
    [
      11407
    ]
  ],
  [
    [
      11407,
      11407
    ],
    "valid"
  ],
  [
    [
      11408,
      11408
    ],
    "mapped",
    [
      11409
    ]
  ],
  [
    [
      11409,
      11409
    ],
    "valid"
  ],
  [
    [
      11410,
      11410
    ],
    "mapped",
    [
      11411
    ]
  ],
  [
    [
      11411,
      11411
    ],
    "valid"
  ],
  [
    [
      11412,
      11412
    ],
    "mapped",
    [
      11413
    ]
  ],
  [
    [
      11413,
      11413
    ],
    "valid"
  ],
  [
    [
      11414,
      11414
    ],
    "mapped",
    [
      11415
    ]
  ],
  [
    [
      11415,
      11415
    ],
    "valid"
  ],
  [
    [
      11416,
      11416
    ],
    "mapped",
    [
      11417
    ]
  ],
  [
    [
      11417,
      11417
    ],
    "valid"
  ],
  [
    [
      11418,
      11418
    ],
    "mapped",
    [
      11419
    ]
  ],
  [
    [
      11419,
      11419
    ],
    "valid"
  ],
  [
    [
      11420,
      11420
    ],
    "mapped",
    [
      11421
    ]
  ],
  [
    [
      11421,
      11421
    ],
    "valid"
  ],
  [
    [
      11422,
      11422
    ],
    "mapped",
    [
      11423
    ]
  ],
  [
    [
      11423,
      11423
    ],
    "valid"
  ],
  [
    [
      11424,
      11424
    ],
    "mapped",
    [
      11425
    ]
  ],
  [
    [
      11425,
      11425
    ],
    "valid"
  ],
  [
    [
      11426,
      11426
    ],
    "mapped",
    [
      11427
    ]
  ],
  [
    [
      11427,
      11427
    ],
    "valid"
  ],
  [
    [
      11428,
      11428
    ],
    "mapped",
    [
      11429
    ]
  ],
  [
    [
      11429,
      11429
    ],
    "valid"
  ],
  [
    [
      11430,
      11430
    ],
    "mapped",
    [
      11431
    ]
  ],
  [
    [
      11431,
      11431
    ],
    "valid"
  ],
  [
    [
      11432,
      11432
    ],
    "mapped",
    [
      11433
    ]
  ],
  [
    [
      11433,
      11433
    ],
    "valid"
  ],
  [
    [
      11434,
      11434
    ],
    "mapped",
    [
      11435
    ]
  ],
  [
    [
      11435,
      11435
    ],
    "valid"
  ],
  [
    [
      11436,
      11436
    ],
    "mapped",
    [
      11437
    ]
  ],
  [
    [
      11437,
      11437
    ],
    "valid"
  ],
  [
    [
      11438,
      11438
    ],
    "mapped",
    [
      11439
    ]
  ],
  [
    [
      11439,
      11439
    ],
    "valid"
  ],
  [
    [
      11440,
      11440
    ],
    "mapped",
    [
      11441
    ]
  ],
  [
    [
      11441,
      11441
    ],
    "valid"
  ],
  [
    [
      11442,
      11442
    ],
    "mapped",
    [
      11443
    ]
  ],
  [
    [
      11443,
      11443
    ],
    "valid"
  ],
  [
    [
      11444,
      11444
    ],
    "mapped",
    [
      11445
    ]
  ],
  [
    [
      11445,
      11445
    ],
    "valid"
  ],
  [
    [
      11446,
      11446
    ],
    "mapped",
    [
      11447
    ]
  ],
  [
    [
      11447,
      11447
    ],
    "valid"
  ],
  [
    [
      11448,
      11448
    ],
    "mapped",
    [
      11449
    ]
  ],
  [
    [
      11449,
      11449
    ],
    "valid"
  ],
  [
    [
      11450,
      11450
    ],
    "mapped",
    [
      11451
    ]
  ],
  [
    [
      11451,
      11451
    ],
    "valid"
  ],
  [
    [
      11452,
      11452
    ],
    "mapped",
    [
      11453
    ]
  ],
  [
    [
      11453,
      11453
    ],
    "valid"
  ],
  [
    [
      11454,
      11454
    ],
    "mapped",
    [
      11455
    ]
  ],
  [
    [
      11455,
      11455
    ],
    "valid"
  ],
  [
    [
      11456,
      11456
    ],
    "mapped",
    [
      11457
    ]
  ],
  [
    [
      11457,
      11457
    ],
    "valid"
  ],
  [
    [
      11458,
      11458
    ],
    "mapped",
    [
      11459
    ]
  ],
  [
    [
      11459,
      11459
    ],
    "valid"
  ],
  [
    [
      11460,
      11460
    ],
    "mapped",
    [
      11461
    ]
  ],
  [
    [
      11461,
      11461
    ],
    "valid"
  ],
  [
    [
      11462,
      11462
    ],
    "mapped",
    [
      11463
    ]
  ],
  [
    [
      11463,
      11463
    ],
    "valid"
  ],
  [
    [
      11464,
      11464
    ],
    "mapped",
    [
      11465
    ]
  ],
  [
    [
      11465,
      11465
    ],
    "valid"
  ],
  [
    [
      11466,
      11466
    ],
    "mapped",
    [
      11467
    ]
  ],
  [
    [
      11467,
      11467
    ],
    "valid"
  ],
  [
    [
      11468,
      11468
    ],
    "mapped",
    [
      11469
    ]
  ],
  [
    [
      11469,
      11469
    ],
    "valid"
  ],
  [
    [
      11470,
      11470
    ],
    "mapped",
    [
      11471
    ]
  ],
  [
    [
      11471,
      11471
    ],
    "valid"
  ],
  [
    [
      11472,
      11472
    ],
    "mapped",
    [
      11473
    ]
  ],
  [
    [
      11473,
      11473
    ],
    "valid"
  ],
  [
    [
      11474,
      11474
    ],
    "mapped",
    [
      11475
    ]
  ],
  [
    [
      11475,
      11475
    ],
    "valid"
  ],
  [
    [
      11476,
      11476
    ],
    "mapped",
    [
      11477
    ]
  ],
  [
    [
      11477,
      11477
    ],
    "valid"
  ],
  [
    [
      11478,
      11478
    ],
    "mapped",
    [
      11479
    ]
  ],
  [
    [
      11479,
      11479
    ],
    "valid"
  ],
  [
    [
      11480,
      11480
    ],
    "mapped",
    [
      11481
    ]
  ],
  [
    [
      11481,
      11481
    ],
    "valid"
  ],
  [
    [
      11482,
      11482
    ],
    "mapped",
    [
      11483
    ]
  ],
  [
    [
      11483,
      11483
    ],
    "valid"
  ],
  [
    [
      11484,
      11484
    ],
    "mapped",
    [
      11485
    ]
  ],
  [
    [
      11485,
      11485
    ],
    "valid"
  ],
  [
    [
      11486,
      11486
    ],
    "mapped",
    [
      11487
    ]
  ],
  [
    [
      11487,
      11487
    ],
    "valid"
  ],
  [
    [
      11488,
      11488
    ],
    "mapped",
    [
      11489
    ]
  ],
  [
    [
      11489,
      11489
    ],
    "valid"
  ],
  [
    [
      11490,
      11490
    ],
    "mapped",
    [
      11491
    ]
  ],
  [
    [
      11491,
      11492
    ],
    "valid"
  ],
  [
    [
      11493,
      11498
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11499,
      11499
    ],
    "mapped",
    [
      11500
    ]
  ],
  [
    [
      11500,
      11500
    ],
    "valid"
  ],
  [
    [
      11501,
      11501
    ],
    "mapped",
    [
      11502
    ]
  ],
  [
    [
      11502,
      11505
    ],
    "valid"
  ],
  [
    [
      11506,
      11506
    ],
    "mapped",
    [
      11507
    ]
  ],
  [
    [
      11507,
      11507
    ],
    "valid"
  ],
  [
    [
      11508,
      11512
    ],
    "disallowed"
  ],
  [
    [
      11513,
      11519
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11520,
      11557
    ],
    "valid"
  ],
  [
    [
      11558,
      11558
    ],
    "disallowed"
  ],
  [
    [
      11559,
      11559
    ],
    "valid"
  ],
  [
    [
      11560,
      11564
    ],
    "disallowed"
  ],
  [
    [
      11565,
      11565
    ],
    "valid"
  ],
  [
    [
      11566,
      11567
    ],
    "disallowed"
  ],
  [
    [
      11568,
      11621
    ],
    "valid"
  ],
  [
    [
      11622,
      11623
    ],
    "valid"
  ],
  [
    [
      11624,
      11630
    ],
    "disallowed"
  ],
  [
    [
      11631,
      11631
    ],
    "mapped",
    [
      11617
    ]
  ],
  [
    [
      11632,
      11632
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11633,
      11646
    ],
    "disallowed"
  ],
  [
    [
      11647,
      11647
    ],
    "valid"
  ],
  [
    [
      11648,
      11670
    ],
    "valid"
  ],
  [
    [
      11671,
      11679
    ],
    "disallowed"
  ],
  [
    [
      11680,
      11686
    ],
    "valid"
  ],
  [
    [
      11687,
      11687
    ],
    "disallowed"
  ],
  [
    [
      11688,
      11694
    ],
    "valid"
  ],
  [
    [
      11695,
      11695
    ],
    "disallowed"
  ],
  [
    [
      11696,
      11702
    ],
    "valid"
  ],
  [
    [
      11703,
      11703
    ],
    "disallowed"
  ],
  [
    [
      11704,
      11710
    ],
    "valid"
  ],
  [
    [
      11711,
      11711
    ],
    "disallowed"
  ],
  [
    [
      11712,
      11718
    ],
    "valid"
  ],
  [
    [
      11719,
      11719
    ],
    "disallowed"
  ],
  [
    [
      11720,
      11726
    ],
    "valid"
  ],
  [
    [
      11727,
      11727
    ],
    "disallowed"
  ],
  [
    [
      11728,
      11734
    ],
    "valid"
  ],
  [
    [
      11735,
      11735
    ],
    "disallowed"
  ],
  [
    [
      11736,
      11742
    ],
    "valid"
  ],
  [
    [
      11743,
      11743
    ],
    "disallowed"
  ],
  [
    [
      11744,
      11775
    ],
    "valid"
  ],
  [
    [
      11776,
      11799
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11800,
      11803
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11804,
      11805
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11806,
      11822
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11823,
      11823
    ],
    "valid"
  ],
  [
    [
      11824,
      11824
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11825,
      11825
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11826,
      11835
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11836,
      11842
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11843,
      11903
    ],
    "disallowed"
  ],
  [
    [
      11904,
      11929
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11930,
      11930
    ],
    "disallowed"
  ],
  [
    [
      11931,
      11934
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      11935,
      11935
    ],
    "mapped",
    [
      27597
    ]
  ],
  [
    [
      11936,
      12018
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12019,
      12019
    ],
    "mapped",
    [
      40863
    ]
  ],
  [
    [
      12020,
      12031
    ],
    "disallowed"
  ],
  [
    [
      12032,
      12032
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      12033,
      12033
    ],
    "mapped",
    [
      20008
    ]
  ],
  [
    [
      12034,
      12034
    ],
    "mapped",
    [
      20022
    ]
  ],
  [
    [
      12035,
      12035
    ],
    "mapped",
    [
      20031
    ]
  ],
  [
    [
      12036,
      12036
    ],
    "mapped",
    [
      20057
    ]
  ],
  [
    [
      12037,
      12037
    ],
    "mapped",
    [
      20101
    ]
  ],
  [
    [
      12038,
      12038
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      12039,
      12039
    ],
    "mapped",
    [
      20128
    ]
  ],
  [
    [
      12040,
      12040
    ],
    "mapped",
    [
      20154
    ]
  ],
  [
    [
      12041,
      12041
    ],
    "mapped",
    [
      20799
    ]
  ],
  [
    [
      12042,
      12042
    ],
    "mapped",
    [
      20837
    ]
  ],
  [
    [
      12043,
      12043
    ],
    "mapped",
    [
      20843
    ]
  ],
  [
    [
      12044,
      12044
    ],
    "mapped",
    [
      20866
    ]
  ],
  [
    [
      12045,
      12045
    ],
    "mapped",
    [
      20886
    ]
  ],
  [
    [
      12046,
      12046
    ],
    "mapped",
    [
      20907
    ]
  ],
  [
    [
      12047,
      12047
    ],
    "mapped",
    [
      20960
    ]
  ],
  [
    [
      12048,
      12048
    ],
    "mapped",
    [
      20981
    ]
  ],
  [
    [
      12049,
      12049
    ],
    "mapped",
    [
      20992
    ]
  ],
  [
    [
      12050,
      12050
    ],
    "mapped",
    [
      21147
    ]
  ],
  [
    [
      12051,
      12051
    ],
    "mapped",
    [
      21241
    ]
  ],
  [
    [
      12052,
      12052
    ],
    "mapped",
    [
      21269
    ]
  ],
  [
    [
      12053,
      12053
    ],
    "mapped",
    [
      21274
    ]
  ],
  [
    [
      12054,
      12054
    ],
    "mapped",
    [
      21304
    ]
  ],
  [
    [
      12055,
      12055
    ],
    "mapped",
    [
      21313
    ]
  ],
  [
    [
      12056,
      12056
    ],
    "mapped",
    [
      21340
    ]
  ],
  [
    [
      12057,
      12057
    ],
    "mapped",
    [
      21353
    ]
  ],
  [
    [
      12058,
      12058
    ],
    "mapped",
    [
      21378
    ]
  ],
  [
    [
      12059,
      12059
    ],
    "mapped",
    [
      21430
    ]
  ],
  [
    [
      12060,
      12060
    ],
    "mapped",
    [
      21448
    ]
  ],
  [
    [
      12061,
      12061
    ],
    "mapped",
    [
      21475
    ]
  ],
  [
    [
      12062,
      12062
    ],
    "mapped",
    [
      22231
    ]
  ],
  [
    [
      12063,
      12063
    ],
    "mapped",
    [
      22303
    ]
  ],
  [
    [
      12064,
      12064
    ],
    "mapped",
    [
      22763
    ]
  ],
  [
    [
      12065,
      12065
    ],
    "mapped",
    [
      22786
    ]
  ],
  [
    [
      12066,
      12066
    ],
    "mapped",
    [
      22794
    ]
  ],
  [
    [
      12067,
      12067
    ],
    "mapped",
    [
      22805
    ]
  ],
  [
    [
      12068,
      12068
    ],
    "mapped",
    [
      22823
    ]
  ],
  [
    [
      12069,
      12069
    ],
    "mapped",
    [
      22899
    ]
  ],
  [
    [
      12070,
      12070
    ],
    "mapped",
    [
      23376
    ]
  ],
  [
    [
      12071,
      12071
    ],
    "mapped",
    [
      23424
    ]
  ],
  [
    [
      12072,
      12072
    ],
    "mapped",
    [
      23544
    ]
  ],
  [
    [
      12073,
      12073
    ],
    "mapped",
    [
      23567
    ]
  ],
  [
    [
      12074,
      12074
    ],
    "mapped",
    [
      23586
    ]
  ],
  [
    [
      12075,
      12075
    ],
    "mapped",
    [
      23608
    ]
  ],
  [
    [
      12076,
      12076
    ],
    "mapped",
    [
      23662
    ]
  ],
  [
    [
      12077,
      12077
    ],
    "mapped",
    [
      23665
    ]
  ],
  [
    [
      12078,
      12078
    ],
    "mapped",
    [
      24027
    ]
  ],
  [
    [
      12079,
      12079
    ],
    "mapped",
    [
      24037
    ]
  ],
  [
    [
      12080,
      12080
    ],
    "mapped",
    [
      24049
    ]
  ],
  [
    [
      12081,
      12081
    ],
    "mapped",
    [
      24062
    ]
  ],
  [
    [
      12082,
      12082
    ],
    "mapped",
    [
      24178
    ]
  ],
  [
    [
      12083,
      12083
    ],
    "mapped",
    [
      24186
    ]
  ],
  [
    [
      12084,
      12084
    ],
    "mapped",
    [
      24191
    ]
  ],
  [
    [
      12085,
      12085
    ],
    "mapped",
    [
      24308
    ]
  ],
  [
    [
      12086,
      12086
    ],
    "mapped",
    [
      24318
    ]
  ],
  [
    [
      12087,
      12087
    ],
    "mapped",
    [
      24331
    ]
  ],
  [
    [
      12088,
      12088
    ],
    "mapped",
    [
      24339
    ]
  ],
  [
    [
      12089,
      12089
    ],
    "mapped",
    [
      24400
    ]
  ],
  [
    [
      12090,
      12090
    ],
    "mapped",
    [
      24417
    ]
  ],
  [
    [
      12091,
      12091
    ],
    "mapped",
    [
      24435
    ]
  ],
  [
    [
      12092,
      12092
    ],
    "mapped",
    [
      24515
    ]
  ],
  [
    [
      12093,
      12093
    ],
    "mapped",
    [
      25096
    ]
  ],
  [
    [
      12094,
      12094
    ],
    "mapped",
    [
      25142
    ]
  ],
  [
    [
      12095,
      12095
    ],
    "mapped",
    [
      25163
    ]
  ],
  [
    [
      12096,
      12096
    ],
    "mapped",
    [
      25903
    ]
  ],
  [
    [
      12097,
      12097
    ],
    "mapped",
    [
      25908
    ]
  ],
  [
    [
      12098,
      12098
    ],
    "mapped",
    [
      25991
    ]
  ],
  [
    [
      12099,
      12099
    ],
    "mapped",
    [
      26007
    ]
  ],
  [
    [
      12100,
      12100
    ],
    "mapped",
    [
      26020
    ]
  ],
  [
    [
      12101,
      12101
    ],
    "mapped",
    [
      26041
    ]
  ],
  [
    [
      12102,
      12102
    ],
    "mapped",
    [
      26080
    ]
  ],
  [
    [
      12103,
      12103
    ],
    "mapped",
    [
      26085
    ]
  ],
  [
    [
      12104,
      12104
    ],
    "mapped",
    [
      26352
    ]
  ],
  [
    [
      12105,
      12105
    ],
    "mapped",
    [
      26376
    ]
  ],
  [
    [
      12106,
      12106
    ],
    "mapped",
    [
      26408
    ]
  ],
  [
    [
      12107,
      12107
    ],
    "mapped",
    [
      27424
    ]
  ],
  [
    [
      12108,
      12108
    ],
    "mapped",
    [
      27490
    ]
  ],
  [
    [
      12109,
      12109
    ],
    "mapped",
    [
      27513
    ]
  ],
  [
    [
      12110,
      12110
    ],
    "mapped",
    [
      27571
    ]
  ],
  [
    [
      12111,
      12111
    ],
    "mapped",
    [
      27595
    ]
  ],
  [
    [
      12112,
      12112
    ],
    "mapped",
    [
      27604
    ]
  ],
  [
    [
      12113,
      12113
    ],
    "mapped",
    [
      27611
    ]
  ],
  [
    [
      12114,
      12114
    ],
    "mapped",
    [
      27663
    ]
  ],
  [
    [
      12115,
      12115
    ],
    "mapped",
    [
      27668
    ]
  ],
  [
    [
      12116,
      12116
    ],
    "mapped",
    [
      27700
    ]
  ],
  [
    [
      12117,
      12117
    ],
    "mapped",
    [
      28779
    ]
  ],
  [
    [
      12118,
      12118
    ],
    "mapped",
    [
      29226
    ]
  ],
  [
    [
      12119,
      12119
    ],
    "mapped",
    [
      29238
    ]
  ],
  [
    [
      12120,
      12120
    ],
    "mapped",
    [
      29243
    ]
  ],
  [
    [
      12121,
      12121
    ],
    "mapped",
    [
      29247
    ]
  ],
  [
    [
      12122,
      12122
    ],
    "mapped",
    [
      29255
    ]
  ],
  [
    [
      12123,
      12123
    ],
    "mapped",
    [
      29273
    ]
  ],
  [
    [
      12124,
      12124
    ],
    "mapped",
    [
      29275
    ]
  ],
  [
    [
      12125,
      12125
    ],
    "mapped",
    [
      29356
    ]
  ],
  [
    [
      12126,
      12126
    ],
    "mapped",
    [
      29572
    ]
  ],
  [
    [
      12127,
      12127
    ],
    "mapped",
    [
      29577
    ]
  ],
  [
    [
      12128,
      12128
    ],
    "mapped",
    [
      29916
    ]
  ],
  [
    [
      12129,
      12129
    ],
    "mapped",
    [
      29926
    ]
  ],
  [
    [
      12130,
      12130
    ],
    "mapped",
    [
      29976
    ]
  ],
  [
    [
      12131,
      12131
    ],
    "mapped",
    [
      29983
    ]
  ],
  [
    [
      12132,
      12132
    ],
    "mapped",
    [
      29992
    ]
  ],
  [
    [
      12133,
      12133
    ],
    "mapped",
    [
      3e4
    ]
  ],
  [
    [
      12134,
      12134
    ],
    "mapped",
    [
      30091
    ]
  ],
  [
    [
      12135,
      12135
    ],
    "mapped",
    [
      30098
    ]
  ],
  [
    [
      12136,
      12136
    ],
    "mapped",
    [
      30326
    ]
  ],
  [
    [
      12137,
      12137
    ],
    "mapped",
    [
      30333
    ]
  ],
  [
    [
      12138,
      12138
    ],
    "mapped",
    [
      30382
    ]
  ],
  [
    [
      12139,
      12139
    ],
    "mapped",
    [
      30399
    ]
  ],
  [
    [
      12140,
      12140
    ],
    "mapped",
    [
      30446
    ]
  ],
  [
    [
      12141,
      12141
    ],
    "mapped",
    [
      30683
    ]
  ],
  [
    [
      12142,
      12142
    ],
    "mapped",
    [
      30690
    ]
  ],
  [
    [
      12143,
      12143
    ],
    "mapped",
    [
      30707
    ]
  ],
  [
    [
      12144,
      12144
    ],
    "mapped",
    [
      31034
    ]
  ],
  [
    [
      12145,
      12145
    ],
    "mapped",
    [
      31160
    ]
  ],
  [
    [
      12146,
      12146
    ],
    "mapped",
    [
      31166
    ]
  ],
  [
    [
      12147,
      12147
    ],
    "mapped",
    [
      31348
    ]
  ],
  [
    [
      12148,
      12148
    ],
    "mapped",
    [
      31435
    ]
  ],
  [
    [
      12149,
      12149
    ],
    "mapped",
    [
      31481
    ]
  ],
  [
    [
      12150,
      12150
    ],
    "mapped",
    [
      31859
    ]
  ],
  [
    [
      12151,
      12151
    ],
    "mapped",
    [
      31992
    ]
  ],
  [
    [
      12152,
      12152
    ],
    "mapped",
    [
      32566
    ]
  ],
  [
    [
      12153,
      12153
    ],
    "mapped",
    [
      32593
    ]
  ],
  [
    [
      12154,
      12154
    ],
    "mapped",
    [
      32650
    ]
  ],
  [
    [
      12155,
      12155
    ],
    "mapped",
    [
      32701
    ]
  ],
  [
    [
      12156,
      12156
    ],
    "mapped",
    [
      32769
    ]
  ],
  [
    [
      12157,
      12157
    ],
    "mapped",
    [
      32780
    ]
  ],
  [
    [
      12158,
      12158
    ],
    "mapped",
    [
      32786
    ]
  ],
  [
    [
      12159,
      12159
    ],
    "mapped",
    [
      32819
    ]
  ],
  [
    [
      12160,
      12160
    ],
    "mapped",
    [
      32895
    ]
  ],
  [
    [
      12161,
      12161
    ],
    "mapped",
    [
      32905
    ]
  ],
  [
    [
      12162,
      12162
    ],
    "mapped",
    [
      33251
    ]
  ],
  [
    [
      12163,
      12163
    ],
    "mapped",
    [
      33258
    ]
  ],
  [
    [
      12164,
      12164
    ],
    "mapped",
    [
      33267
    ]
  ],
  [
    [
      12165,
      12165
    ],
    "mapped",
    [
      33276
    ]
  ],
  [
    [
      12166,
      12166
    ],
    "mapped",
    [
      33292
    ]
  ],
  [
    [
      12167,
      12167
    ],
    "mapped",
    [
      33307
    ]
  ],
  [
    [
      12168,
      12168
    ],
    "mapped",
    [
      33311
    ]
  ],
  [
    [
      12169,
      12169
    ],
    "mapped",
    [
      33390
    ]
  ],
  [
    [
      12170,
      12170
    ],
    "mapped",
    [
      33394
    ]
  ],
  [
    [
      12171,
      12171
    ],
    "mapped",
    [
      33400
    ]
  ],
  [
    [
      12172,
      12172
    ],
    "mapped",
    [
      34381
    ]
  ],
  [
    [
      12173,
      12173
    ],
    "mapped",
    [
      34411
    ]
  ],
  [
    [
      12174,
      12174
    ],
    "mapped",
    [
      34880
    ]
  ],
  [
    [
      12175,
      12175
    ],
    "mapped",
    [
      34892
    ]
  ],
  [
    [
      12176,
      12176
    ],
    "mapped",
    [
      34915
    ]
  ],
  [
    [
      12177,
      12177
    ],
    "mapped",
    [
      35198
    ]
  ],
  [
    [
      12178,
      12178
    ],
    "mapped",
    [
      35211
    ]
  ],
  [
    [
      12179,
      12179
    ],
    "mapped",
    [
      35282
    ]
  ],
  [
    [
      12180,
      12180
    ],
    "mapped",
    [
      35328
    ]
  ],
  [
    [
      12181,
      12181
    ],
    "mapped",
    [
      35895
    ]
  ],
  [
    [
      12182,
      12182
    ],
    "mapped",
    [
      35910
    ]
  ],
  [
    [
      12183,
      12183
    ],
    "mapped",
    [
      35925
    ]
  ],
  [
    [
      12184,
      12184
    ],
    "mapped",
    [
      35960
    ]
  ],
  [
    [
      12185,
      12185
    ],
    "mapped",
    [
      35997
    ]
  ],
  [
    [
      12186,
      12186
    ],
    "mapped",
    [
      36196
    ]
  ],
  [
    [
      12187,
      12187
    ],
    "mapped",
    [
      36208
    ]
  ],
  [
    [
      12188,
      12188
    ],
    "mapped",
    [
      36275
    ]
  ],
  [
    [
      12189,
      12189
    ],
    "mapped",
    [
      36523
    ]
  ],
  [
    [
      12190,
      12190
    ],
    "mapped",
    [
      36554
    ]
  ],
  [
    [
      12191,
      12191
    ],
    "mapped",
    [
      36763
    ]
  ],
  [
    [
      12192,
      12192
    ],
    "mapped",
    [
      36784
    ]
  ],
  [
    [
      12193,
      12193
    ],
    "mapped",
    [
      36789
    ]
  ],
  [
    [
      12194,
      12194
    ],
    "mapped",
    [
      37009
    ]
  ],
  [
    [
      12195,
      12195
    ],
    "mapped",
    [
      37193
    ]
  ],
  [
    [
      12196,
      12196
    ],
    "mapped",
    [
      37318
    ]
  ],
  [
    [
      12197,
      12197
    ],
    "mapped",
    [
      37324
    ]
  ],
  [
    [
      12198,
      12198
    ],
    "mapped",
    [
      37329
    ]
  ],
  [
    [
      12199,
      12199
    ],
    "mapped",
    [
      38263
    ]
  ],
  [
    [
      12200,
      12200
    ],
    "mapped",
    [
      38272
    ]
  ],
  [
    [
      12201,
      12201
    ],
    "mapped",
    [
      38428
    ]
  ],
  [
    [
      12202,
      12202
    ],
    "mapped",
    [
      38582
    ]
  ],
  [
    [
      12203,
      12203
    ],
    "mapped",
    [
      38585
    ]
  ],
  [
    [
      12204,
      12204
    ],
    "mapped",
    [
      38632
    ]
  ],
  [
    [
      12205,
      12205
    ],
    "mapped",
    [
      38737
    ]
  ],
  [
    [
      12206,
      12206
    ],
    "mapped",
    [
      38750
    ]
  ],
  [
    [
      12207,
      12207
    ],
    "mapped",
    [
      38754
    ]
  ],
  [
    [
      12208,
      12208
    ],
    "mapped",
    [
      38761
    ]
  ],
  [
    [
      12209,
      12209
    ],
    "mapped",
    [
      38859
    ]
  ],
  [
    [
      12210,
      12210
    ],
    "mapped",
    [
      38893
    ]
  ],
  [
    [
      12211,
      12211
    ],
    "mapped",
    [
      38899
    ]
  ],
  [
    [
      12212,
      12212
    ],
    "mapped",
    [
      38913
    ]
  ],
  [
    [
      12213,
      12213
    ],
    "mapped",
    [
      39080
    ]
  ],
  [
    [
      12214,
      12214
    ],
    "mapped",
    [
      39131
    ]
  ],
  [
    [
      12215,
      12215
    ],
    "mapped",
    [
      39135
    ]
  ],
  [
    [
      12216,
      12216
    ],
    "mapped",
    [
      39318
    ]
  ],
  [
    [
      12217,
      12217
    ],
    "mapped",
    [
      39321
    ]
  ],
  [
    [
      12218,
      12218
    ],
    "mapped",
    [
      39340
    ]
  ],
  [
    [
      12219,
      12219
    ],
    "mapped",
    [
      39592
    ]
  ],
  [
    [
      12220,
      12220
    ],
    "mapped",
    [
      39640
    ]
  ],
  [
    [
      12221,
      12221
    ],
    "mapped",
    [
      39647
    ]
  ],
  [
    [
      12222,
      12222
    ],
    "mapped",
    [
      39717
    ]
  ],
  [
    [
      12223,
      12223
    ],
    "mapped",
    [
      39727
    ]
  ],
  [
    [
      12224,
      12224
    ],
    "mapped",
    [
      39730
    ]
  ],
  [
    [
      12225,
      12225
    ],
    "mapped",
    [
      39740
    ]
  ],
  [
    [
      12226,
      12226
    ],
    "mapped",
    [
      39770
    ]
  ],
  [
    [
      12227,
      12227
    ],
    "mapped",
    [
      40165
    ]
  ],
  [
    [
      12228,
      12228
    ],
    "mapped",
    [
      40565
    ]
  ],
  [
    [
      12229,
      12229
    ],
    "mapped",
    [
      40575
    ]
  ],
  [
    [
      12230,
      12230
    ],
    "mapped",
    [
      40613
    ]
  ],
  [
    [
      12231,
      12231
    ],
    "mapped",
    [
      40635
    ]
  ],
  [
    [
      12232,
      12232
    ],
    "mapped",
    [
      40643
    ]
  ],
  [
    [
      12233,
      12233
    ],
    "mapped",
    [
      40653
    ]
  ],
  [
    [
      12234,
      12234
    ],
    "mapped",
    [
      40657
    ]
  ],
  [
    [
      12235,
      12235
    ],
    "mapped",
    [
      40697
    ]
  ],
  [
    [
      12236,
      12236
    ],
    "mapped",
    [
      40701
    ]
  ],
  [
    [
      12237,
      12237
    ],
    "mapped",
    [
      40718
    ]
  ],
  [
    [
      12238,
      12238
    ],
    "mapped",
    [
      40723
    ]
  ],
  [
    [
      12239,
      12239
    ],
    "mapped",
    [
      40736
    ]
  ],
  [
    [
      12240,
      12240
    ],
    "mapped",
    [
      40763
    ]
  ],
  [
    [
      12241,
      12241
    ],
    "mapped",
    [
      40778
    ]
  ],
  [
    [
      12242,
      12242
    ],
    "mapped",
    [
      40786
    ]
  ],
  [
    [
      12243,
      12243
    ],
    "mapped",
    [
      40845
    ]
  ],
  [
    [
      12244,
      12244
    ],
    "mapped",
    [
      40860
    ]
  ],
  [
    [
      12245,
      12245
    ],
    "mapped",
    [
      40864
    ]
  ],
  [
    [
      12246,
      12271
    ],
    "disallowed"
  ],
  [
    [
      12272,
      12283
    ],
    "disallowed"
  ],
  [
    [
      12284,
      12287
    ],
    "disallowed"
  ],
  [
    [
      12288,
      12288
    ],
    "disallowed_STD3_mapped",
    [
      32
    ]
  ],
  [
    [
      12289,
      12289
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12290,
      12290
    ],
    "mapped",
    [
      46
    ]
  ],
  [
    [
      12291,
      12292
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12293,
      12295
    ],
    "valid"
  ],
  [
    [
      12296,
      12329
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12330,
      12333
    ],
    "valid"
  ],
  [
    [
      12334,
      12341
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12342,
      12342
    ],
    "mapped",
    [
      12306
    ]
  ],
  [
    [
      12343,
      12343
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12344,
      12344
    ],
    "mapped",
    [
      21313
    ]
  ],
  [
    [
      12345,
      12345
    ],
    "mapped",
    [
      21316
    ]
  ],
  [
    [
      12346,
      12346
    ],
    "mapped",
    [
      21317
    ]
  ],
  [
    [
      12347,
      12347
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12348,
      12348
    ],
    "valid"
  ],
  [
    [
      12349,
      12349
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12350,
      12350
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12351,
      12351
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12352,
      12352
    ],
    "disallowed"
  ],
  [
    [
      12353,
      12436
    ],
    "valid"
  ],
  [
    [
      12437,
      12438
    ],
    "valid"
  ],
  [
    [
      12439,
      12440
    ],
    "disallowed"
  ],
  [
    [
      12441,
      12442
    ],
    "valid"
  ],
  [
    [
      12443,
      12443
    ],
    "disallowed_STD3_mapped",
    [
      32,
      12441
    ]
  ],
  [
    [
      12444,
      12444
    ],
    "disallowed_STD3_mapped",
    [
      32,
      12442
    ]
  ],
  [
    [
      12445,
      12446
    ],
    "valid"
  ],
  [
    [
      12447,
      12447
    ],
    "mapped",
    [
      12424,
      12426
    ]
  ],
  [
    [
      12448,
      12448
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12449,
      12542
    ],
    "valid"
  ],
  [
    [
      12543,
      12543
    ],
    "mapped",
    [
      12467,
      12488
    ]
  ],
  [
    [
      12544,
      12548
    ],
    "disallowed"
  ],
  [
    [
      12549,
      12588
    ],
    "valid"
  ],
  [
    [
      12589,
      12589
    ],
    "valid"
  ],
  [
    [
      12590,
      12592
    ],
    "disallowed"
  ],
  [
    [
      12593,
      12593
    ],
    "mapped",
    [
      4352
    ]
  ],
  [
    [
      12594,
      12594
    ],
    "mapped",
    [
      4353
    ]
  ],
  [
    [
      12595,
      12595
    ],
    "mapped",
    [
      4522
    ]
  ],
  [
    [
      12596,
      12596
    ],
    "mapped",
    [
      4354
    ]
  ],
  [
    [
      12597,
      12597
    ],
    "mapped",
    [
      4524
    ]
  ],
  [
    [
      12598,
      12598
    ],
    "mapped",
    [
      4525
    ]
  ],
  [
    [
      12599,
      12599
    ],
    "mapped",
    [
      4355
    ]
  ],
  [
    [
      12600,
      12600
    ],
    "mapped",
    [
      4356
    ]
  ],
  [
    [
      12601,
      12601
    ],
    "mapped",
    [
      4357
    ]
  ],
  [
    [
      12602,
      12602
    ],
    "mapped",
    [
      4528
    ]
  ],
  [
    [
      12603,
      12603
    ],
    "mapped",
    [
      4529
    ]
  ],
  [
    [
      12604,
      12604
    ],
    "mapped",
    [
      4530
    ]
  ],
  [
    [
      12605,
      12605
    ],
    "mapped",
    [
      4531
    ]
  ],
  [
    [
      12606,
      12606
    ],
    "mapped",
    [
      4532
    ]
  ],
  [
    [
      12607,
      12607
    ],
    "mapped",
    [
      4533
    ]
  ],
  [
    [
      12608,
      12608
    ],
    "mapped",
    [
      4378
    ]
  ],
  [
    [
      12609,
      12609
    ],
    "mapped",
    [
      4358
    ]
  ],
  [
    [
      12610,
      12610
    ],
    "mapped",
    [
      4359
    ]
  ],
  [
    [
      12611,
      12611
    ],
    "mapped",
    [
      4360
    ]
  ],
  [
    [
      12612,
      12612
    ],
    "mapped",
    [
      4385
    ]
  ],
  [
    [
      12613,
      12613
    ],
    "mapped",
    [
      4361
    ]
  ],
  [
    [
      12614,
      12614
    ],
    "mapped",
    [
      4362
    ]
  ],
  [
    [
      12615,
      12615
    ],
    "mapped",
    [
      4363
    ]
  ],
  [
    [
      12616,
      12616
    ],
    "mapped",
    [
      4364
    ]
  ],
  [
    [
      12617,
      12617
    ],
    "mapped",
    [
      4365
    ]
  ],
  [
    [
      12618,
      12618
    ],
    "mapped",
    [
      4366
    ]
  ],
  [
    [
      12619,
      12619
    ],
    "mapped",
    [
      4367
    ]
  ],
  [
    [
      12620,
      12620
    ],
    "mapped",
    [
      4368
    ]
  ],
  [
    [
      12621,
      12621
    ],
    "mapped",
    [
      4369
    ]
  ],
  [
    [
      12622,
      12622
    ],
    "mapped",
    [
      4370
    ]
  ],
  [
    [
      12623,
      12623
    ],
    "mapped",
    [
      4449
    ]
  ],
  [
    [
      12624,
      12624
    ],
    "mapped",
    [
      4450
    ]
  ],
  [
    [
      12625,
      12625
    ],
    "mapped",
    [
      4451
    ]
  ],
  [
    [
      12626,
      12626
    ],
    "mapped",
    [
      4452
    ]
  ],
  [
    [
      12627,
      12627
    ],
    "mapped",
    [
      4453
    ]
  ],
  [
    [
      12628,
      12628
    ],
    "mapped",
    [
      4454
    ]
  ],
  [
    [
      12629,
      12629
    ],
    "mapped",
    [
      4455
    ]
  ],
  [
    [
      12630,
      12630
    ],
    "mapped",
    [
      4456
    ]
  ],
  [
    [
      12631,
      12631
    ],
    "mapped",
    [
      4457
    ]
  ],
  [
    [
      12632,
      12632
    ],
    "mapped",
    [
      4458
    ]
  ],
  [
    [
      12633,
      12633
    ],
    "mapped",
    [
      4459
    ]
  ],
  [
    [
      12634,
      12634
    ],
    "mapped",
    [
      4460
    ]
  ],
  [
    [
      12635,
      12635
    ],
    "mapped",
    [
      4461
    ]
  ],
  [
    [
      12636,
      12636
    ],
    "mapped",
    [
      4462
    ]
  ],
  [
    [
      12637,
      12637
    ],
    "mapped",
    [
      4463
    ]
  ],
  [
    [
      12638,
      12638
    ],
    "mapped",
    [
      4464
    ]
  ],
  [
    [
      12639,
      12639
    ],
    "mapped",
    [
      4465
    ]
  ],
  [
    [
      12640,
      12640
    ],
    "mapped",
    [
      4466
    ]
  ],
  [
    [
      12641,
      12641
    ],
    "mapped",
    [
      4467
    ]
  ],
  [
    [
      12642,
      12642
    ],
    "mapped",
    [
      4468
    ]
  ],
  [
    [
      12643,
      12643
    ],
    "mapped",
    [
      4469
    ]
  ],
  [
    [
      12644,
      12644
    ],
    "disallowed"
  ],
  [
    [
      12645,
      12645
    ],
    "mapped",
    [
      4372
    ]
  ],
  [
    [
      12646,
      12646
    ],
    "mapped",
    [
      4373
    ]
  ],
  [
    [
      12647,
      12647
    ],
    "mapped",
    [
      4551
    ]
  ],
  [
    [
      12648,
      12648
    ],
    "mapped",
    [
      4552
    ]
  ],
  [
    [
      12649,
      12649
    ],
    "mapped",
    [
      4556
    ]
  ],
  [
    [
      12650,
      12650
    ],
    "mapped",
    [
      4558
    ]
  ],
  [
    [
      12651,
      12651
    ],
    "mapped",
    [
      4563
    ]
  ],
  [
    [
      12652,
      12652
    ],
    "mapped",
    [
      4567
    ]
  ],
  [
    [
      12653,
      12653
    ],
    "mapped",
    [
      4569
    ]
  ],
  [
    [
      12654,
      12654
    ],
    "mapped",
    [
      4380
    ]
  ],
  [
    [
      12655,
      12655
    ],
    "mapped",
    [
      4573
    ]
  ],
  [
    [
      12656,
      12656
    ],
    "mapped",
    [
      4575
    ]
  ],
  [
    [
      12657,
      12657
    ],
    "mapped",
    [
      4381
    ]
  ],
  [
    [
      12658,
      12658
    ],
    "mapped",
    [
      4382
    ]
  ],
  [
    [
      12659,
      12659
    ],
    "mapped",
    [
      4384
    ]
  ],
  [
    [
      12660,
      12660
    ],
    "mapped",
    [
      4386
    ]
  ],
  [
    [
      12661,
      12661
    ],
    "mapped",
    [
      4387
    ]
  ],
  [
    [
      12662,
      12662
    ],
    "mapped",
    [
      4391
    ]
  ],
  [
    [
      12663,
      12663
    ],
    "mapped",
    [
      4393
    ]
  ],
  [
    [
      12664,
      12664
    ],
    "mapped",
    [
      4395
    ]
  ],
  [
    [
      12665,
      12665
    ],
    "mapped",
    [
      4396
    ]
  ],
  [
    [
      12666,
      12666
    ],
    "mapped",
    [
      4397
    ]
  ],
  [
    [
      12667,
      12667
    ],
    "mapped",
    [
      4398
    ]
  ],
  [
    [
      12668,
      12668
    ],
    "mapped",
    [
      4399
    ]
  ],
  [
    [
      12669,
      12669
    ],
    "mapped",
    [
      4402
    ]
  ],
  [
    [
      12670,
      12670
    ],
    "mapped",
    [
      4406
    ]
  ],
  [
    [
      12671,
      12671
    ],
    "mapped",
    [
      4416
    ]
  ],
  [
    [
      12672,
      12672
    ],
    "mapped",
    [
      4423
    ]
  ],
  [
    [
      12673,
      12673
    ],
    "mapped",
    [
      4428
    ]
  ],
  [
    [
      12674,
      12674
    ],
    "mapped",
    [
      4593
    ]
  ],
  [
    [
      12675,
      12675
    ],
    "mapped",
    [
      4594
    ]
  ],
  [
    [
      12676,
      12676
    ],
    "mapped",
    [
      4439
    ]
  ],
  [
    [
      12677,
      12677
    ],
    "mapped",
    [
      4440
    ]
  ],
  [
    [
      12678,
      12678
    ],
    "mapped",
    [
      4441
    ]
  ],
  [
    [
      12679,
      12679
    ],
    "mapped",
    [
      4484
    ]
  ],
  [
    [
      12680,
      12680
    ],
    "mapped",
    [
      4485
    ]
  ],
  [
    [
      12681,
      12681
    ],
    "mapped",
    [
      4488
    ]
  ],
  [
    [
      12682,
      12682
    ],
    "mapped",
    [
      4497
    ]
  ],
  [
    [
      12683,
      12683
    ],
    "mapped",
    [
      4498
    ]
  ],
  [
    [
      12684,
      12684
    ],
    "mapped",
    [
      4500
    ]
  ],
  [
    [
      12685,
      12685
    ],
    "mapped",
    [
      4510
    ]
  ],
  [
    [
      12686,
      12686
    ],
    "mapped",
    [
      4513
    ]
  ],
  [
    [
      12687,
      12687
    ],
    "disallowed"
  ],
  [
    [
      12688,
      12689
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12690,
      12690
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      12691,
      12691
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      12692,
      12692
    ],
    "mapped",
    [
      19977
    ]
  ],
  [
    [
      12693,
      12693
    ],
    "mapped",
    [
      22235
    ]
  ],
  [
    [
      12694,
      12694
    ],
    "mapped",
    [
      19978
    ]
  ],
  [
    [
      12695,
      12695
    ],
    "mapped",
    [
      20013
    ]
  ],
  [
    [
      12696,
      12696
    ],
    "mapped",
    [
      19979
    ]
  ],
  [
    [
      12697,
      12697
    ],
    "mapped",
    [
      30002
    ]
  ],
  [
    [
      12698,
      12698
    ],
    "mapped",
    [
      20057
    ]
  ],
  [
    [
      12699,
      12699
    ],
    "mapped",
    [
      19993
    ]
  ],
  [
    [
      12700,
      12700
    ],
    "mapped",
    [
      19969
    ]
  ],
  [
    [
      12701,
      12701
    ],
    "mapped",
    [
      22825
    ]
  ],
  [
    [
      12702,
      12702
    ],
    "mapped",
    [
      22320
    ]
  ],
  [
    [
      12703,
      12703
    ],
    "mapped",
    [
      20154
    ]
  ],
  [
    [
      12704,
      12727
    ],
    "valid"
  ],
  [
    [
      12728,
      12730
    ],
    "valid"
  ],
  [
    [
      12731,
      12735
    ],
    "disallowed"
  ],
  [
    [
      12736,
      12751
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12752,
      12771
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12772,
      12783
    ],
    "disallowed"
  ],
  [
    [
      12784,
      12799
    ],
    "valid"
  ],
  [
    [
      12800,
      12800
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4352,
      41
    ]
  ],
  [
    [
      12801,
      12801
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4354,
      41
    ]
  ],
  [
    [
      12802,
      12802
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4355,
      41
    ]
  ],
  [
    [
      12803,
      12803
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4357,
      41
    ]
  ],
  [
    [
      12804,
      12804
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4358,
      41
    ]
  ],
  [
    [
      12805,
      12805
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4359,
      41
    ]
  ],
  [
    [
      12806,
      12806
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4361,
      41
    ]
  ],
  [
    [
      12807,
      12807
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4363,
      41
    ]
  ],
  [
    [
      12808,
      12808
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4364,
      41
    ]
  ],
  [
    [
      12809,
      12809
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4366,
      41
    ]
  ],
  [
    [
      12810,
      12810
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4367,
      41
    ]
  ],
  [
    [
      12811,
      12811
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4368,
      41
    ]
  ],
  [
    [
      12812,
      12812
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4369,
      41
    ]
  ],
  [
    [
      12813,
      12813
    ],
    "disallowed_STD3_mapped",
    [
      40,
      4370,
      41
    ]
  ],
  [
    [
      12814,
      12814
    ],
    "disallowed_STD3_mapped",
    [
      40,
      44032,
      41
    ]
  ],
  [
    [
      12815,
      12815
    ],
    "disallowed_STD3_mapped",
    [
      40,
      45208,
      41
    ]
  ],
  [
    [
      12816,
      12816
    ],
    "disallowed_STD3_mapped",
    [
      40,
      45796,
      41
    ]
  ],
  [
    [
      12817,
      12817
    ],
    "disallowed_STD3_mapped",
    [
      40,
      46972,
      41
    ]
  ],
  [
    [
      12818,
      12818
    ],
    "disallowed_STD3_mapped",
    [
      40,
      47560,
      41
    ]
  ],
  [
    [
      12819,
      12819
    ],
    "disallowed_STD3_mapped",
    [
      40,
      48148,
      41
    ]
  ],
  [
    [
      12820,
      12820
    ],
    "disallowed_STD3_mapped",
    [
      40,
      49324,
      41
    ]
  ],
  [
    [
      12821,
      12821
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50500,
      41
    ]
  ],
  [
    [
      12822,
      12822
    ],
    "disallowed_STD3_mapped",
    [
      40,
      51088,
      41
    ]
  ],
  [
    [
      12823,
      12823
    ],
    "disallowed_STD3_mapped",
    [
      40,
      52264,
      41
    ]
  ],
  [
    [
      12824,
      12824
    ],
    "disallowed_STD3_mapped",
    [
      40,
      52852,
      41
    ]
  ],
  [
    [
      12825,
      12825
    ],
    "disallowed_STD3_mapped",
    [
      40,
      53440,
      41
    ]
  ],
  [
    [
      12826,
      12826
    ],
    "disallowed_STD3_mapped",
    [
      40,
      54028,
      41
    ]
  ],
  [
    [
      12827,
      12827
    ],
    "disallowed_STD3_mapped",
    [
      40,
      54616,
      41
    ]
  ],
  [
    [
      12828,
      12828
    ],
    "disallowed_STD3_mapped",
    [
      40,
      51452,
      41
    ]
  ],
  [
    [
      12829,
      12829
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50724,
      51204,
      41
    ]
  ],
  [
    [
      12830,
      12830
    ],
    "disallowed_STD3_mapped",
    [
      40,
      50724,
      54980,
      41
    ]
  ],
  [
    [
      12831,
      12831
    ],
    "disallowed"
  ],
  [
    [
      12832,
      12832
    ],
    "disallowed_STD3_mapped",
    [
      40,
      19968,
      41
    ]
  ],
  [
    [
      12833,
      12833
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20108,
      41
    ]
  ],
  [
    [
      12834,
      12834
    ],
    "disallowed_STD3_mapped",
    [
      40,
      19977,
      41
    ]
  ],
  [
    [
      12835,
      12835
    ],
    "disallowed_STD3_mapped",
    [
      40,
      22235,
      41
    ]
  ],
  [
    [
      12836,
      12836
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20116,
      41
    ]
  ],
  [
    [
      12837,
      12837
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20845,
      41
    ]
  ],
  [
    [
      12838,
      12838
    ],
    "disallowed_STD3_mapped",
    [
      40,
      19971,
      41
    ]
  ],
  [
    [
      12839,
      12839
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20843,
      41
    ]
  ],
  [
    [
      12840,
      12840
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20061,
      41
    ]
  ],
  [
    [
      12841,
      12841
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21313,
      41
    ]
  ],
  [
    [
      12842,
      12842
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26376,
      41
    ]
  ],
  [
    [
      12843,
      12843
    ],
    "disallowed_STD3_mapped",
    [
      40,
      28779,
      41
    ]
  ],
  [
    [
      12844,
      12844
    ],
    "disallowed_STD3_mapped",
    [
      40,
      27700,
      41
    ]
  ],
  [
    [
      12845,
      12845
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26408,
      41
    ]
  ],
  [
    [
      12846,
      12846
    ],
    "disallowed_STD3_mapped",
    [
      40,
      37329,
      41
    ]
  ],
  [
    [
      12847,
      12847
    ],
    "disallowed_STD3_mapped",
    [
      40,
      22303,
      41
    ]
  ],
  [
    [
      12848,
      12848
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26085,
      41
    ]
  ],
  [
    [
      12849,
      12849
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26666,
      41
    ]
  ],
  [
    [
      12850,
      12850
    ],
    "disallowed_STD3_mapped",
    [
      40,
      26377,
      41
    ]
  ],
  [
    [
      12851,
      12851
    ],
    "disallowed_STD3_mapped",
    [
      40,
      31038,
      41
    ]
  ],
  [
    [
      12852,
      12852
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21517,
      41
    ]
  ],
  [
    [
      12853,
      12853
    ],
    "disallowed_STD3_mapped",
    [
      40,
      29305,
      41
    ]
  ],
  [
    [
      12854,
      12854
    ],
    "disallowed_STD3_mapped",
    [
      40,
      36001,
      41
    ]
  ],
  [
    [
      12855,
      12855
    ],
    "disallowed_STD3_mapped",
    [
      40,
      31069,
      41
    ]
  ],
  [
    [
      12856,
      12856
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21172,
      41
    ]
  ],
  [
    [
      12857,
      12857
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20195,
      41
    ]
  ],
  [
    [
      12858,
      12858
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21628,
      41
    ]
  ],
  [
    [
      12859,
      12859
    ],
    "disallowed_STD3_mapped",
    [
      40,
      23398,
      41
    ]
  ],
  [
    [
      12860,
      12860
    ],
    "disallowed_STD3_mapped",
    [
      40,
      30435,
      41
    ]
  ],
  [
    [
      12861,
      12861
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20225,
      41
    ]
  ],
  [
    [
      12862,
      12862
    ],
    "disallowed_STD3_mapped",
    [
      40,
      36039,
      41
    ]
  ],
  [
    [
      12863,
      12863
    ],
    "disallowed_STD3_mapped",
    [
      40,
      21332,
      41
    ]
  ],
  [
    [
      12864,
      12864
    ],
    "disallowed_STD3_mapped",
    [
      40,
      31085,
      41
    ]
  ],
  [
    [
      12865,
      12865
    ],
    "disallowed_STD3_mapped",
    [
      40,
      20241,
      41
    ]
  ],
  [
    [
      12866,
      12866
    ],
    "disallowed_STD3_mapped",
    [
      40,
      33258,
      41
    ]
  ],
  [
    [
      12867,
      12867
    ],
    "disallowed_STD3_mapped",
    [
      40,
      33267,
      41
    ]
  ],
  [
    [
      12868,
      12868
    ],
    "mapped",
    [
      21839
    ]
  ],
  [
    [
      12869,
      12869
    ],
    "mapped",
    [
      24188
    ]
  ],
  [
    [
      12870,
      12870
    ],
    "mapped",
    [
      25991
    ]
  ],
  [
    [
      12871,
      12871
    ],
    "mapped",
    [
      31631
    ]
  ],
  [
    [
      12872,
      12879
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12880,
      12880
    ],
    "mapped",
    [
      112,
      116,
      101
    ]
  ],
  [
    [
      12881,
      12881
    ],
    "mapped",
    [
      50,
      49
    ]
  ],
  [
    [
      12882,
      12882
    ],
    "mapped",
    [
      50,
      50
    ]
  ],
  [
    [
      12883,
      12883
    ],
    "mapped",
    [
      50,
      51
    ]
  ],
  [
    [
      12884,
      12884
    ],
    "mapped",
    [
      50,
      52
    ]
  ],
  [
    [
      12885,
      12885
    ],
    "mapped",
    [
      50,
      53
    ]
  ],
  [
    [
      12886,
      12886
    ],
    "mapped",
    [
      50,
      54
    ]
  ],
  [
    [
      12887,
      12887
    ],
    "mapped",
    [
      50,
      55
    ]
  ],
  [
    [
      12888,
      12888
    ],
    "mapped",
    [
      50,
      56
    ]
  ],
  [
    [
      12889,
      12889
    ],
    "mapped",
    [
      50,
      57
    ]
  ],
  [
    [
      12890,
      12890
    ],
    "mapped",
    [
      51,
      48
    ]
  ],
  [
    [
      12891,
      12891
    ],
    "mapped",
    [
      51,
      49
    ]
  ],
  [
    [
      12892,
      12892
    ],
    "mapped",
    [
      51,
      50
    ]
  ],
  [
    [
      12893,
      12893
    ],
    "mapped",
    [
      51,
      51
    ]
  ],
  [
    [
      12894,
      12894
    ],
    "mapped",
    [
      51,
      52
    ]
  ],
  [
    [
      12895,
      12895
    ],
    "mapped",
    [
      51,
      53
    ]
  ],
  [
    [
      12896,
      12896
    ],
    "mapped",
    [
      4352
    ]
  ],
  [
    [
      12897,
      12897
    ],
    "mapped",
    [
      4354
    ]
  ],
  [
    [
      12898,
      12898
    ],
    "mapped",
    [
      4355
    ]
  ],
  [
    [
      12899,
      12899
    ],
    "mapped",
    [
      4357
    ]
  ],
  [
    [
      12900,
      12900
    ],
    "mapped",
    [
      4358
    ]
  ],
  [
    [
      12901,
      12901
    ],
    "mapped",
    [
      4359
    ]
  ],
  [
    [
      12902,
      12902
    ],
    "mapped",
    [
      4361
    ]
  ],
  [
    [
      12903,
      12903
    ],
    "mapped",
    [
      4363
    ]
  ],
  [
    [
      12904,
      12904
    ],
    "mapped",
    [
      4364
    ]
  ],
  [
    [
      12905,
      12905
    ],
    "mapped",
    [
      4366
    ]
  ],
  [
    [
      12906,
      12906
    ],
    "mapped",
    [
      4367
    ]
  ],
  [
    [
      12907,
      12907
    ],
    "mapped",
    [
      4368
    ]
  ],
  [
    [
      12908,
      12908
    ],
    "mapped",
    [
      4369
    ]
  ],
  [
    [
      12909,
      12909
    ],
    "mapped",
    [
      4370
    ]
  ],
  [
    [
      12910,
      12910
    ],
    "mapped",
    [
      44032
    ]
  ],
  [
    [
      12911,
      12911
    ],
    "mapped",
    [
      45208
    ]
  ],
  [
    [
      12912,
      12912
    ],
    "mapped",
    [
      45796
    ]
  ],
  [
    [
      12913,
      12913
    ],
    "mapped",
    [
      46972
    ]
  ],
  [
    [
      12914,
      12914
    ],
    "mapped",
    [
      47560
    ]
  ],
  [
    [
      12915,
      12915
    ],
    "mapped",
    [
      48148
    ]
  ],
  [
    [
      12916,
      12916
    ],
    "mapped",
    [
      49324
    ]
  ],
  [
    [
      12917,
      12917
    ],
    "mapped",
    [
      50500
    ]
  ],
  [
    [
      12918,
      12918
    ],
    "mapped",
    [
      51088
    ]
  ],
  [
    [
      12919,
      12919
    ],
    "mapped",
    [
      52264
    ]
  ],
  [
    [
      12920,
      12920
    ],
    "mapped",
    [
      52852
    ]
  ],
  [
    [
      12921,
      12921
    ],
    "mapped",
    [
      53440
    ]
  ],
  [
    [
      12922,
      12922
    ],
    "mapped",
    [
      54028
    ]
  ],
  [
    [
      12923,
      12923
    ],
    "mapped",
    [
      54616
    ]
  ],
  [
    [
      12924,
      12924
    ],
    "mapped",
    [
      52280,
      44256
    ]
  ],
  [
    [
      12925,
      12925
    ],
    "mapped",
    [
      51452,
      51032
    ]
  ],
  [
    [
      12926,
      12926
    ],
    "mapped",
    [
      50864
    ]
  ],
  [
    [
      12927,
      12927
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      12928,
      12928
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      12929,
      12929
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      12930,
      12930
    ],
    "mapped",
    [
      19977
    ]
  ],
  [
    [
      12931,
      12931
    ],
    "mapped",
    [
      22235
    ]
  ],
  [
    [
      12932,
      12932
    ],
    "mapped",
    [
      20116
    ]
  ],
  [
    [
      12933,
      12933
    ],
    "mapped",
    [
      20845
    ]
  ],
  [
    [
      12934,
      12934
    ],
    "mapped",
    [
      19971
    ]
  ],
  [
    [
      12935,
      12935
    ],
    "mapped",
    [
      20843
    ]
  ],
  [
    [
      12936,
      12936
    ],
    "mapped",
    [
      20061
    ]
  ],
  [
    [
      12937,
      12937
    ],
    "mapped",
    [
      21313
    ]
  ],
  [
    [
      12938,
      12938
    ],
    "mapped",
    [
      26376
    ]
  ],
  [
    [
      12939,
      12939
    ],
    "mapped",
    [
      28779
    ]
  ],
  [
    [
      12940,
      12940
    ],
    "mapped",
    [
      27700
    ]
  ],
  [
    [
      12941,
      12941
    ],
    "mapped",
    [
      26408
    ]
  ],
  [
    [
      12942,
      12942
    ],
    "mapped",
    [
      37329
    ]
  ],
  [
    [
      12943,
      12943
    ],
    "mapped",
    [
      22303
    ]
  ],
  [
    [
      12944,
      12944
    ],
    "mapped",
    [
      26085
    ]
  ],
  [
    [
      12945,
      12945
    ],
    "mapped",
    [
      26666
    ]
  ],
  [
    [
      12946,
      12946
    ],
    "mapped",
    [
      26377
    ]
  ],
  [
    [
      12947,
      12947
    ],
    "mapped",
    [
      31038
    ]
  ],
  [
    [
      12948,
      12948
    ],
    "mapped",
    [
      21517
    ]
  ],
  [
    [
      12949,
      12949
    ],
    "mapped",
    [
      29305
    ]
  ],
  [
    [
      12950,
      12950
    ],
    "mapped",
    [
      36001
    ]
  ],
  [
    [
      12951,
      12951
    ],
    "mapped",
    [
      31069
    ]
  ],
  [
    [
      12952,
      12952
    ],
    "mapped",
    [
      21172
    ]
  ],
  [
    [
      12953,
      12953
    ],
    "mapped",
    [
      31192
    ]
  ],
  [
    [
      12954,
      12954
    ],
    "mapped",
    [
      30007
    ]
  ],
  [
    [
      12955,
      12955
    ],
    "mapped",
    [
      22899
    ]
  ],
  [
    [
      12956,
      12956
    ],
    "mapped",
    [
      36969
    ]
  ],
  [
    [
      12957,
      12957
    ],
    "mapped",
    [
      20778
    ]
  ],
  [
    [
      12958,
      12958
    ],
    "mapped",
    [
      21360
    ]
  ],
  [
    [
      12959,
      12959
    ],
    "mapped",
    [
      27880
    ]
  ],
  [
    [
      12960,
      12960
    ],
    "mapped",
    [
      38917
    ]
  ],
  [
    [
      12961,
      12961
    ],
    "mapped",
    [
      20241
    ]
  ],
  [
    [
      12962,
      12962
    ],
    "mapped",
    [
      20889
    ]
  ],
  [
    [
      12963,
      12963
    ],
    "mapped",
    [
      27491
    ]
  ],
  [
    [
      12964,
      12964
    ],
    "mapped",
    [
      19978
    ]
  ],
  [
    [
      12965,
      12965
    ],
    "mapped",
    [
      20013
    ]
  ],
  [
    [
      12966,
      12966
    ],
    "mapped",
    [
      19979
    ]
  ],
  [
    [
      12967,
      12967
    ],
    "mapped",
    [
      24038
    ]
  ],
  [
    [
      12968,
      12968
    ],
    "mapped",
    [
      21491
    ]
  ],
  [
    [
      12969,
      12969
    ],
    "mapped",
    [
      21307
    ]
  ],
  [
    [
      12970,
      12970
    ],
    "mapped",
    [
      23447
    ]
  ],
  [
    [
      12971,
      12971
    ],
    "mapped",
    [
      23398
    ]
  ],
  [
    [
      12972,
      12972
    ],
    "mapped",
    [
      30435
    ]
  ],
  [
    [
      12973,
      12973
    ],
    "mapped",
    [
      20225
    ]
  ],
  [
    [
      12974,
      12974
    ],
    "mapped",
    [
      36039
    ]
  ],
  [
    [
      12975,
      12975
    ],
    "mapped",
    [
      21332
    ]
  ],
  [
    [
      12976,
      12976
    ],
    "mapped",
    [
      22812
    ]
  ],
  [
    [
      12977,
      12977
    ],
    "mapped",
    [
      51,
      54
    ]
  ],
  [
    [
      12978,
      12978
    ],
    "mapped",
    [
      51,
      55
    ]
  ],
  [
    [
      12979,
      12979
    ],
    "mapped",
    [
      51,
      56
    ]
  ],
  [
    [
      12980,
      12980
    ],
    "mapped",
    [
      51,
      57
    ]
  ],
  [
    [
      12981,
      12981
    ],
    "mapped",
    [
      52,
      48
    ]
  ],
  [
    [
      12982,
      12982
    ],
    "mapped",
    [
      52,
      49
    ]
  ],
  [
    [
      12983,
      12983
    ],
    "mapped",
    [
      52,
      50
    ]
  ],
  [
    [
      12984,
      12984
    ],
    "mapped",
    [
      52,
      51
    ]
  ],
  [
    [
      12985,
      12985
    ],
    "mapped",
    [
      52,
      52
    ]
  ],
  [
    [
      12986,
      12986
    ],
    "mapped",
    [
      52,
      53
    ]
  ],
  [
    [
      12987,
      12987
    ],
    "mapped",
    [
      52,
      54
    ]
  ],
  [
    [
      12988,
      12988
    ],
    "mapped",
    [
      52,
      55
    ]
  ],
  [
    [
      12989,
      12989
    ],
    "mapped",
    [
      52,
      56
    ]
  ],
  [
    [
      12990,
      12990
    ],
    "mapped",
    [
      52,
      57
    ]
  ],
  [
    [
      12991,
      12991
    ],
    "mapped",
    [
      53,
      48
    ]
  ],
  [
    [
      12992,
      12992
    ],
    "mapped",
    [
      49,
      26376
    ]
  ],
  [
    [
      12993,
      12993
    ],
    "mapped",
    [
      50,
      26376
    ]
  ],
  [
    [
      12994,
      12994
    ],
    "mapped",
    [
      51,
      26376
    ]
  ],
  [
    [
      12995,
      12995
    ],
    "mapped",
    [
      52,
      26376
    ]
  ],
  [
    [
      12996,
      12996
    ],
    "mapped",
    [
      53,
      26376
    ]
  ],
  [
    [
      12997,
      12997
    ],
    "mapped",
    [
      54,
      26376
    ]
  ],
  [
    [
      12998,
      12998
    ],
    "mapped",
    [
      55,
      26376
    ]
  ],
  [
    [
      12999,
      12999
    ],
    "mapped",
    [
      56,
      26376
    ]
  ],
  [
    [
      13e3,
      13e3
    ],
    "mapped",
    [
      57,
      26376
    ]
  ],
  [
    [
      13001,
      13001
    ],
    "mapped",
    [
      49,
      48,
      26376
    ]
  ],
  [
    [
      13002,
      13002
    ],
    "mapped",
    [
      49,
      49,
      26376
    ]
  ],
  [
    [
      13003,
      13003
    ],
    "mapped",
    [
      49,
      50,
      26376
    ]
  ],
  [
    [
      13004,
      13004
    ],
    "mapped",
    [
      104,
      103
    ]
  ],
  [
    [
      13005,
      13005
    ],
    "mapped",
    [
      101,
      114,
      103
    ]
  ],
  [
    [
      13006,
      13006
    ],
    "mapped",
    [
      101,
      118
    ]
  ],
  [
    [
      13007,
      13007
    ],
    "mapped",
    [
      108,
      116,
      100
    ]
  ],
  [
    [
      13008,
      13008
    ],
    "mapped",
    [
      12450
    ]
  ],
  [
    [
      13009,
      13009
    ],
    "mapped",
    [
      12452
    ]
  ],
  [
    [
      13010,
      13010
    ],
    "mapped",
    [
      12454
    ]
  ],
  [
    [
      13011,
      13011
    ],
    "mapped",
    [
      12456
    ]
  ],
  [
    [
      13012,
      13012
    ],
    "mapped",
    [
      12458
    ]
  ],
  [
    [
      13013,
      13013
    ],
    "mapped",
    [
      12459
    ]
  ],
  [
    [
      13014,
      13014
    ],
    "mapped",
    [
      12461
    ]
  ],
  [
    [
      13015,
      13015
    ],
    "mapped",
    [
      12463
    ]
  ],
  [
    [
      13016,
      13016
    ],
    "mapped",
    [
      12465
    ]
  ],
  [
    [
      13017,
      13017
    ],
    "mapped",
    [
      12467
    ]
  ],
  [
    [
      13018,
      13018
    ],
    "mapped",
    [
      12469
    ]
  ],
  [
    [
      13019,
      13019
    ],
    "mapped",
    [
      12471
    ]
  ],
  [
    [
      13020,
      13020
    ],
    "mapped",
    [
      12473
    ]
  ],
  [
    [
      13021,
      13021
    ],
    "mapped",
    [
      12475
    ]
  ],
  [
    [
      13022,
      13022
    ],
    "mapped",
    [
      12477
    ]
  ],
  [
    [
      13023,
      13023
    ],
    "mapped",
    [
      12479
    ]
  ],
  [
    [
      13024,
      13024
    ],
    "mapped",
    [
      12481
    ]
  ],
  [
    [
      13025,
      13025
    ],
    "mapped",
    [
      12484
    ]
  ],
  [
    [
      13026,
      13026
    ],
    "mapped",
    [
      12486
    ]
  ],
  [
    [
      13027,
      13027
    ],
    "mapped",
    [
      12488
    ]
  ],
  [
    [
      13028,
      13028
    ],
    "mapped",
    [
      12490
    ]
  ],
  [
    [
      13029,
      13029
    ],
    "mapped",
    [
      12491
    ]
  ],
  [
    [
      13030,
      13030
    ],
    "mapped",
    [
      12492
    ]
  ],
  [
    [
      13031,
      13031
    ],
    "mapped",
    [
      12493
    ]
  ],
  [
    [
      13032,
      13032
    ],
    "mapped",
    [
      12494
    ]
  ],
  [
    [
      13033,
      13033
    ],
    "mapped",
    [
      12495
    ]
  ],
  [
    [
      13034,
      13034
    ],
    "mapped",
    [
      12498
    ]
  ],
  [
    [
      13035,
      13035
    ],
    "mapped",
    [
      12501
    ]
  ],
  [
    [
      13036,
      13036
    ],
    "mapped",
    [
      12504
    ]
  ],
  [
    [
      13037,
      13037
    ],
    "mapped",
    [
      12507
    ]
  ],
  [
    [
      13038,
      13038
    ],
    "mapped",
    [
      12510
    ]
  ],
  [
    [
      13039,
      13039
    ],
    "mapped",
    [
      12511
    ]
  ],
  [
    [
      13040,
      13040
    ],
    "mapped",
    [
      12512
    ]
  ],
  [
    [
      13041,
      13041
    ],
    "mapped",
    [
      12513
    ]
  ],
  [
    [
      13042,
      13042
    ],
    "mapped",
    [
      12514
    ]
  ],
  [
    [
      13043,
      13043
    ],
    "mapped",
    [
      12516
    ]
  ],
  [
    [
      13044,
      13044
    ],
    "mapped",
    [
      12518
    ]
  ],
  [
    [
      13045,
      13045
    ],
    "mapped",
    [
      12520
    ]
  ],
  [
    [
      13046,
      13046
    ],
    "mapped",
    [
      12521
    ]
  ],
  [
    [
      13047,
      13047
    ],
    "mapped",
    [
      12522
    ]
  ],
  [
    [
      13048,
      13048
    ],
    "mapped",
    [
      12523
    ]
  ],
  [
    [
      13049,
      13049
    ],
    "mapped",
    [
      12524
    ]
  ],
  [
    [
      13050,
      13050
    ],
    "mapped",
    [
      12525
    ]
  ],
  [
    [
      13051,
      13051
    ],
    "mapped",
    [
      12527
    ]
  ],
  [
    [
      13052,
      13052
    ],
    "mapped",
    [
      12528
    ]
  ],
  [
    [
      13053,
      13053
    ],
    "mapped",
    [
      12529
    ]
  ],
  [
    [
      13054,
      13054
    ],
    "mapped",
    [
      12530
    ]
  ],
  [
    [
      13055,
      13055
    ],
    "disallowed"
  ],
  [
    [
      13056,
      13056
    ],
    "mapped",
    [
      12450,
      12497,
      12540,
      12488
    ]
  ],
  [
    [
      13057,
      13057
    ],
    "mapped",
    [
      12450,
      12523,
      12501,
      12449
    ]
  ],
  [
    [
      13058,
      13058
    ],
    "mapped",
    [
      12450,
      12531,
      12506,
      12450
    ]
  ],
  [
    [
      13059,
      13059
    ],
    "mapped",
    [
      12450,
      12540,
      12523
    ]
  ],
  [
    [
      13060,
      13060
    ],
    "mapped",
    [
      12452,
      12491,
      12531,
      12464
    ]
  ],
  [
    [
      13061,
      13061
    ],
    "mapped",
    [
      12452,
      12531,
      12481
    ]
  ],
  [
    [
      13062,
      13062
    ],
    "mapped",
    [
      12454,
      12457,
      12531
    ]
  ],
  [
    [
      13063,
      13063
    ],
    "mapped",
    [
      12456,
      12473,
      12463,
      12540,
      12489
    ]
  ],
  [
    [
      13064,
      13064
    ],
    "mapped",
    [
      12456,
      12540,
      12459,
      12540
    ]
  ],
  [
    [
      13065,
      13065
    ],
    "mapped",
    [
      12458,
      12531,
      12473
    ]
  ],
  [
    [
      13066,
      13066
    ],
    "mapped",
    [
      12458,
      12540,
      12512
    ]
  ],
  [
    [
      13067,
      13067
    ],
    "mapped",
    [
      12459,
      12452,
      12522
    ]
  ],
  [
    [
      13068,
      13068
    ],
    "mapped",
    [
      12459,
      12521,
      12483,
      12488
    ]
  ],
  [
    [
      13069,
      13069
    ],
    "mapped",
    [
      12459,
      12525,
      12522,
      12540
    ]
  ],
  [
    [
      13070,
      13070
    ],
    "mapped",
    [
      12460,
      12525,
      12531
    ]
  ],
  [
    [
      13071,
      13071
    ],
    "mapped",
    [
      12460,
      12531,
      12510
    ]
  ],
  [
    [
      13072,
      13072
    ],
    "mapped",
    [
      12462,
      12460
    ]
  ],
  [
    [
      13073,
      13073
    ],
    "mapped",
    [
      12462,
      12491,
      12540
    ]
  ],
  [
    [
      13074,
      13074
    ],
    "mapped",
    [
      12461,
      12517,
      12522,
      12540
    ]
  ],
  [
    [
      13075,
      13075
    ],
    "mapped",
    [
      12462,
      12523,
      12480,
      12540
    ]
  ],
  [
    [
      13076,
      13076
    ],
    "mapped",
    [
      12461,
      12525
    ]
  ],
  [
    [
      13077,
      13077
    ],
    "mapped",
    [
      12461,
      12525,
      12464,
      12521,
      12512
    ]
  ],
  [
    [
      13078,
      13078
    ],
    "mapped",
    [
      12461,
      12525,
      12513,
      12540,
      12488,
      12523
    ]
  ],
  [
    [
      13079,
      13079
    ],
    "mapped",
    [
      12461,
      12525,
      12527,
      12483,
      12488
    ]
  ],
  [
    [
      13080,
      13080
    ],
    "mapped",
    [
      12464,
      12521,
      12512
    ]
  ],
  [
    [
      13081,
      13081
    ],
    "mapped",
    [
      12464,
      12521,
      12512,
      12488,
      12531
    ]
  ],
  [
    [
      13082,
      13082
    ],
    "mapped",
    [
      12463,
      12523,
      12476,
      12452,
      12525
    ]
  ],
  [
    [
      13083,
      13083
    ],
    "mapped",
    [
      12463,
      12525,
      12540,
      12493
    ]
  ],
  [
    [
      13084,
      13084
    ],
    "mapped",
    [
      12465,
      12540,
      12473
    ]
  ],
  [
    [
      13085,
      13085
    ],
    "mapped",
    [
      12467,
      12523,
      12490
    ]
  ],
  [
    [
      13086,
      13086
    ],
    "mapped",
    [
      12467,
      12540,
      12509
    ]
  ],
  [
    [
      13087,
      13087
    ],
    "mapped",
    [
      12469,
      12452,
      12463,
      12523
    ]
  ],
  [
    [
      13088,
      13088
    ],
    "mapped",
    [
      12469,
      12531,
      12481,
      12540,
      12512
    ]
  ],
  [
    [
      13089,
      13089
    ],
    "mapped",
    [
      12471,
      12522,
      12531,
      12464
    ]
  ],
  [
    [
      13090,
      13090
    ],
    "mapped",
    [
      12475,
      12531,
      12481
    ]
  ],
  [
    [
      13091,
      13091
    ],
    "mapped",
    [
      12475,
      12531,
      12488
    ]
  ],
  [
    [
      13092,
      13092
    ],
    "mapped",
    [
      12480,
      12540,
      12473
    ]
  ],
  [
    [
      13093,
      13093
    ],
    "mapped",
    [
      12487,
      12471
    ]
  ],
  [
    [
      13094,
      13094
    ],
    "mapped",
    [
      12489,
      12523
    ]
  ],
  [
    [
      13095,
      13095
    ],
    "mapped",
    [
      12488,
      12531
    ]
  ],
  [
    [
      13096,
      13096
    ],
    "mapped",
    [
      12490,
      12494
    ]
  ],
  [
    [
      13097,
      13097
    ],
    "mapped",
    [
      12494,
      12483,
      12488
    ]
  ],
  [
    [
      13098,
      13098
    ],
    "mapped",
    [
      12495,
      12452,
      12484
    ]
  ],
  [
    [
      13099,
      13099
    ],
    "mapped",
    [
      12497,
      12540,
      12475,
      12531,
      12488
    ]
  ],
  [
    [
      13100,
      13100
    ],
    "mapped",
    [
      12497,
      12540,
      12484
    ]
  ],
  [
    [
      13101,
      13101
    ],
    "mapped",
    [
      12496,
      12540,
      12524,
      12523
    ]
  ],
  [
    [
      13102,
      13102
    ],
    "mapped",
    [
      12500,
      12450,
      12473,
      12488,
      12523
    ]
  ],
  [
    [
      13103,
      13103
    ],
    "mapped",
    [
      12500,
      12463,
      12523
    ]
  ],
  [
    [
      13104,
      13104
    ],
    "mapped",
    [
      12500,
      12467
    ]
  ],
  [
    [
      13105,
      13105
    ],
    "mapped",
    [
      12499,
      12523
    ]
  ],
  [
    [
      13106,
      13106
    ],
    "mapped",
    [
      12501,
      12449,
      12521,
      12483,
      12489
    ]
  ],
  [
    [
      13107,
      13107
    ],
    "mapped",
    [
      12501,
      12451,
      12540,
      12488
    ]
  ],
  [
    [
      13108,
      13108
    ],
    "mapped",
    [
      12502,
      12483,
      12471,
      12455,
      12523
    ]
  ],
  [
    [
      13109,
      13109
    ],
    "mapped",
    [
      12501,
      12521,
      12531
    ]
  ],
  [
    [
      13110,
      13110
    ],
    "mapped",
    [
      12504,
      12463,
      12479,
      12540,
      12523
    ]
  ],
  [
    [
      13111,
      13111
    ],
    "mapped",
    [
      12506,
      12477
    ]
  ],
  [
    [
      13112,
      13112
    ],
    "mapped",
    [
      12506,
      12491,
      12498
    ]
  ],
  [
    [
      13113,
      13113
    ],
    "mapped",
    [
      12504,
      12523,
      12484
    ]
  ],
  [
    [
      13114,
      13114
    ],
    "mapped",
    [
      12506,
      12531,
      12473
    ]
  ],
  [
    [
      13115,
      13115
    ],
    "mapped",
    [
      12506,
      12540,
      12472
    ]
  ],
  [
    [
      13116,
      13116
    ],
    "mapped",
    [
      12505,
      12540,
      12479
    ]
  ],
  [
    [
      13117,
      13117
    ],
    "mapped",
    [
      12509,
      12452,
      12531,
      12488
    ]
  ],
  [
    [
      13118,
      13118
    ],
    "mapped",
    [
      12508,
      12523,
      12488
    ]
  ],
  [
    [
      13119,
      13119
    ],
    "mapped",
    [
      12507,
      12531
    ]
  ],
  [
    [
      13120,
      13120
    ],
    "mapped",
    [
      12509,
      12531,
      12489
    ]
  ],
  [
    [
      13121,
      13121
    ],
    "mapped",
    [
      12507,
      12540,
      12523
    ]
  ],
  [
    [
      13122,
      13122
    ],
    "mapped",
    [
      12507,
      12540,
      12531
    ]
  ],
  [
    [
      13123,
      13123
    ],
    "mapped",
    [
      12510,
      12452,
      12463,
      12525
    ]
  ],
  [
    [
      13124,
      13124
    ],
    "mapped",
    [
      12510,
      12452,
      12523
    ]
  ],
  [
    [
      13125,
      13125
    ],
    "mapped",
    [
      12510,
      12483,
      12495
    ]
  ],
  [
    [
      13126,
      13126
    ],
    "mapped",
    [
      12510,
      12523,
      12463
    ]
  ],
  [
    [
      13127,
      13127
    ],
    "mapped",
    [
      12510,
      12531,
      12471,
      12519,
      12531
    ]
  ],
  [
    [
      13128,
      13128
    ],
    "mapped",
    [
      12511,
      12463,
      12525,
      12531
    ]
  ],
  [
    [
      13129,
      13129
    ],
    "mapped",
    [
      12511,
      12522
    ]
  ],
  [
    [
      13130,
      13130
    ],
    "mapped",
    [
      12511,
      12522,
      12496,
      12540,
      12523
    ]
  ],
  [
    [
      13131,
      13131
    ],
    "mapped",
    [
      12513,
      12460
    ]
  ],
  [
    [
      13132,
      13132
    ],
    "mapped",
    [
      12513,
      12460,
      12488,
      12531
    ]
  ],
  [
    [
      13133,
      13133
    ],
    "mapped",
    [
      12513,
      12540,
      12488,
      12523
    ]
  ],
  [
    [
      13134,
      13134
    ],
    "mapped",
    [
      12516,
      12540,
      12489
    ]
  ],
  [
    [
      13135,
      13135
    ],
    "mapped",
    [
      12516,
      12540,
      12523
    ]
  ],
  [
    [
      13136,
      13136
    ],
    "mapped",
    [
      12518,
      12450,
      12531
    ]
  ],
  [
    [
      13137,
      13137
    ],
    "mapped",
    [
      12522,
      12483,
      12488,
      12523
    ]
  ],
  [
    [
      13138,
      13138
    ],
    "mapped",
    [
      12522,
      12521
    ]
  ],
  [
    [
      13139,
      13139
    ],
    "mapped",
    [
      12523,
      12500,
      12540
    ]
  ],
  [
    [
      13140,
      13140
    ],
    "mapped",
    [
      12523,
      12540,
      12502,
      12523
    ]
  ],
  [
    [
      13141,
      13141
    ],
    "mapped",
    [
      12524,
      12512
    ]
  ],
  [
    [
      13142,
      13142
    ],
    "mapped",
    [
      12524,
      12531,
      12488,
      12466,
      12531
    ]
  ],
  [
    [
      13143,
      13143
    ],
    "mapped",
    [
      12527,
      12483,
      12488
    ]
  ],
  [
    [
      13144,
      13144
    ],
    "mapped",
    [
      48,
      28857
    ]
  ],
  [
    [
      13145,
      13145
    ],
    "mapped",
    [
      49,
      28857
    ]
  ],
  [
    [
      13146,
      13146
    ],
    "mapped",
    [
      50,
      28857
    ]
  ],
  [
    [
      13147,
      13147
    ],
    "mapped",
    [
      51,
      28857
    ]
  ],
  [
    [
      13148,
      13148
    ],
    "mapped",
    [
      52,
      28857
    ]
  ],
  [
    [
      13149,
      13149
    ],
    "mapped",
    [
      53,
      28857
    ]
  ],
  [
    [
      13150,
      13150
    ],
    "mapped",
    [
      54,
      28857
    ]
  ],
  [
    [
      13151,
      13151
    ],
    "mapped",
    [
      55,
      28857
    ]
  ],
  [
    [
      13152,
      13152
    ],
    "mapped",
    [
      56,
      28857
    ]
  ],
  [
    [
      13153,
      13153
    ],
    "mapped",
    [
      57,
      28857
    ]
  ],
  [
    [
      13154,
      13154
    ],
    "mapped",
    [
      49,
      48,
      28857
    ]
  ],
  [
    [
      13155,
      13155
    ],
    "mapped",
    [
      49,
      49,
      28857
    ]
  ],
  [
    [
      13156,
      13156
    ],
    "mapped",
    [
      49,
      50,
      28857
    ]
  ],
  [
    [
      13157,
      13157
    ],
    "mapped",
    [
      49,
      51,
      28857
    ]
  ],
  [
    [
      13158,
      13158
    ],
    "mapped",
    [
      49,
      52,
      28857
    ]
  ],
  [
    [
      13159,
      13159
    ],
    "mapped",
    [
      49,
      53,
      28857
    ]
  ],
  [
    [
      13160,
      13160
    ],
    "mapped",
    [
      49,
      54,
      28857
    ]
  ],
  [
    [
      13161,
      13161
    ],
    "mapped",
    [
      49,
      55,
      28857
    ]
  ],
  [
    [
      13162,
      13162
    ],
    "mapped",
    [
      49,
      56,
      28857
    ]
  ],
  [
    [
      13163,
      13163
    ],
    "mapped",
    [
      49,
      57,
      28857
    ]
  ],
  [
    [
      13164,
      13164
    ],
    "mapped",
    [
      50,
      48,
      28857
    ]
  ],
  [
    [
      13165,
      13165
    ],
    "mapped",
    [
      50,
      49,
      28857
    ]
  ],
  [
    [
      13166,
      13166
    ],
    "mapped",
    [
      50,
      50,
      28857
    ]
  ],
  [
    [
      13167,
      13167
    ],
    "mapped",
    [
      50,
      51,
      28857
    ]
  ],
  [
    [
      13168,
      13168
    ],
    "mapped",
    [
      50,
      52,
      28857
    ]
  ],
  [
    [
      13169,
      13169
    ],
    "mapped",
    [
      104,
      112,
      97
    ]
  ],
  [
    [
      13170,
      13170
    ],
    "mapped",
    [
      100,
      97
    ]
  ],
  [
    [
      13171,
      13171
    ],
    "mapped",
    [
      97,
      117
    ]
  ],
  [
    [
      13172,
      13172
    ],
    "mapped",
    [
      98,
      97,
      114
    ]
  ],
  [
    [
      13173,
      13173
    ],
    "mapped",
    [
      111,
      118
    ]
  ],
  [
    [
      13174,
      13174
    ],
    "mapped",
    [
      112,
      99
    ]
  ],
  [
    [
      13175,
      13175
    ],
    "mapped",
    [
      100,
      109
    ]
  ],
  [
    [
      13176,
      13176
    ],
    "mapped",
    [
      100,
      109,
      50
    ]
  ],
  [
    [
      13177,
      13177
    ],
    "mapped",
    [
      100,
      109,
      51
    ]
  ],
  [
    [
      13178,
      13178
    ],
    "mapped",
    [
      105,
      117
    ]
  ],
  [
    [
      13179,
      13179
    ],
    "mapped",
    [
      24179,
      25104
    ]
  ],
  [
    [
      13180,
      13180
    ],
    "mapped",
    [
      26157,
      21644
    ]
  ],
  [
    [
      13181,
      13181
    ],
    "mapped",
    [
      22823,
      27491
    ]
  ],
  [
    [
      13182,
      13182
    ],
    "mapped",
    [
      26126,
      27835
    ]
  ],
  [
    [
      13183,
      13183
    ],
    "mapped",
    [
      26666,
      24335,
      20250,
      31038
    ]
  ],
  [
    [
      13184,
      13184
    ],
    "mapped",
    [
      112,
      97
    ]
  ],
  [
    [
      13185,
      13185
    ],
    "mapped",
    [
      110,
      97
    ]
  ],
  [
    [
      13186,
      13186
    ],
    "mapped",
    [
      956,
      97
    ]
  ],
  [
    [
      13187,
      13187
    ],
    "mapped",
    [
      109,
      97
    ]
  ],
  [
    [
      13188,
      13188
    ],
    "mapped",
    [
      107,
      97
    ]
  ],
  [
    [
      13189,
      13189
    ],
    "mapped",
    [
      107,
      98
    ]
  ],
  [
    [
      13190,
      13190
    ],
    "mapped",
    [
      109,
      98
    ]
  ],
  [
    [
      13191,
      13191
    ],
    "mapped",
    [
      103,
      98
    ]
  ],
  [
    [
      13192,
      13192
    ],
    "mapped",
    [
      99,
      97,
      108
    ]
  ],
  [
    [
      13193,
      13193
    ],
    "mapped",
    [
      107,
      99,
      97,
      108
    ]
  ],
  [
    [
      13194,
      13194
    ],
    "mapped",
    [
      112,
      102
    ]
  ],
  [
    [
      13195,
      13195
    ],
    "mapped",
    [
      110,
      102
    ]
  ],
  [
    [
      13196,
      13196
    ],
    "mapped",
    [
      956,
      102
    ]
  ],
  [
    [
      13197,
      13197
    ],
    "mapped",
    [
      956,
      103
    ]
  ],
  [
    [
      13198,
      13198
    ],
    "mapped",
    [
      109,
      103
    ]
  ],
  [
    [
      13199,
      13199
    ],
    "mapped",
    [
      107,
      103
    ]
  ],
  [
    [
      13200,
      13200
    ],
    "mapped",
    [
      104,
      122
    ]
  ],
  [
    [
      13201,
      13201
    ],
    "mapped",
    [
      107,
      104,
      122
    ]
  ],
  [
    [
      13202,
      13202
    ],
    "mapped",
    [
      109,
      104,
      122
    ]
  ],
  [
    [
      13203,
      13203
    ],
    "mapped",
    [
      103,
      104,
      122
    ]
  ],
  [
    [
      13204,
      13204
    ],
    "mapped",
    [
      116,
      104,
      122
    ]
  ],
  [
    [
      13205,
      13205
    ],
    "mapped",
    [
      956,
      108
    ]
  ],
  [
    [
      13206,
      13206
    ],
    "mapped",
    [
      109,
      108
    ]
  ],
  [
    [
      13207,
      13207
    ],
    "mapped",
    [
      100,
      108
    ]
  ],
  [
    [
      13208,
      13208
    ],
    "mapped",
    [
      107,
      108
    ]
  ],
  [
    [
      13209,
      13209
    ],
    "mapped",
    [
      102,
      109
    ]
  ],
  [
    [
      13210,
      13210
    ],
    "mapped",
    [
      110,
      109
    ]
  ],
  [
    [
      13211,
      13211
    ],
    "mapped",
    [
      956,
      109
    ]
  ],
  [
    [
      13212,
      13212
    ],
    "mapped",
    [
      109,
      109
    ]
  ],
  [
    [
      13213,
      13213
    ],
    "mapped",
    [
      99,
      109
    ]
  ],
  [
    [
      13214,
      13214
    ],
    "mapped",
    [
      107,
      109
    ]
  ],
  [
    [
      13215,
      13215
    ],
    "mapped",
    [
      109,
      109,
      50
    ]
  ],
  [
    [
      13216,
      13216
    ],
    "mapped",
    [
      99,
      109,
      50
    ]
  ],
  [
    [
      13217,
      13217
    ],
    "mapped",
    [
      109,
      50
    ]
  ],
  [
    [
      13218,
      13218
    ],
    "mapped",
    [
      107,
      109,
      50
    ]
  ],
  [
    [
      13219,
      13219
    ],
    "mapped",
    [
      109,
      109,
      51
    ]
  ],
  [
    [
      13220,
      13220
    ],
    "mapped",
    [
      99,
      109,
      51
    ]
  ],
  [
    [
      13221,
      13221
    ],
    "mapped",
    [
      109,
      51
    ]
  ],
  [
    [
      13222,
      13222
    ],
    "mapped",
    [
      107,
      109,
      51
    ]
  ],
  [
    [
      13223,
      13223
    ],
    "mapped",
    [
      109,
      8725,
      115
    ]
  ],
  [
    [
      13224,
      13224
    ],
    "mapped",
    [
      109,
      8725,
      115,
      50
    ]
  ],
  [
    [
      13225,
      13225
    ],
    "mapped",
    [
      112,
      97
    ]
  ],
  [
    [
      13226,
      13226
    ],
    "mapped",
    [
      107,
      112,
      97
    ]
  ],
  [
    [
      13227,
      13227
    ],
    "mapped",
    [
      109,
      112,
      97
    ]
  ],
  [
    [
      13228,
      13228
    ],
    "mapped",
    [
      103,
      112,
      97
    ]
  ],
  [
    [
      13229,
      13229
    ],
    "mapped",
    [
      114,
      97,
      100
    ]
  ],
  [
    [
      13230,
      13230
    ],
    "mapped",
    [
      114,
      97,
      100,
      8725,
      115
    ]
  ],
  [
    [
      13231,
      13231
    ],
    "mapped",
    [
      114,
      97,
      100,
      8725,
      115,
      50
    ]
  ],
  [
    [
      13232,
      13232
    ],
    "mapped",
    [
      112,
      115
    ]
  ],
  [
    [
      13233,
      13233
    ],
    "mapped",
    [
      110,
      115
    ]
  ],
  [
    [
      13234,
      13234
    ],
    "mapped",
    [
      956,
      115
    ]
  ],
  [
    [
      13235,
      13235
    ],
    "mapped",
    [
      109,
      115
    ]
  ],
  [
    [
      13236,
      13236
    ],
    "mapped",
    [
      112,
      118
    ]
  ],
  [
    [
      13237,
      13237
    ],
    "mapped",
    [
      110,
      118
    ]
  ],
  [
    [
      13238,
      13238
    ],
    "mapped",
    [
      956,
      118
    ]
  ],
  [
    [
      13239,
      13239
    ],
    "mapped",
    [
      109,
      118
    ]
  ],
  [
    [
      13240,
      13240
    ],
    "mapped",
    [
      107,
      118
    ]
  ],
  [
    [
      13241,
      13241
    ],
    "mapped",
    [
      109,
      118
    ]
  ],
  [
    [
      13242,
      13242
    ],
    "mapped",
    [
      112,
      119
    ]
  ],
  [
    [
      13243,
      13243
    ],
    "mapped",
    [
      110,
      119
    ]
  ],
  [
    [
      13244,
      13244
    ],
    "mapped",
    [
      956,
      119
    ]
  ],
  [
    [
      13245,
      13245
    ],
    "mapped",
    [
      109,
      119
    ]
  ],
  [
    [
      13246,
      13246
    ],
    "mapped",
    [
      107,
      119
    ]
  ],
  [
    [
      13247,
      13247
    ],
    "mapped",
    [
      109,
      119
    ]
  ],
  [
    [
      13248,
      13248
    ],
    "mapped",
    [
      107,
      969
    ]
  ],
  [
    [
      13249,
      13249
    ],
    "mapped",
    [
      109,
      969
    ]
  ],
  [
    [
      13250,
      13250
    ],
    "disallowed"
  ],
  [
    [
      13251,
      13251
    ],
    "mapped",
    [
      98,
      113
    ]
  ],
  [
    [
      13252,
      13252
    ],
    "mapped",
    [
      99,
      99
    ]
  ],
  [
    [
      13253,
      13253
    ],
    "mapped",
    [
      99,
      100
    ]
  ],
  [
    [
      13254,
      13254
    ],
    "mapped",
    [
      99,
      8725,
      107,
      103
    ]
  ],
  [
    [
      13255,
      13255
    ],
    "disallowed"
  ],
  [
    [
      13256,
      13256
    ],
    "mapped",
    [
      100,
      98
    ]
  ],
  [
    [
      13257,
      13257
    ],
    "mapped",
    [
      103,
      121
    ]
  ],
  [
    [
      13258,
      13258
    ],
    "mapped",
    [
      104,
      97
    ]
  ],
  [
    [
      13259,
      13259
    ],
    "mapped",
    [
      104,
      112
    ]
  ],
  [
    [
      13260,
      13260
    ],
    "mapped",
    [
      105,
      110
    ]
  ],
  [
    [
      13261,
      13261
    ],
    "mapped",
    [
      107,
      107
    ]
  ],
  [
    [
      13262,
      13262
    ],
    "mapped",
    [
      107,
      109
    ]
  ],
  [
    [
      13263,
      13263
    ],
    "mapped",
    [
      107,
      116
    ]
  ],
  [
    [
      13264,
      13264
    ],
    "mapped",
    [
      108,
      109
    ]
  ],
  [
    [
      13265,
      13265
    ],
    "mapped",
    [
      108,
      110
    ]
  ],
  [
    [
      13266,
      13266
    ],
    "mapped",
    [
      108,
      111,
      103
    ]
  ],
  [
    [
      13267,
      13267
    ],
    "mapped",
    [
      108,
      120
    ]
  ],
  [
    [
      13268,
      13268
    ],
    "mapped",
    [
      109,
      98
    ]
  ],
  [
    [
      13269,
      13269
    ],
    "mapped",
    [
      109,
      105,
      108
    ]
  ],
  [
    [
      13270,
      13270
    ],
    "mapped",
    [
      109,
      111,
      108
    ]
  ],
  [
    [
      13271,
      13271
    ],
    "mapped",
    [
      112,
      104
    ]
  ],
  [
    [
      13272,
      13272
    ],
    "disallowed"
  ],
  [
    [
      13273,
      13273
    ],
    "mapped",
    [
      112,
      112,
      109
    ]
  ],
  [
    [
      13274,
      13274
    ],
    "mapped",
    [
      112,
      114
    ]
  ],
  [
    [
      13275,
      13275
    ],
    "mapped",
    [
      115,
      114
    ]
  ],
  [
    [
      13276,
      13276
    ],
    "mapped",
    [
      115,
      118
    ]
  ],
  [
    [
      13277,
      13277
    ],
    "mapped",
    [
      119,
      98
    ]
  ],
  [
    [
      13278,
      13278
    ],
    "mapped",
    [
      118,
      8725,
      109
    ]
  ],
  [
    [
      13279,
      13279
    ],
    "mapped",
    [
      97,
      8725,
      109
    ]
  ],
  [
    [
      13280,
      13280
    ],
    "mapped",
    [
      49,
      26085
    ]
  ],
  [
    [
      13281,
      13281
    ],
    "mapped",
    [
      50,
      26085
    ]
  ],
  [
    [
      13282,
      13282
    ],
    "mapped",
    [
      51,
      26085
    ]
  ],
  [
    [
      13283,
      13283
    ],
    "mapped",
    [
      52,
      26085
    ]
  ],
  [
    [
      13284,
      13284
    ],
    "mapped",
    [
      53,
      26085
    ]
  ],
  [
    [
      13285,
      13285
    ],
    "mapped",
    [
      54,
      26085
    ]
  ],
  [
    [
      13286,
      13286
    ],
    "mapped",
    [
      55,
      26085
    ]
  ],
  [
    [
      13287,
      13287
    ],
    "mapped",
    [
      56,
      26085
    ]
  ],
  [
    [
      13288,
      13288
    ],
    "mapped",
    [
      57,
      26085
    ]
  ],
  [
    [
      13289,
      13289
    ],
    "mapped",
    [
      49,
      48,
      26085
    ]
  ],
  [
    [
      13290,
      13290
    ],
    "mapped",
    [
      49,
      49,
      26085
    ]
  ],
  [
    [
      13291,
      13291
    ],
    "mapped",
    [
      49,
      50,
      26085
    ]
  ],
  [
    [
      13292,
      13292
    ],
    "mapped",
    [
      49,
      51,
      26085
    ]
  ],
  [
    [
      13293,
      13293
    ],
    "mapped",
    [
      49,
      52,
      26085
    ]
  ],
  [
    [
      13294,
      13294
    ],
    "mapped",
    [
      49,
      53,
      26085
    ]
  ],
  [
    [
      13295,
      13295
    ],
    "mapped",
    [
      49,
      54,
      26085
    ]
  ],
  [
    [
      13296,
      13296
    ],
    "mapped",
    [
      49,
      55,
      26085
    ]
  ],
  [
    [
      13297,
      13297
    ],
    "mapped",
    [
      49,
      56,
      26085
    ]
  ],
  [
    [
      13298,
      13298
    ],
    "mapped",
    [
      49,
      57,
      26085
    ]
  ],
  [
    [
      13299,
      13299
    ],
    "mapped",
    [
      50,
      48,
      26085
    ]
  ],
  [
    [
      13300,
      13300
    ],
    "mapped",
    [
      50,
      49,
      26085
    ]
  ],
  [
    [
      13301,
      13301
    ],
    "mapped",
    [
      50,
      50,
      26085
    ]
  ],
  [
    [
      13302,
      13302
    ],
    "mapped",
    [
      50,
      51,
      26085
    ]
  ],
  [
    [
      13303,
      13303
    ],
    "mapped",
    [
      50,
      52,
      26085
    ]
  ],
  [
    [
      13304,
      13304
    ],
    "mapped",
    [
      50,
      53,
      26085
    ]
  ],
  [
    [
      13305,
      13305
    ],
    "mapped",
    [
      50,
      54,
      26085
    ]
  ],
  [
    [
      13306,
      13306
    ],
    "mapped",
    [
      50,
      55,
      26085
    ]
  ],
  [
    [
      13307,
      13307
    ],
    "mapped",
    [
      50,
      56,
      26085
    ]
  ],
  [
    [
      13308,
      13308
    ],
    "mapped",
    [
      50,
      57,
      26085
    ]
  ],
  [
    [
      13309,
      13309
    ],
    "mapped",
    [
      51,
      48,
      26085
    ]
  ],
  [
    [
      13310,
      13310
    ],
    "mapped",
    [
      51,
      49,
      26085
    ]
  ],
  [
    [
      13311,
      13311
    ],
    "mapped",
    [
      103,
      97,
      108
    ]
  ],
  [
    [
      13312,
      19893
    ],
    "valid"
  ],
  [
    [
      19894,
      19903
    ],
    "disallowed"
  ],
  [
    [
      19904,
      19967
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      19968,
      40869
    ],
    "valid"
  ],
  [
    [
      40870,
      40891
    ],
    "valid"
  ],
  [
    [
      40892,
      40899
    ],
    "valid"
  ],
  [
    [
      40900,
      40907
    ],
    "valid"
  ],
  [
    [
      40908,
      40908
    ],
    "valid"
  ],
  [
    [
      40909,
      40917
    ],
    "valid"
  ],
  [
    [
      40918,
      40959
    ],
    "disallowed"
  ],
  [
    [
      40960,
      42124
    ],
    "valid"
  ],
  [
    [
      42125,
      42127
    ],
    "disallowed"
  ],
  [
    [
      42128,
      42145
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42146,
      42147
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42148,
      42163
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42164,
      42164
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42165,
      42176
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42177,
      42177
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42178,
      42180
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42181,
      42181
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42182,
      42182
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42183,
      42191
    ],
    "disallowed"
  ],
  [
    [
      42192,
      42237
    ],
    "valid"
  ],
  [
    [
      42238,
      42239
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42240,
      42508
    ],
    "valid"
  ],
  [
    [
      42509,
      42511
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42512,
      42539
    ],
    "valid"
  ],
  [
    [
      42540,
      42559
    ],
    "disallowed"
  ],
  [
    [
      42560,
      42560
    ],
    "mapped",
    [
      42561
    ]
  ],
  [
    [
      42561,
      42561
    ],
    "valid"
  ],
  [
    [
      42562,
      42562
    ],
    "mapped",
    [
      42563
    ]
  ],
  [
    [
      42563,
      42563
    ],
    "valid"
  ],
  [
    [
      42564,
      42564
    ],
    "mapped",
    [
      42565
    ]
  ],
  [
    [
      42565,
      42565
    ],
    "valid"
  ],
  [
    [
      42566,
      42566
    ],
    "mapped",
    [
      42567
    ]
  ],
  [
    [
      42567,
      42567
    ],
    "valid"
  ],
  [
    [
      42568,
      42568
    ],
    "mapped",
    [
      42569
    ]
  ],
  [
    [
      42569,
      42569
    ],
    "valid"
  ],
  [
    [
      42570,
      42570
    ],
    "mapped",
    [
      42571
    ]
  ],
  [
    [
      42571,
      42571
    ],
    "valid"
  ],
  [
    [
      42572,
      42572
    ],
    "mapped",
    [
      42573
    ]
  ],
  [
    [
      42573,
      42573
    ],
    "valid"
  ],
  [
    [
      42574,
      42574
    ],
    "mapped",
    [
      42575
    ]
  ],
  [
    [
      42575,
      42575
    ],
    "valid"
  ],
  [
    [
      42576,
      42576
    ],
    "mapped",
    [
      42577
    ]
  ],
  [
    [
      42577,
      42577
    ],
    "valid"
  ],
  [
    [
      42578,
      42578
    ],
    "mapped",
    [
      42579
    ]
  ],
  [
    [
      42579,
      42579
    ],
    "valid"
  ],
  [
    [
      42580,
      42580
    ],
    "mapped",
    [
      42581
    ]
  ],
  [
    [
      42581,
      42581
    ],
    "valid"
  ],
  [
    [
      42582,
      42582
    ],
    "mapped",
    [
      42583
    ]
  ],
  [
    [
      42583,
      42583
    ],
    "valid"
  ],
  [
    [
      42584,
      42584
    ],
    "mapped",
    [
      42585
    ]
  ],
  [
    [
      42585,
      42585
    ],
    "valid"
  ],
  [
    [
      42586,
      42586
    ],
    "mapped",
    [
      42587
    ]
  ],
  [
    [
      42587,
      42587
    ],
    "valid"
  ],
  [
    [
      42588,
      42588
    ],
    "mapped",
    [
      42589
    ]
  ],
  [
    [
      42589,
      42589
    ],
    "valid"
  ],
  [
    [
      42590,
      42590
    ],
    "mapped",
    [
      42591
    ]
  ],
  [
    [
      42591,
      42591
    ],
    "valid"
  ],
  [
    [
      42592,
      42592
    ],
    "mapped",
    [
      42593
    ]
  ],
  [
    [
      42593,
      42593
    ],
    "valid"
  ],
  [
    [
      42594,
      42594
    ],
    "mapped",
    [
      42595
    ]
  ],
  [
    [
      42595,
      42595
    ],
    "valid"
  ],
  [
    [
      42596,
      42596
    ],
    "mapped",
    [
      42597
    ]
  ],
  [
    [
      42597,
      42597
    ],
    "valid"
  ],
  [
    [
      42598,
      42598
    ],
    "mapped",
    [
      42599
    ]
  ],
  [
    [
      42599,
      42599
    ],
    "valid"
  ],
  [
    [
      42600,
      42600
    ],
    "mapped",
    [
      42601
    ]
  ],
  [
    [
      42601,
      42601
    ],
    "valid"
  ],
  [
    [
      42602,
      42602
    ],
    "mapped",
    [
      42603
    ]
  ],
  [
    [
      42603,
      42603
    ],
    "valid"
  ],
  [
    [
      42604,
      42604
    ],
    "mapped",
    [
      42605
    ]
  ],
  [
    [
      42605,
      42607
    ],
    "valid"
  ],
  [
    [
      42608,
      42611
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42612,
      42619
    ],
    "valid"
  ],
  [
    [
      42620,
      42621
    ],
    "valid"
  ],
  [
    [
      42622,
      42622
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42623,
      42623
    ],
    "valid"
  ],
  [
    [
      42624,
      42624
    ],
    "mapped",
    [
      42625
    ]
  ],
  [
    [
      42625,
      42625
    ],
    "valid"
  ],
  [
    [
      42626,
      42626
    ],
    "mapped",
    [
      42627
    ]
  ],
  [
    [
      42627,
      42627
    ],
    "valid"
  ],
  [
    [
      42628,
      42628
    ],
    "mapped",
    [
      42629
    ]
  ],
  [
    [
      42629,
      42629
    ],
    "valid"
  ],
  [
    [
      42630,
      42630
    ],
    "mapped",
    [
      42631
    ]
  ],
  [
    [
      42631,
      42631
    ],
    "valid"
  ],
  [
    [
      42632,
      42632
    ],
    "mapped",
    [
      42633
    ]
  ],
  [
    [
      42633,
      42633
    ],
    "valid"
  ],
  [
    [
      42634,
      42634
    ],
    "mapped",
    [
      42635
    ]
  ],
  [
    [
      42635,
      42635
    ],
    "valid"
  ],
  [
    [
      42636,
      42636
    ],
    "mapped",
    [
      42637
    ]
  ],
  [
    [
      42637,
      42637
    ],
    "valid"
  ],
  [
    [
      42638,
      42638
    ],
    "mapped",
    [
      42639
    ]
  ],
  [
    [
      42639,
      42639
    ],
    "valid"
  ],
  [
    [
      42640,
      42640
    ],
    "mapped",
    [
      42641
    ]
  ],
  [
    [
      42641,
      42641
    ],
    "valid"
  ],
  [
    [
      42642,
      42642
    ],
    "mapped",
    [
      42643
    ]
  ],
  [
    [
      42643,
      42643
    ],
    "valid"
  ],
  [
    [
      42644,
      42644
    ],
    "mapped",
    [
      42645
    ]
  ],
  [
    [
      42645,
      42645
    ],
    "valid"
  ],
  [
    [
      42646,
      42646
    ],
    "mapped",
    [
      42647
    ]
  ],
  [
    [
      42647,
      42647
    ],
    "valid"
  ],
  [
    [
      42648,
      42648
    ],
    "mapped",
    [
      42649
    ]
  ],
  [
    [
      42649,
      42649
    ],
    "valid"
  ],
  [
    [
      42650,
      42650
    ],
    "mapped",
    [
      42651
    ]
  ],
  [
    [
      42651,
      42651
    ],
    "valid"
  ],
  [
    [
      42652,
      42652
    ],
    "mapped",
    [
      1098
    ]
  ],
  [
    [
      42653,
      42653
    ],
    "mapped",
    [
      1100
    ]
  ],
  [
    [
      42654,
      42654
    ],
    "valid"
  ],
  [
    [
      42655,
      42655
    ],
    "valid"
  ],
  [
    [
      42656,
      42725
    ],
    "valid"
  ],
  [
    [
      42726,
      42735
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42736,
      42737
    ],
    "valid"
  ],
  [
    [
      42738,
      42743
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42744,
      42751
    ],
    "disallowed"
  ],
  [
    [
      42752,
      42774
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42775,
      42778
    ],
    "valid"
  ],
  [
    [
      42779,
      42783
    ],
    "valid"
  ],
  [
    [
      42784,
      42785
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42786,
      42786
    ],
    "mapped",
    [
      42787
    ]
  ],
  [
    [
      42787,
      42787
    ],
    "valid"
  ],
  [
    [
      42788,
      42788
    ],
    "mapped",
    [
      42789
    ]
  ],
  [
    [
      42789,
      42789
    ],
    "valid"
  ],
  [
    [
      42790,
      42790
    ],
    "mapped",
    [
      42791
    ]
  ],
  [
    [
      42791,
      42791
    ],
    "valid"
  ],
  [
    [
      42792,
      42792
    ],
    "mapped",
    [
      42793
    ]
  ],
  [
    [
      42793,
      42793
    ],
    "valid"
  ],
  [
    [
      42794,
      42794
    ],
    "mapped",
    [
      42795
    ]
  ],
  [
    [
      42795,
      42795
    ],
    "valid"
  ],
  [
    [
      42796,
      42796
    ],
    "mapped",
    [
      42797
    ]
  ],
  [
    [
      42797,
      42797
    ],
    "valid"
  ],
  [
    [
      42798,
      42798
    ],
    "mapped",
    [
      42799
    ]
  ],
  [
    [
      42799,
      42801
    ],
    "valid"
  ],
  [
    [
      42802,
      42802
    ],
    "mapped",
    [
      42803
    ]
  ],
  [
    [
      42803,
      42803
    ],
    "valid"
  ],
  [
    [
      42804,
      42804
    ],
    "mapped",
    [
      42805
    ]
  ],
  [
    [
      42805,
      42805
    ],
    "valid"
  ],
  [
    [
      42806,
      42806
    ],
    "mapped",
    [
      42807
    ]
  ],
  [
    [
      42807,
      42807
    ],
    "valid"
  ],
  [
    [
      42808,
      42808
    ],
    "mapped",
    [
      42809
    ]
  ],
  [
    [
      42809,
      42809
    ],
    "valid"
  ],
  [
    [
      42810,
      42810
    ],
    "mapped",
    [
      42811
    ]
  ],
  [
    [
      42811,
      42811
    ],
    "valid"
  ],
  [
    [
      42812,
      42812
    ],
    "mapped",
    [
      42813
    ]
  ],
  [
    [
      42813,
      42813
    ],
    "valid"
  ],
  [
    [
      42814,
      42814
    ],
    "mapped",
    [
      42815
    ]
  ],
  [
    [
      42815,
      42815
    ],
    "valid"
  ],
  [
    [
      42816,
      42816
    ],
    "mapped",
    [
      42817
    ]
  ],
  [
    [
      42817,
      42817
    ],
    "valid"
  ],
  [
    [
      42818,
      42818
    ],
    "mapped",
    [
      42819
    ]
  ],
  [
    [
      42819,
      42819
    ],
    "valid"
  ],
  [
    [
      42820,
      42820
    ],
    "mapped",
    [
      42821
    ]
  ],
  [
    [
      42821,
      42821
    ],
    "valid"
  ],
  [
    [
      42822,
      42822
    ],
    "mapped",
    [
      42823
    ]
  ],
  [
    [
      42823,
      42823
    ],
    "valid"
  ],
  [
    [
      42824,
      42824
    ],
    "mapped",
    [
      42825
    ]
  ],
  [
    [
      42825,
      42825
    ],
    "valid"
  ],
  [
    [
      42826,
      42826
    ],
    "mapped",
    [
      42827
    ]
  ],
  [
    [
      42827,
      42827
    ],
    "valid"
  ],
  [
    [
      42828,
      42828
    ],
    "mapped",
    [
      42829
    ]
  ],
  [
    [
      42829,
      42829
    ],
    "valid"
  ],
  [
    [
      42830,
      42830
    ],
    "mapped",
    [
      42831
    ]
  ],
  [
    [
      42831,
      42831
    ],
    "valid"
  ],
  [
    [
      42832,
      42832
    ],
    "mapped",
    [
      42833
    ]
  ],
  [
    [
      42833,
      42833
    ],
    "valid"
  ],
  [
    [
      42834,
      42834
    ],
    "mapped",
    [
      42835
    ]
  ],
  [
    [
      42835,
      42835
    ],
    "valid"
  ],
  [
    [
      42836,
      42836
    ],
    "mapped",
    [
      42837
    ]
  ],
  [
    [
      42837,
      42837
    ],
    "valid"
  ],
  [
    [
      42838,
      42838
    ],
    "mapped",
    [
      42839
    ]
  ],
  [
    [
      42839,
      42839
    ],
    "valid"
  ],
  [
    [
      42840,
      42840
    ],
    "mapped",
    [
      42841
    ]
  ],
  [
    [
      42841,
      42841
    ],
    "valid"
  ],
  [
    [
      42842,
      42842
    ],
    "mapped",
    [
      42843
    ]
  ],
  [
    [
      42843,
      42843
    ],
    "valid"
  ],
  [
    [
      42844,
      42844
    ],
    "mapped",
    [
      42845
    ]
  ],
  [
    [
      42845,
      42845
    ],
    "valid"
  ],
  [
    [
      42846,
      42846
    ],
    "mapped",
    [
      42847
    ]
  ],
  [
    [
      42847,
      42847
    ],
    "valid"
  ],
  [
    [
      42848,
      42848
    ],
    "mapped",
    [
      42849
    ]
  ],
  [
    [
      42849,
      42849
    ],
    "valid"
  ],
  [
    [
      42850,
      42850
    ],
    "mapped",
    [
      42851
    ]
  ],
  [
    [
      42851,
      42851
    ],
    "valid"
  ],
  [
    [
      42852,
      42852
    ],
    "mapped",
    [
      42853
    ]
  ],
  [
    [
      42853,
      42853
    ],
    "valid"
  ],
  [
    [
      42854,
      42854
    ],
    "mapped",
    [
      42855
    ]
  ],
  [
    [
      42855,
      42855
    ],
    "valid"
  ],
  [
    [
      42856,
      42856
    ],
    "mapped",
    [
      42857
    ]
  ],
  [
    [
      42857,
      42857
    ],
    "valid"
  ],
  [
    [
      42858,
      42858
    ],
    "mapped",
    [
      42859
    ]
  ],
  [
    [
      42859,
      42859
    ],
    "valid"
  ],
  [
    [
      42860,
      42860
    ],
    "mapped",
    [
      42861
    ]
  ],
  [
    [
      42861,
      42861
    ],
    "valid"
  ],
  [
    [
      42862,
      42862
    ],
    "mapped",
    [
      42863
    ]
  ],
  [
    [
      42863,
      42863
    ],
    "valid"
  ],
  [
    [
      42864,
      42864
    ],
    "mapped",
    [
      42863
    ]
  ],
  [
    [
      42865,
      42872
    ],
    "valid"
  ],
  [
    [
      42873,
      42873
    ],
    "mapped",
    [
      42874
    ]
  ],
  [
    [
      42874,
      42874
    ],
    "valid"
  ],
  [
    [
      42875,
      42875
    ],
    "mapped",
    [
      42876
    ]
  ],
  [
    [
      42876,
      42876
    ],
    "valid"
  ],
  [
    [
      42877,
      42877
    ],
    "mapped",
    [
      7545
    ]
  ],
  [
    [
      42878,
      42878
    ],
    "mapped",
    [
      42879
    ]
  ],
  [
    [
      42879,
      42879
    ],
    "valid"
  ],
  [
    [
      42880,
      42880
    ],
    "mapped",
    [
      42881
    ]
  ],
  [
    [
      42881,
      42881
    ],
    "valid"
  ],
  [
    [
      42882,
      42882
    ],
    "mapped",
    [
      42883
    ]
  ],
  [
    [
      42883,
      42883
    ],
    "valid"
  ],
  [
    [
      42884,
      42884
    ],
    "mapped",
    [
      42885
    ]
  ],
  [
    [
      42885,
      42885
    ],
    "valid"
  ],
  [
    [
      42886,
      42886
    ],
    "mapped",
    [
      42887
    ]
  ],
  [
    [
      42887,
      42888
    ],
    "valid"
  ],
  [
    [
      42889,
      42890
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      42891,
      42891
    ],
    "mapped",
    [
      42892
    ]
  ],
  [
    [
      42892,
      42892
    ],
    "valid"
  ],
  [
    [
      42893,
      42893
    ],
    "mapped",
    [
      613
    ]
  ],
  [
    [
      42894,
      42894
    ],
    "valid"
  ],
  [
    [
      42895,
      42895
    ],
    "valid"
  ],
  [
    [
      42896,
      42896
    ],
    "mapped",
    [
      42897
    ]
  ],
  [
    [
      42897,
      42897
    ],
    "valid"
  ],
  [
    [
      42898,
      42898
    ],
    "mapped",
    [
      42899
    ]
  ],
  [
    [
      42899,
      42899
    ],
    "valid"
  ],
  [
    [
      42900,
      42901
    ],
    "valid"
  ],
  [
    [
      42902,
      42902
    ],
    "mapped",
    [
      42903
    ]
  ],
  [
    [
      42903,
      42903
    ],
    "valid"
  ],
  [
    [
      42904,
      42904
    ],
    "mapped",
    [
      42905
    ]
  ],
  [
    [
      42905,
      42905
    ],
    "valid"
  ],
  [
    [
      42906,
      42906
    ],
    "mapped",
    [
      42907
    ]
  ],
  [
    [
      42907,
      42907
    ],
    "valid"
  ],
  [
    [
      42908,
      42908
    ],
    "mapped",
    [
      42909
    ]
  ],
  [
    [
      42909,
      42909
    ],
    "valid"
  ],
  [
    [
      42910,
      42910
    ],
    "mapped",
    [
      42911
    ]
  ],
  [
    [
      42911,
      42911
    ],
    "valid"
  ],
  [
    [
      42912,
      42912
    ],
    "mapped",
    [
      42913
    ]
  ],
  [
    [
      42913,
      42913
    ],
    "valid"
  ],
  [
    [
      42914,
      42914
    ],
    "mapped",
    [
      42915
    ]
  ],
  [
    [
      42915,
      42915
    ],
    "valid"
  ],
  [
    [
      42916,
      42916
    ],
    "mapped",
    [
      42917
    ]
  ],
  [
    [
      42917,
      42917
    ],
    "valid"
  ],
  [
    [
      42918,
      42918
    ],
    "mapped",
    [
      42919
    ]
  ],
  [
    [
      42919,
      42919
    ],
    "valid"
  ],
  [
    [
      42920,
      42920
    ],
    "mapped",
    [
      42921
    ]
  ],
  [
    [
      42921,
      42921
    ],
    "valid"
  ],
  [
    [
      42922,
      42922
    ],
    "mapped",
    [
      614
    ]
  ],
  [
    [
      42923,
      42923
    ],
    "mapped",
    [
      604
    ]
  ],
  [
    [
      42924,
      42924
    ],
    "mapped",
    [
      609
    ]
  ],
  [
    [
      42925,
      42925
    ],
    "mapped",
    [
      620
    ]
  ],
  [
    [
      42926,
      42927
    ],
    "disallowed"
  ],
  [
    [
      42928,
      42928
    ],
    "mapped",
    [
      670
    ]
  ],
  [
    [
      42929,
      42929
    ],
    "mapped",
    [
      647
    ]
  ],
  [
    [
      42930,
      42930
    ],
    "mapped",
    [
      669
    ]
  ],
  [
    [
      42931,
      42931
    ],
    "mapped",
    [
      43859
    ]
  ],
  [
    [
      42932,
      42932
    ],
    "mapped",
    [
      42933
    ]
  ],
  [
    [
      42933,
      42933
    ],
    "valid"
  ],
  [
    [
      42934,
      42934
    ],
    "mapped",
    [
      42935
    ]
  ],
  [
    [
      42935,
      42935
    ],
    "valid"
  ],
  [
    [
      42936,
      42998
    ],
    "disallowed"
  ],
  [
    [
      42999,
      42999
    ],
    "valid"
  ],
  [
    [
      43e3,
      43e3
    ],
    "mapped",
    [
      295
    ]
  ],
  [
    [
      43001,
      43001
    ],
    "mapped",
    [
      339
    ]
  ],
  [
    [
      43002,
      43002
    ],
    "valid"
  ],
  [
    [
      43003,
      43007
    ],
    "valid"
  ],
  [
    [
      43008,
      43047
    ],
    "valid"
  ],
  [
    [
      43048,
      43051
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43052,
      43055
    ],
    "disallowed"
  ],
  [
    [
      43056,
      43065
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43066,
      43071
    ],
    "disallowed"
  ],
  [
    [
      43072,
      43123
    ],
    "valid"
  ],
  [
    [
      43124,
      43127
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43128,
      43135
    ],
    "disallowed"
  ],
  [
    [
      43136,
      43204
    ],
    "valid"
  ],
  [
    [
      43205,
      43213
    ],
    "disallowed"
  ],
  [
    [
      43214,
      43215
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43216,
      43225
    ],
    "valid"
  ],
  [
    [
      43226,
      43231
    ],
    "disallowed"
  ],
  [
    [
      43232,
      43255
    ],
    "valid"
  ],
  [
    [
      43256,
      43258
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43259,
      43259
    ],
    "valid"
  ],
  [
    [
      43260,
      43260
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43261,
      43261
    ],
    "valid"
  ],
  [
    [
      43262,
      43263
    ],
    "disallowed"
  ],
  [
    [
      43264,
      43309
    ],
    "valid"
  ],
  [
    [
      43310,
      43311
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43312,
      43347
    ],
    "valid"
  ],
  [
    [
      43348,
      43358
    ],
    "disallowed"
  ],
  [
    [
      43359,
      43359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43360,
      43388
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43389,
      43391
    ],
    "disallowed"
  ],
  [
    [
      43392,
      43456
    ],
    "valid"
  ],
  [
    [
      43457,
      43469
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43470,
      43470
    ],
    "disallowed"
  ],
  [
    [
      43471,
      43481
    ],
    "valid"
  ],
  [
    [
      43482,
      43485
    ],
    "disallowed"
  ],
  [
    [
      43486,
      43487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43488,
      43518
    ],
    "valid"
  ],
  [
    [
      43519,
      43519
    ],
    "disallowed"
  ],
  [
    [
      43520,
      43574
    ],
    "valid"
  ],
  [
    [
      43575,
      43583
    ],
    "disallowed"
  ],
  [
    [
      43584,
      43597
    ],
    "valid"
  ],
  [
    [
      43598,
      43599
    ],
    "disallowed"
  ],
  [
    [
      43600,
      43609
    ],
    "valid"
  ],
  [
    [
      43610,
      43611
    ],
    "disallowed"
  ],
  [
    [
      43612,
      43615
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43616,
      43638
    ],
    "valid"
  ],
  [
    [
      43639,
      43641
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43642,
      43643
    ],
    "valid"
  ],
  [
    [
      43644,
      43647
    ],
    "valid"
  ],
  [
    [
      43648,
      43714
    ],
    "valid"
  ],
  [
    [
      43715,
      43738
    ],
    "disallowed"
  ],
  [
    [
      43739,
      43741
    ],
    "valid"
  ],
  [
    [
      43742,
      43743
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43744,
      43759
    ],
    "valid"
  ],
  [
    [
      43760,
      43761
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43762,
      43766
    ],
    "valid"
  ],
  [
    [
      43767,
      43776
    ],
    "disallowed"
  ],
  [
    [
      43777,
      43782
    ],
    "valid"
  ],
  [
    [
      43783,
      43784
    ],
    "disallowed"
  ],
  [
    [
      43785,
      43790
    ],
    "valid"
  ],
  [
    [
      43791,
      43792
    ],
    "disallowed"
  ],
  [
    [
      43793,
      43798
    ],
    "valid"
  ],
  [
    [
      43799,
      43807
    ],
    "disallowed"
  ],
  [
    [
      43808,
      43814
    ],
    "valid"
  ],
  [
    [
      43815,
      43815
    ],
    "disallowed"
  ],
  [
    [
      43816,
      43822
    ],
    "valid"
  ],
  [
    [
      43823,
      43823
    ],
    "disallowed"
  ],
  [
    [
      43824,
      43866
    ],
    "valid"
  ],
  [
    [
      43867,
      43867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      43868,
      43868
    ],
    "mapped",
    [
      42791
    ]
  ],
  [
    [
      43869,
      43869
    ],
    "mapped",
    [
      43831
    ]
  ],
  [
    [
      43870,
      43870
    ],
    "mapped",
    [
      619
    ]
  ],
  [
    [
      43871,
      43871
    ],
    "mapped",
    [
      43858
    ]
  ],
  [
    [
      43872,
      43875
    ],
    "valid"
  ],
  [
    [
      43876,
      43877
    ],
    "valid"
  ],
  [
    [
      43878,
      43887
    ],
    "disallowed"
  ],
  [
    [
      43888,
      43888
    ],
    "mapped",
    [
      5024
    ]
  ],
  [
    [
      43889,
      43889
    ],
    "mapped",
    [
      5025
    ]
  ],
  [
    [
      43890,
      43890
    ],
    "mapped",
    [
      5026
    ]
  ],
  [
    [
      43891,
      43891
    ],
    "mapped",
    [
      5027
    ]
  ],
  [
    [
      43892,
      43892
    ],
    "mapped",
    [
      5028
    ]
  ],
  [
    [
      43893,
      43893
    ],
    "mapped",
    [
      5029
    ]
  ],
  [
    [
      43894,
      43894
    ],
    "mapped",
    [
      5030
    ]
  ],
  [
    [
      43895,
      43895
    ],
    "mapped",
    [
      5031
    ]
  ],
  [
    [
      43896,
      43896
    ],
    "mapped",
    [
      5032
    ]
  ],
  [
    [
      43897,
      43897
    ],
    "mapped",
    [
      5033
    ]
  ],
  [
    [
      43898,
      43898
    ],
    "mapped",
    [
      5034
    ]
  ],
  [
    [
      43899,
      43899
    ],
    "mapped",
    [
      5035
    ]
  ],
  [
    [
      43900,
      43900
    ],
    "mapped",
    [
      5036
    ]
  ],
  [
    [
      43901,
      43901
    ],
    "mapped",
    [
      5037
    ]
  ],
  [
    [
      43902,
      43902
    ],
    "mapped",
    [
      5038
    ]
  ],
  [
    [
      43903,
      43903
    ],
    "mapped",
    [
      5039
    ]
  ],
  [
    [
      43904,
      43904
    ],
    "mapped",
    [
      5040
    ]
  ],
  [
    [
      43905,
      43905
    ],
    "mapped",
    [
      5041
    ]
  ],
  [
    [
      43906,
      43906
    ],
    "mapped",
    [
      5042
    ]
  ],
  [
    [
      43907,
      43907
    ],
    "mapped",
    [
      5043
    ]
  ],
  [
    [
      43908,
      43908
    ],
    "mapped",
    [
      5044
    ]
  ],
  [
    [
      43909,
      43909
    ],
    "mapped",
    [
      5045
    ]
  ],
  [
    [
      43910,
      43910
    ],
    "mapped",
    [
      5046
    ]
  ],
  [
    [
      43911,
      43911
    ],
    "mapped",
    [
      5047
    ]
  ],
  [
    [
      43912,
      43912
    ],
    "mapped",
    [
      5048
    ]
  ],
  [
    [
      43913,
      43913
    ],
    "mapped",
    [
      5049
    ]
  ],
  [
    [
      43914,
      43914
    ],
    "mapped",
    [
      5050
    ]
  ],
  [
    [
      43915,
      43915
    ],
    "mapped",
    [
      5051
    ]
  ],
  [
    [
      43916,
      43916
    ],
    "mapped",
    [
      5052
    ]
  ],
  [
    [
      43917,
      43917
    ],
    "mapped",
    [
      5053
    ]
  ],
  [
    [
      43918,
      43918
    ],
    "mapped",
    [
      5054
    ]
  ],
  [
    [
      43919,
      43919
    ],
    "mapped",
    [
      5055
    ]
  ],
  [
    [
      43920,
      43920
    ],
    "mapped",
    [
      5056
    ]
  ],
  [
    [
      43921,
      43921
    ],
    "mapped",
    [
      5057
    ]
  ],
  [
    [
      43922,
      43922
    ],
    "mapped",
    [
      5058
    ]
  ],
  [
    [
      43923,
      43923
    ],
    "mapped",
    [
      5059
    ]
  ],
  [
    [
      43924,
      43924
    ],
    "mapped",
    [
      5060
    ]
  ],
  [
    [
      43925,
      43925
    ],
    "mapped",
    [
      5061
    ]
  ],
  [
    [
      43926,
      43926
    ],
    "mapped",
    [
      5062
    ]
  ],
  [
    [
      43927,
      43927
    ],
    "mapped",
    [
      5063
    ]
  ],
  [
    [
      43928,
      43928
    ],
    "mapped",
    [
      5064
    ]
  ],
  [
    [
      43929,
      43929
    ],
    "mapped",
    [
      5065
    ]
  ],
  [
    [
      43930,
      43930
    ],
    "mapped",
    [
      5066
    ]
  ],
  [
    [
      43931,
      43931
    ],
    "mapped",
    [
      5067
    ]
  ],
  [
    [
      43932,
      43932
    ],
    "mapped",
    [
      5068
    ]
  ],
  [
    [
      43933,
      43933
    ],
    "mapped",
    [
      5069
    ]
  ],
  [
    [
      43934,
      43934
    ],
    "mapped",
    [
      5070
    ]
  ],
  [
    [
      43935,
      43935
    ],
    "mapped",
    [
      5071
    ]
  ],
  [
    [
      43936,
      43936
    ],
    "mapped",
    [
      5072
    ]
  ],
  [
    [
      43937,
      43937
    ],
    "mapped",
    [
      5073
    ]
  ],
  [
    [
      43938,
      43938
    ],
    "mapped",
    [
      5074
    ]
  ],
  [
    [
      43939,
      43939
    ],
    "mapped",
    [
      5075
    ]
  ],
  [
    [
      43940,
      43940
    ],
    "mapped",
    [
      5076
    ]
  ],
  [
    [
      43941,
      43941
    ],
    "mapped",
    [
      5077
    ]
  ],
  [
    [
      43942,
      43942
    ],
    "mapped",
    [
      5078
    ]
  ],
  [
    [
      43943,
      43943
    ],
    "mapped",
    [
      5079
    ]
  ],
  [
    [
      43944,
      43944
    ],
    "mapped",
    [
      5080
    ]
  ],
  [
    [
      43945,
      43945
    ],
    "mapped",
    [
      5081
    ]
  ],
  [
    [
      43946,
      43946
    ],
    "mapped",
    [
      5082
    ]
  ],
  [
    [
      43947,
      43947
    ],
    "mapped",
    [
      5083
    ]
  ],
  [
    [
      43948,
      43948
    ],
    "mapped",
    [
      5084
    ]
  ],
  [
    [
      43949,
      43949
    ],
    "mapped",
    [
      5085
    ]
  ],
  [
    [
      43950,
      43950
    ],
    "mapped",
    [
      5086
    ]
  ],
  [
    [
      43951,
      43951
    ],
    "mapped",
    [
      5087
    ]
  ],
  [
    [
      43952,
      43952
    ],
    "mapped",
    [
      5088
    ]
  ],
  [
    [
      43953,
      43953
    ],
    "mapped",
    [
      5089
    ]
  ],
  [
    [
      43954,
      43954
    ],
    "mapped",
    [
      5090
    ]
  ],
  [
    [
      43955,
      43955
    ],
    "mapped",
    [
      5091
    ]
  ],
  [
    [
      43956,
      43956
    ],
    "mapped",
    [
      5092
    ]
  ],
  [
    [
      43957,
      43957
    ],
    "mapped",
    [
      5093
    ]
  ],
  [
    [
      43958,
      43958
    ],
    "mapped",
    [
      5094
    ]
  ],
  [
    [
      43959,
      43959
    ],
    "mapped",
    [
      5095
    ]
  ],
  [
    [
      43960,
      43960
    ],
    "mapped",
    [
      5096
    ]
  ],
  [
    [
      43961,
      43961
    ],
    "mapped",
    [
      5097
    ]
  ],
  [
    [
      43962,
      43962
    ],
    "mapped",
    [
      5098
    ]
  ],
  [
    [
      43963,
      43963
    ],
    "mapped",
    [
      5099
    ]
  ],
  [
    [
      43964,
      43964
    ],
    "mapped",
    [
      5100
    ]
  ],
  [
    [
      43965,
      43965
    ],
    "mapped",
    [
      5101
    ]
  ],
  [
    [
      43966,
      43966
    ],
    "mapped",
    [
      5102
    ]
  ],
  [
    [
      43967,
      43967
    ],
    "mapped",
    [
      5103
    ]
  ],
  [
    [
      43968,
      44010
    ],
    "valid"
  ],
  [
    [
      44011,
      44011
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      44012,
      44013
    ],
    "valid"
  ],
  [
    [
      44014,
      44015
    ],
    "disallowed"
  ],
  [
    [
      44016,
      44025
    ],
    "valid"
  ],
  [
    [
      44026,
      44031
    ],
    "disallowed"
  ],
  [
    [
      44032,
      55203
    ],
    "valid"
  ],
  [
    [
      55204,
      55215
    ],
    "disallowed"
  ],
  [
    [
      55216,
      55238
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      55239,
      55242
    ],
    "disallowed"
  ],
  [
    [
      55243,
      55291
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      55292,
      55295
    ],
    "disallowed"
  ],
  [
    [
      55296,
      57343
    ],
    "disallowed"
  ],
  [
    [
      57344,
      63743
    ],
    "disallowed"
  ],
  [
    [
      63744,
      63744
    ],
    "mapped",
    [
      35912
    ]
  ],
  [
    [
      63745,
      63745
    ],
    "mapped",
    [
      26356
    ]
  ],
  [
    [
      63746,
      63746
    ],
    "mapped",
    [
      36554
    ]
  ],
  [
    [
      63747,
      63747
    ],
    "mapped",
    [
      36040
    ]
  ],
  [
    [
      63748,
      63748
    ],
    "mapped",
    [
      28369
    ]
  ],
  [
    [
      63749,
      63749
    ],
    "mapped",
    [
      20018
    ]
  ],
  [
    [
      63750,
      63750
    ],
    "mapped",
    [
      21477
    ]
  ],
  [
    [
      63751,
      63752
    ],
    "mapped",
    [
      40860
    ]
  ],
  [
    [
      63753,
      63753
    ],
    "mapped",
    [
      22865
    ]
  ],
  [
    [
      63754,
      63754
    ],
    "mapped",
    [
      37329
    ]
  ],
  [
    [
      63755,
      63755
    ],
    "mapped",
    [
      21895
    ]
  ],
  [
    [
      63756,
      63756
    ],
    "mapped",
    [
      22856
    ]
  ],
  [
    [
      63757,
      63757
    ],
    "mapped",
    [
      25078
    ]
  ],
  [
    [
      63758,
      63758
    ],
    "mapped",
    [
      30313
    ]
  ],
  [
    [
      63759,
      63759
    ],
    "mapped",
    [
      32645
    ]
  ],
  [
    [
      63760,
      63760
    ],
    "mapped",
    [
      34367
    ]
  ],
  [
    [
      63761,
      63761
    ],
    "mapped",
    [
      34746
    ]
  ],
  [
    [
      63762,
      63762
    ],
    "mapped",
    [
      35064
    ]
  ],
  [
    [
      63763,
      63763
    ],
    "mapped",
    [
      37007
    ]
  ],
  [
    [
      63764,
      63764
    ],
    "mapped",
    [
      27138
    ]
  ],
  [
    [
      63765,
      63765
    ],
    "mapped",
    [
      27931
    ]
  ],
  [
    [
      63766,
      63766
    ],
    "mapped",
    [
      28889
    ]
  ],
  [
    [
      63767,
      63767
    ],
    "mapped",
    [
      29662
    ]
  ],
  [
    [
      63768,
      63768
    ],
    "mapped",
    [
      33853
    ]
  ],
  [
    [
      63769,
      63769
    ],
    "mapped",
    [
      37226
    ]
  ],
  [
    [
      63770,
      63770
    ],
    "mapped",
    [
      39409
    ]
  ],
  [
    [
      63771,
      63771
    ],
    "mapped",
    [
      20098
    ]
  ],
  [
    [
      63772,
      63772
    ],
    "mapped",
    [
      21365
    ]
  ],
  [
    [
      63773,
      63773
    ],
    "mapped",
    [
      27396
    ]
  ],
  [
    [
      63774,
      63774
    ],
    "mapped",
    [
      29211
    ]
  ],
  [
    [
      63775,
      63775
    ],
    "mapped",
    [
      34349
    ]
  ],
  [
    [
      63776,
      63776
    ],
    "mapped",
    [
      40478
    ]
  ],
  [
    [
      63777,
      63777
    ],
    "mapped",
    [
      23888
    ]
  ],
  [
    [
      63778,
      63778
    ],
    "mapped",
    [
      28651
    ]
  ],
  [
    [
      63779,
      63779
    ],
    "mapped",
    [
      34253
    ]
  ],
  [
    [
      63780,
      63780
    ],
    "mapped",
    [
      35172
    ]
  ],
  [
    [
      63781,
      63781
    ],
    "mapped",
    [
      25289
    ]
  ],
  [
    [
      63782,
      63782
    ],
    "mapped",
    [
      33240
    ]
  ],
  [
    [
      63783,
      63783
    ],
    "mapped",
    [
      34847
    ]
  ],
  [
    [
      63784,
      63784
    ],
    "mapped",
    [
      24266
    ]
  ],
  [
    [
      63785,
      63785
    ],
    "mapped",
    [
      26391
    ]
  ],
  [
    [
      63786,
      63786
    ],
    "mapped",
    [
      28010
    ]
  ],
  [
    [
      63787,
      63787
    ],
    "mapped",
    [
      29436
    ]
  ],
  [
    [
      63788,
      63788
    ],
    "mapped",
    [
      37070
    ]
  ],
  [
    [
      63789,
      63789
    ],
    "mapped",
    [
      20358
    ]
  ],
  [
    [
      63790,
      63790
    ],
    "mapped",
    [
      20919
    ]
  ],
  [
    [
      63791,
      63791
    ],
    "mapped",
    [
      21214
    ]
  ],
  [
    [
      63792,
      63792
    ],
    "mapped",
    [
      25796
    ]
  ],
  [
    [
      63793,
      63793
    ],
    "mapped",
    [
      27347
    ]
  ],
  [
    [
      63794,
      63794
    ],
    "mapped",
    [
      29200
    ]
  ],
  [
    [
      63795,
      63795
    ],
    "mapped",
    [
      30439
    ]
  ],
  [
    [
      63796,
      63796
    ],
    "mapped",
    [
      32769
    ]
  ],
  [
    [
      63797,
      63797
    ],
    "mapped",
    [
      34310
    ]
  ],
  [
    [
      63798,
      63798
    ],
    "mapped",
    [
      34396
    ]
  ],
  [
    [
      63799,
      63799
    ],
    "mapped",
    [
      36335
    ]
  ],
  [
    [
      63800,
      63800
    ],
    "mapped",
    [
      38706
    ]
  ],
  [
    [
      63801,
      63801
    ],
    "mapped",
    [
      39791
    ]
  ],
  [
    [
      63802,
      63802
    ],
    "mapped",
    [
      40442
    ]
  ],
  [
    [
      63803,
      63803
    ],
    "mapped",
    [
      30860
    ]
  ],
  [
    [
      63804,
      63804
    ],
    "mapped",
    [
      31103
    ]
  ],
  [
    [
      63805,
      63805
    ],
    "mapped",
    [
      32160
    ]
  ],
  [
    [
      63806,
      63806
    ],
    "mapped",
    [
      33737
    ]
  ],
  [
    [
      63807,
      63807
    ],
    "mapped",
    [
      37636
    ]
  ],
  [
    [
      63808,
      63808
    ],
    "mapped",
    [
      40575
    ]
  ],
  [
    [
      63809,
      63809
    ],
    "mapped",
    [
      35542
    ]
  ],
  [
    [
      63810,
      63810
    ],
    "mapped",
    [
      22751
    ]
  ],
  [
    [
      63811,
      63811
    ],
    "mapped",
    [
      24324
    ]
  ],
  [
    [
      63812,
      63812
    ],
    "mapped",
    [
      31840
    ]
  ],
  [
    [
      63813,
      63813
    ],
    "mapped",
    [
      32894
    ]
  ],
  [
    [
      63814,
      63814
    ],
    "mapped",
    [
      29282
    ]
  ],
  [
    [
      63815,
      63815
    ],
    "mapped",
    [
      30922
    ]
  ],
  [
    [
      63816,
      63816
    ],
    "mapped",
    [
      36034
    ]
  ],
  [
    [
      63817,
      63817
    ],
    "mapped",
    [
      38647
    ]
  ],
  [
    [
      63818,
      63818
    ],
    "mapped",
    [
      22744
    ]
  ],
  [
    [
      63819,
      63819
    ],
    "mapped",
    [
      23650
    ]
  ],
  [
    [
      63820,
      63820
    ],
    "mapped",
    [
      27155
    ]
  ],
  [
    [
      63821,
      63821
    ],
    "mapped",
    [
      28122
    ]
  ],
  [
    [
      63822,
      63822
    ],
    "mapped",
    [
      28431
    ]
  ],
  [
    [
      63823,
      63823
    ],
    "mapped",
    [
      32047
    ]
  ],
  [
    [
      63824,
      63824
    ],
    "mapped",
    [
      32311
    ]
  ],
  [
    [
      63825,
      63825
    ],
    "mapped",
    [
      38475
    ]
  ],
  [
    [
      63826,
      63826
    ],
    "mapped",
    [
      21202
    ]
  ],
  [
    [
      63827,
      63827
    ],
    "mapped",
    [
      32907
    ]
  ],
  [
    [
      63828,
      63828
    ],
    "mapped",
    [
      20956
    ]
  ],
  [
    [
      63829,
      63829
    ],
    "mapped",
    [
      20940
    ]
  ],
  [
    [
      63830,
      63830
    ],
    "mapped",
    [
      31260
    ]
  ],
  [
    [
      63831,
      63831
    ],
    "mapped",
    [
      32190
    ]
  ],
  [
    [
      63832,
      63832
    ],
    "mapped",
    [
      33777
    ]
  ],
  [
    [
      63833,
      63833
    ],
    "mapped",
    [
      38517
    ]
  ],
  [
    [
      63834,
      63834
    ],
    "mapped",
    [
      35712
    ]
  ],
  [
    [
      63835,
      63835
    ],
    "mapped",
    [
      25295
    ]
  ],
  [
    [
      63836,
      63836
    ],
    "mapped",
    [
      27138
    ]
  ],
  [
    [
      63837,
      63837
    ],
    "mapped",
    [
      35582
    ]
  ],
  [
    [
      63838,
      63838
    ],
    "mapped",
    [
      20025
    ]
  ],
  [
    [
      63839,
      63839
    ],
    "mapped",
    [
      23527
    ]
  ],
  [
    [
      63840,
      63840
    ],
    "mapped",
    [
      24594
    ]
  ],
  [
    [
      63841,
      63841
    ],
    "mapped",
    [
      29575
    ]
  ],
  [
    [
      63842,
      63842
    ],
    "mapped",
    [
      30064
    ]
  ],
  [
    [
      63843,
      63843
    ],
    "mapped",
    [
      21271
    ]
  ],
  [
    [
      63844,
      63844
    ],
    "mapped",
    [
      30971
    ]
  ],
  [
    [
      63845,
      63845
    ],
    "mapped",
    [
      20415
    ]
  ],
  [
    [
      63846,
      63846
    ],
    "mapped",
    [
      24489
    ]
  ],
  [
    [
      63847,
      63847
    ],
    "mapped",
    [
      19981
    ]
  ],
  [
    [
      63848,
      63848
    ],
    "mapped",
    [
      27852
    ]
  ],
  [
    [
      63849,
      63849
    ],
    "mapped",
    [
      25976
    ]
  ],
  [
    [
      63850,
      63850
    ],
    "mapped",
    [
      32034
    ]
  ],
  [
    [
      63851,
      63851
    ],
    "mapped",
    [
      21443
    ]
  ],
  [
    [
      63852,
      63852
    ],
    "mapped",
    [
      22622
    ]
  ],
  [
    [
      63853,
      63853
    ],
    "mapped",
    [
      30465
    ]
  ],
  [
    [
      63854,
      63854
    ],
    "mapped",
    [
      33865
    ]
  ],
  [
    [
      63855,
      63855
    ],
    "mapped",
    [
      35498
    ]
  ],
  [
    [
      63856,
      63856
    ],
    "mapped",
    [
      27578
    ]
  ],
  [
    [
      63857,
      63857
    ],
    "mapped",
    [
      36784
    ]
  ],
  [
    [
      63858,
      63858
    ],
    "mapped",
    [
      27784
    ]
  ],
  [
    [
      63859,
      63859
    ],
    "mapped",
    [
      25342
    ]
  ],
  [
    [
      63860,
      63860
    ],
    "mapped",
    [
      33509
    ]
  ],
  [
    [
      63861,
      63861
    ],
    "mapped",
    [
      25504
    ]
  ],
  [
    [
      63862,
      63862
    ],
    "mapped",
    [
      30053
    ]
  ],
  [
    [
      63863,
      63863
    ],
    "mapped",
    [
      20142
    ]
  ],
  [
    [
      63864,
      63864
    ],
    "mapped",
    [
      20841
    ]
  ],
  [
    [
      63865,
      63865
    ],
    "mapped",
    [
      20937
    ]
  ],
  [
    [
      63866,
      63866
    ],
    "mapped",
    [
      26753
    ]
  ],
  [
    [
      63867,
      63867
    ],
    "mapped",
    [
      31975
    ]
  ],
  [
    [
      63868,
      63868
    ],
    "mapped",
    [
      33391
    ]
  ],
  [
    [
      63869,
      63869
    ],
    "mapped",
    [
      35538
    ]
  ],
  [
    [
      63870,
      63870
    ],
    "mapped",
    [
      37327
    ]
  ],
  [
    [
      63871,
      63871
    ],
    "mapped",
    [
      21237
    ]
  ],
  [
    [
      63872,
      63872
    ],
    "mapped",
    [
      21570
    ]
  ],
  [
    [
      63873,
      63873
    ],
    "mapped",
    [
      22899
    ]
  ],
  [
    [
      63874,
      63874
    ],
    "mapped",
    [
      24300
    ]
  ],
  [
    [
      63875,
      63875
    ],
    "mapped",
    [
      26053
    ]
  ],
  [
    [
      63876,
      63876
    ],
    "mapped",
    [
      28670
    ]
  ],
  [
    [
      63877,
      63877
    ],
    "mapped",
    [
      31018
    ]
  ],
  [
    [
      63878,
      63878
    ],
    "mapped",
    [
      38317
    ]
  ],
  [
    [
      63879,
      63879
    ],
    "mapped",
    [
      39530
    ]
  ],
  [
    [
      63880,
      63880
    ],
    "mapped",
    [
      40599
    ]
  ],
  [
    [
      63881,
      63881
    ],
    "mapped",
    [
      40654
    ]
  ],
  [
    [
      63882,
      63882
    ],
    "mapped",
    [
      21147
    ]
  ],
  [
    [
      63883,
      63883
    ],
    "mapped",
    [
      26310
    ]
  ],
  [
    [
      63884,
      63884
    ],
    "mapped",
    [
      27511
    ]
  ],
  [
    [
      63885,
      63885
    ],
    "mapped",
    [
      36706
    ]
  ],
  [
    [
      63886,
      63886
    ],
    "mapped",
    [
      24180
    ]
  ],
  [
    [
      63887,
      63887
    ],
    "mapped",
    [
      24976
    ]
  ],
  [
    [
      63888,
      63888
    ],
    "mapped",
    [
      25088
    ]
  ],
  [
    [
      63889,
      63889
    ],
    "mapped",
    [
      25754
    ]
  ],
  [
    [
      63890,
      63890
    ],
    "mapped",
    [
      28451
    ]
  ],
  [
    [
      63891,
      63891
    ],
    "mapped",
    [
      29001
    ]
  ],
  [
    [
      63892,
      63892
    ],
    "mapped",
    [
      29833
    ]
  ],
  [
    [
      63893,
      63893
    ],
    "mapped",
    [
      31178
    ]
  ],
  [
    [
      63894,
      63894
    ],
    "mapped",
    [
      32244
    ]
  ],
  [
    [
      63895,
      63895
    ],
    "mapped",
    [
      32879
    ]
  ],
  [
    [
      63896,
      63896
    ],
    "mapped",
    [
      36646
    ]
  ],
  [
    [
      63897,
      63897
    ],
    "mapped",
    [
      34030
    ]
  ],
  [
    [
      63898,
      63898
    ],
    "mapped",
    [
      36899
    ]
  ],
  [
    [
      63899,
      63899
    ],
    "mapped",
    [
      37706
    ]
  ],
  [
    [
      63900,
      63900
    ],
    "mapped",
    [
      21015
    ]
  ],
  [
    [
      63901,
      63901
    ],
    "mapped",
    [
      21155
    ]
  ],
  [
    [
      63902,
      63902
    ],
    "mapped",
    [
      21693
    ]
  ],
  [
    [
      63903,
      63903
    ],
    "mapped",
    [
      28872
    ]
  ],
  [
    [
      63904,
      63904
    ],
    "mapped",
    [
      35010
    ]
  ],
  [
    [
      63905,
      63905
    ],
    "mapped",
    [
      35498
    ]
  ],
  [
    [
      63906,
      63906
    ],
    "mapped",
    [
      24265
    ]
  ],
  [
    [
      63907,
      63907
    ],
    "mapped",
    [
      24565
    ]
  ],
  [
    [
      63908,
      63908
    ],
    "mapped",
    [
      25467
    ]
  ],
  [
    [
      63909,
      63909
    ],
    "mapped",
    [
      27566
    ]
  ],
  [
    [
      63910,
      63910
    ],
    "mapped",
    [
      31806
    ]
  ],
  [
    [
      63911,
      63911
    ],
    "mapped",
    [
      29557
    ]
  ],
  [
    [
      63912,
      63912
    ],
    "mapped",
    [
      20196
    ]
  ],
  [
    [
      63913,
      63913
    ],
    "mapped",
    [
      22265
    ]
  ],
  [
    [
      63914,
      63914
    ],
    "mapped",
    [
      23527
    ]
  ],
  [
    [
      63915,
      63915
    ],
    "mapped",
    [
      23994
    ]
  ],
  [
    [
      63916,
      63916
    ],
    "mapped",
    [
      24604
    ]
  ],
  [
    [
      63917,
      63917
    ],
    "mapped",
    [
      29618
    ]
  ],
  [
    [
      63918,
      63918
    ],
    "mapped",
    [
      29801
    ]
  ],
  [
    [
      63919,
      63919
    ],
    "mapped",
    [
      32666
    ]
  ],
  [
    [
      63920,
      63920
    ],
    "mapped",
    [
      32838
    ]
  ],
  [
    [
      63921,
      63921
    ],
    "mapped",
    [
      37428
    ]
  ],
  [
    [
      63922,
      63922
    ],
    "mapped",
    [
      38646
    ]
  ],
  [
    [
      63923,
      63923
    ],
    "mapped",
    [
      38728
    ]
  ],
  [
    [
      63924,
      63924
    ],
    "mapped",
    [
      38936
    ]
  ],
  [
    [
      63925,
      63925
    ],
    "mapped",
    [
      20363
    ]
  ],
  [
    [
      63926,
      63926
    ],
    "mapped",
    [
      31150
    ]
  ],
  [
    [
      63927,
      63927
    ],
    "mapped",
    [
      37300
    ]
  ],
  [
    [
      63928,
      63928
    ],
    "mapped",
    [
      38584
    ]
  ],
  [
    [
      63929,
      63929
    ],
    "mapped",
    [
      24801
    ]
  ],
  [
    [
      63930,
      63930
    ],
    "mapped",
    [
      20102
    ]
  ],
  [
    [
      63931,
      63931
    ],
    "mapped",
    [
      20698
    ]
  ],
  [
    [
      63932,
      63932
    ],
    "mapped",
    [
      23534
    ]
  ],
  [
    [
      63933,
      63933
    ],
    "mapped",
    [
      23615
    ]
  ],
  [
    [
      63934,
      63934
    ],
    "mapped",
    [
      26009
    ]
  ],
  [
    [
      63935,
      63935
    ],
    "mapped",
    [
      27138
    ]
  ],
  [
    [
      63936,
      63936
    ],
    "mapped",
    [
      29134
    ]
  ],
  [
    [
      63937,
      63937
    ],
    "mapped",
    [
      30274
    ]
  ],
  [
    [
      63938,
      63938
    ],
    "mapped",
    [
      34044
    ]
  ],
  [
    [
      63939,
      63939
    ],
    "mapped",
    [
      36988
    ]
  ],
  [
    [
      63940,
      63940
    ],
    "mapped",
    [
      40845
    ]
  ],
  [
    [
      63941,
      63941
    ],
    "mapped",
    [
      26248
    ]
  ],
  [
    [
      63942,
      63942
    ],
    "mapped",
    [
      38446
    ]
  ],
  [
    [
      63943,
      63943
    ],
    "mapped",
    [
      21129
    ]
  ],
  [
    [
      63944,
      63944
    ],
    "mapped",
    [
      26491
    ]
  ],
  [
    [
      63945,
      63945
    ],
    "mapped",
    [
      26611
    ]
  ],
  [
    [
      63946,
      63946
    ],
    "mapped",
    [
      27969
    ]
  ],
  [
    [
      63947,
      63947
    ],
    "mapped",
    [
      28316
    ]
  ],
  [
    [
      63948,
      63948
    ],
    "mapped",
    [
      29705
    ]
  ],
  [
    [
      63949,
      63949
    ],
    "mapped",
    [
      30041
    ]
  ],
  [
    [
      63950,
      63950
    ],
    "mapped",
    [
      30827
    ]
  ],
  [
    [
      63951,
      63951
    ],
    "mapped",
    [
      32016
    ]
  ],
  [
    [
      63952,
      63952
    ],
    "mapped",
    [
      39006
    ]
  ],
  [
    [
      63953,
      63953
    ],
    "mapped",
    [
      20845
    ]
  ],
  [
    [
      63954,
      63954
    ],
    "mapped",
    [
      25134
    ]
  ],
  [
    [
      63955,
      63955
    ],
    "mapped",
    [
      38520
    ]
  ],
  [
    [
      63956,
      63956
    ],
    "mapped",
    [
      20523
    ]
  ],
  [
    [
      63957,
      63957
    ],
    "mapped",
    [
      23833
    ]
  ],
  [
    [
      63958,
      63958
    ],
    "mapped",
    [
      28138
    ]
  ],
  [
    [
      63959,
      63959
    ],
    "mapped",
    [
      36650
    ]
  ],
  [
    [
      63960,
      63960
    ],
    "mapped",
    [
      24459
    ]
  ],
  [
    [
      63961,
      63961
    ],
    "mapped",
    [
      24900
    ]
  ],
  [
    [
      63962,
      63962
    ],
    "mapped",
    [
      26647
    ]
  ],
  [
    [
      63963,
      63963
    ],
    "mapped",
    [
      29575
    ]
  ],
  [
    [
      63964,
      63964
    ],
    "mapped",
    [
      38534
    ]
  ],
  [
    [
      63965,
      63965
    ],
    "mapped",
    [
      21033
    ]
  ],
  [
    [
      63966,
      63966
    ],
    "mapped",
    [
      21519
    ]
  ],
  [
    [
      63967,
      63967
    ],
    "mapped",
    [
      23653
    ]
  ],
  [
    [
      63968,
      63968
    ],
    "mapped",
    [
      26131
    ]
  ],
  [
    [
      63969,
      63969
    ],
    "mapped",
    [
      26446
    ]
  ],
  [
    [
      63970,
      63970
    ],
    "mapped",
    [
      26792
    ]
  ],
  [
    [
      63971,
      63971
    ],
    "mapped",
    [
      27877
    ]
  ],
  [
    [
      63972,
      63972
    ],
    "mapped",
    [
      29702
    ]
  ],
  [
    [
      63973,
      63973
    ],
    "mapped",
    [
      30178
    ]
  ],
  [
    [
      63974,
      63974
    ],
    "mapped",
    [
      32633
    ]
  ],
  [
    [
      63975,
      63975
    ],
    "mapped",
    [
      35023
    ]
  ],
  [
    [
      63976,
      63976
    ],
    "mapped",
    [
      35041
    ]
  ],
  [
    [
      63977,
      63977
    ],
    "mapped",
    [
      37324
    ]
  ],
  [
    [
      63978,
      63978
    ],
    "mapped",
    [
      38626
    ]
  ],
  [
    [
      63979,
      63979
    ],
    "mapped",
    [
      21311
    ]
  ],
  [
    [
      63980,
      63980
    ],
    "mapped",
    [
      28346
    ]
  ],
  [
    [
      63981,
      63981
    ],
    "mapped",
    [
      21533
    ]
  ],
  [
    [
      63982,
      63982
    ],
    "mapped",
    [
      29136
    ]
  ],
  [
    [
      63983,
      63983
    ],
    "mapped",
    [
      29848
    ]
  ],
  [
    [
      63984,
      63984
    ],
    "mapped",
    [
      34298
    ]
  ],
  [
    [
      63985,
      63985
    ],
    "mapped",
    [
      38563
    ]
  ],
  [
    [
      63986,
      63986
    ],
    "mapped",
    [
      40023
    ]
  ],
  [
    [
      63987,
      63987
    ],
    "mapped",
    [
      40607
    ]
  ],
  [
    [
      63988,
      63988
    ],
    "mapped",
    [
      26519
    ]
  ],
  [
    [
      63989,
      63989
    ],
    "mapped",
    [
      28107
    ]
  ],
  [
    [
      63990,
      63990
    ],
    "mapped",
    [
      33256
    ]
  ],
  [
    [
      63991,
      63991
    ],
    "mapped",
    [
      31435
    ]
  ],
  [
    [
      63992,
      63992
    ],
    "mapped",
    [
      31520
    ]
  ],
  [
    [
      63993,
      63993
    ],
    "mapped",
    [
      31890
    ]
  ],
  [
    [
      63994,
      63994
    ],
    "mapped",
    [
      29376
    ]
  ],
  [
    [
      63995,
      63995
    ],
    "mapped",
    [
      28825
    ]
  ],
  [
    [
      63996,
      63996
    ],
    "mapped",
    [
      35672
    ]
  ],
  [
    [
      63997,
      63997
    ],
    "mapped",
    [
      20160
    ]
  ],
  [
    [
      63998,
      63998
    ],
    "mapped",
    [
      33590
    ]
  ],
  [
    [
      63999,
      63999
    ],
    "mapped",
    [
      21050
    ]
  ],
  [
    [
      64e3,
      64e3
    ],
    "mapped",
    [
      20999
    ]
  ],
  [
    [
      64001,
      64001
    ],
    "mapped",
    [
      24230
    ]
  ],
  [
    [
      64002,
      64002
    ],
    "mapped",
    [
      25299
    ]
  ],
  [
    [
      64003,
      64003
    ],
    "mapped",
    [
      31958
    ]
  ],
  [
    [
      64004,
      64004
    ],
    "mapped",
    [
      23429
    ]
  ],
  [
    [
      64005,
      64005
    ],
    "mapped",
    [
      27934
    ]
  ],
  [
    [
      64006,
      64006
    ],
    "mapped",
    [
      26292
    ]
  ],
  [
    [
      64007,
      64007
    ],
    "mapped",
    [
      36667
    ]
  ],
  [
    [
      64008,
      64008
    ],
    "mapped",
    [
      34892
    ]
  ],
  [
    [
      64009,
      64009
    ],
    "mapped",
    [
      38477
    ]
  ],
  [
    [
      64010,
      64010
    ],
    "mapped",
    [
      35211
    ]
  ],
  [
    [
      64011,
      64011
    ],
    "mapped",
    [
      24275
    ]
  ],
  [
    [
      64012,
      64012
    ],
    "mapped",
    [
      20800
    ]
  ],
  [
    [
      64013,
      64013
    ],
    "mapped",
    [
      21952
    ]
  ],
  [
    [
      64014,
      64015
    ],
    "valid"
  ],
  [
    [
      64016,
      64016
    ],
    "mapped",
    [
      22618
    ]
  ],
  [
    [
      64017,
      64017
    ],
    "valid"
  ],
  [
    [
      64018,
      64018
    ],
    "mapped",
    [
      26228
    ]
  ],
  [
    [
      64019,
      64020
    ],
    "valid"
  ],
  [
    [
      64021,
      64021
    ],
    "mapped",
    [
      20958
    ]
  ],
  [
    [
      64022,
      64022
    ],
    "mapped",
    [
      29482
    ]
  ],
  [
    [
      64023,
      64023
    ],
    "mapped",
    [
      30410
    ]
  ],
  [
    [
      64024,
      64024
    ],
    "mapped",
    [
      31036
    ]
  ],
  [
    [
      64025,
      64025
    ],
    "mapped",
    [
      31070
    ]
  ],
  [
    [
      64026,
      64026
    ],
    "mapped",
    [
      31077
    ]
  ],
  [
    [
      64027,
      64027
    ],
    "mapped",
    [
      31119
    ]
  ],
  [
    [
      64028,
      64028
    ],
    "mapped",
    [
      38742
    ]
  ],
  [
    [
      64029,
      64029
    ],
    "mapped",
    [
      31934
    ]
  ],
  [
    [
      64030,
      64030
    ],
    "mapped",
    [
      32701
    ]
  ],
  [
    [
      64031,
      64031
    ],
    "valid"
  ],
  [
    [
      64032,
      64032
    ],
    "mapped",
    [
      34322
    ]
  ],
  [
    [
      64033,
      64033
    ],
    "valid"
  ],
  [
    [
      64034,
      64034
    ],
    "mapped",
    [
      35576
    ]
  ],
  [
    [
      64035,
      64036
    ],
    "valid"
  ],
  [
    [
      64037,
      64037
    ],
    "mapped",
    [
      36920
    ]
  ],
  [
    [
      64038,
      64038
    ],
    "mapped",
    [
      37117
    ]
  ],
  [
    [
      64039,
      64041
    ],
    "valid"
  ],
  [
    [
      64042,
      64042
    ],
    "mapped",
    [
      39151
    ]
  ],
  [
    [
      64043,
      64043
    ],
    "mapped",
    [
      39164
    ]
  ],
  [
    [
      64044,
      64044
    ],
    "mapped",
    [
      39208
    ]
  ],
  [
    [
      64045,
      64045
    ],
    "mapped",
    [
      40372
    ]
  ],
  [
    [
      64046,
      64046
    ],
    "mapped",
    [
      37086
    ]
  ],
  [
    [
      64047,
      64047
    ],
    "mapped",
    [
      38583
    ]
  ],
  [
    [
      64048,
      64048
    ],
    "mapped",
    [
      20398
    ]
  ],
  [
    [
      64049,
      64049
    ],
    "mapped",
    [
      20711
    ]
  ],
  [
    [
      64050,
      64050
    ],
    "mapped",
    [
      20813
    ]
  ],
  [
    [
      64051,
      64051
    ],
    "mapped",
    [
      21193
    ]
  ],
  [
    [
      64052,
      64052
    ],
    "mapped",
    [
      21220
    ]
  ],
  [
    [
      64053,
      64053
    ],
    "mapped",
    [
      21329
    ]
  ],
  [
    [
      64054,
      64054
    ],
    "mapped",
    [
      21917
    ]
  ],
  [
    [
      64055,
      64055
    ],
    "mapped",
    [
      22022
    ]
  ],
  [
    [
      64056,
      64056
    ],
    "mapped",
    [
      22120
    ]
  ],
  [
    [
      64057,
      64057
    ],
    "mapped",
    [
      22592
    ]
  ],
  [
    [
      64058,
      64058
    ],
    "mapped",
    [
      22696
    ]
  ],
  [
    [
      64059,
      64059
    ],
    "mapped",
    [
      23652
    ]
  ],
  [
    [
      64060,
      64060
    ],
    "mapped",
    [
      23662
    ]
  ],
  [
    [
      64061,
      64061
    ],
    "mapped",
    [
      24724
    ]
  ],
  [
    [
      64062,
      64062
    ],
    "mapped",
    [
      24936
    ]
  ],
  [
    [
      64063,
      64063
    ],
    "mapped",
    [
      24974
    ]
  ],
  [
    [
      64064,
      64064
    ],
    "mapped",
    [
      25074
    ]
  ],
  [
    [
      64065,
      64065
    ],
    "mapped",
    [
      25935
    ]
  ],
  [
    [
      64066,
      64066
    ],
    "mapped",
    [
      26082
    ]
  ],
  [
    [
      64067,
      64067
    ],
    "mapped",
    [
      26257
    ]
  ],
  [
    [
      64068,
      64068
    ],
    "mapped",
    [
      26757
    ]
  ],
  [
    [
      64069,
      64069
    ],
    "mapped",
    [
      28023
    ]
  ],
  [
    [
      64070,
      64070
    ],
    "mapped",
    [
      28186
    ]
  ],
  [
    [
      64071,
      64071
    ],
    "mapped",
    [
      28450
    ]
  ],
  [
    [
      64072,
      64072
    ],
    "mapped",
    [
      29038
    ]
  ],
  [
    [
      64073,
      64073
    ],
    "mapped",
    [
      29227
    ]
  ],
  [
    [
      64074,
      64074
    ],
    "mapped",
    [
      29730
    ]
  ],
  [
    [
      64075,
      64075
    ],
    "mapped",
    [
      30865
    ]
  ],
  [
    [
      64076,
      64076
    ],
    "mapped",
    [
      31038
    ]
  ],
  [
    [
      64077,
      64077
    ],
    "mapped",
    [
      31049
    ]
  ],
  [
    [
      64078,
      64078
    ],
    "mapped",
    [
      31048
    ]
  ],
  [
    [
      64079,
      64079
    ],
    "mapped",
    [
      31056
    ]
  ],
  [
    [
      64080,
      64080
    ],
    "mapped",
    [
      31062
    ]
  ],
  [
    [
      64081,
      64081
    ],
    "mapped",
    [
      31069
    ]
  ],
  [
    [
      64082,
      64082
    ],
    "mapped",
    [
      31117
    ]
  ],
  [
    [
      64083,
      64083
    ],
    "mapped",
    [
      31118
    ]
  ],
  [
    [
      64084,
      64084
    ],
    "mapped",
    [
      31296
    ]
  ],
  [
    [
      64085,
      64085
    ],
    "mapped",
    [
      31361
    ]
  ],
  [
    [
      64086,
      64086
    ],
    "mapped",
    [
      31680
    ]
  ],
  [
    [
      64087,
      64087
    ],
    "mapped",
    [
      32244
    ]
  ],
  [
    [
      64088,
      64088
    ],
    "mapped",
    [
      32265
    ]
  ],
  [
    [
      64089,
      64089
    ],
    "mapped",
    [
      32321
    ]
  ],
  [
    [
      64090,
      64090
    ],
    "mapped",
    [
      32626
    ]
  ],
  [
    [
      64091,
      64091
    ],
    "mapped",
    [
      32773
    ]
  ],
  [
    [
      64092,
      64092
    ],
    "mapped",
    [
      33261
    ]
  ],
  [
    [
      64093,
      64094
    ],
    "mapped",
    [
      33401
    ]
  ],
  [
    [
      64095,
      64095
    ],
    "mapped",
    [
      33879
    ]
  ],
  [
    [
      64096,
      64096
    ],
    "mapped",
    [
      35088
    ]
  ],
  [
    [
      64097,
      64097
    ],
    "mapped",
    [
      35222
    ]
  ],
  [
    [
      64098,
      64098
    ],
    "mapped",
    [
      35585
    ]
  ],
  [
    [
      64099,
      64099
    ],
    "mapped",
    [
      35641
    ]
  ],
  [
    [
      64100,
      64100
    ],
    "mapped",
    [
      36051
    ]
  ],
  [
    [
      64101,
      64101
    ],
    "mapped",
    [
      36104
    ]
  ],
  [
    [
      64102,
      64102
    ],
    "mapped",
    [
      36790
    ]
  ],
  [
    [
      64103,
      64103
    ],
    "mapped",
    [
      36920
    ]
  ],
  [
    [
      64104,
      64104
    ],
    "mapped",
    [
      38627
    ]
  ],
  [
    [
      64105,
      64105
    ],
    "mapped",
    [
      38911
    ]
  ],
  [
    [
      64106,
      64106
    ],
    "mapped",
    [
      38971
    ]
  ],
  [
    [
      64107,
      64107
    ],
    "mapped",
    [
      24693
    ]
  ],
  [
    [
      64108,
      64108
    ],
    "mapped",
    [
      148206
    ]
  ],
  [
    [
      64109,
      64109
    ],
    "mapped",
    [
      33304
    ]
  ],
  [
    [
      64110,
      64111
    ],
    "disallowed"
  ],
  [
    [
      64112,
      64112
    ],
    "mapped",
    [
      20006
    ]
  ],
  [
    [
      64113,
      64113
    ],
    "mapped",
    [
      20917
    ]
  ],
  [
    [
      64114,
      64114
    ],
    "mapped",
    [
      20840
    ]
  ],
  [
    [
      64115,
      64115
    ],
    "mapped",
    [
      20352
    ]
  ],
  [
    [
      64116,
      64116
    ],
    "mapped",
    [
      20805
    ]
  ],
  [
    [
      64117,
      64117
    ],
    "mapped",
    [
      20864
    ]
  ],
  [
    [
      64118,
      64118
    ],
    "mapped",
    [
      21191
    ]
  ],
  [
    [
      64119,
      64119
    ],
    "mapped",
    [
      21242
    ]
  ],
  [
    [
      64120,
      64120
    ],
    "mapped",
    [
      21917
    ]
  ],
  [
    [
      64121,
      64121
    ],
    "mapped",
    [
      21845
    ]
  ],
  [
    [
      64122,
      64122
    ],
    "mapped",
    [
      21913
    ]
  ],
  [
    [
      64123,
      64123
    ],
    "mapped",
    [
      21986
    ]
  ],
  [
    [
      64124,
      64124
    ],
    "mapped",
    [
      22618
    ]
  ],
  [
    [
      64125,
      64125
    ],
    "mapped",
    [
      22707
    ]
  ],
  [
    [
      64126,
      64126
    ],
    "mapped",
    [
      22852
    ]
  ],
  [
    [
      64127,
      64127
    ],
    "mapped",
    [
      22868
    ]
  ],
  [
    [
      64128,
      64128
    ],
    "mapped",
    [
      23138
    ]
  ],
  [
    [
      64129,
      64129
    ],
    "mapped",
    [
      23336
    ]
  ],
  [
    [
      64130,
      64130
    ],
    "mapped",
    [
      24274
    ]
  ],
  [
    [
      64131,
      64131
    ],
    "mapped",
    [
      24281
    ]
  ],
  [
    [
      64132,
      64132
    ],
    "mapped",
    [
      24425
    ]
  ],
  [
    [
      64133,
      64133
    ],
    "mapped",
    [
      24493
    ]
  ],
  [
    [
      64134,
      64134
    ],
    "mapped",
    [
      24792
    ]
  ],
  [
    [
      64135,
      64135
    ],
    "mapped",
    [
      24910
    ]
  ],
  [
    [
      64136,
      64136
    ],
    "mapped",
    [
      24840
    ]
  ],
  [
    [
      64137,
      64137
    ],
    "mapped",
    [
      24974
    ]
  ],
  [
    [
      64138,
      64138
    ],
    "mapped",
    [
      24928
    ]
  ],
  [
    [
      64139,
      64139
    ],
    "mapped",
    [
      25074
    ]
  ],
  [
    [
      64140,
      64140
    ],
    "mapped",
    [
      25140
    ]
  ],
  [
    [
      64141,
      64141
    ],
    "mapped",
    [
      25540
    ]
  ],
  [
    [
      64142,
      64142
    ],
    "mapped",
    [
      25628
    ]
  ],
  [
    [
      64143,
      64143
    ],
    "mapped",
    [
      25682
    ]
  ],
  [
    [
      64144,
      64144
    ],
    "mapped",
    [
      25942
    ]
  ],
  [
    [
      64145,
      64145
    ],
    "mapped",
    [
      26228
    ]
  ],
  [
    [
      64146,
      64146
    ],
    "mapped",
    [
      26391
    ]
  ],
  [
    [
      64147,
      64147
    ],
    "mapped",
    [
      26395
    ]
  ],
  [
    [
      64148,
      64148
    ],
    "mapped",
    [
      26454
    ]
  ],
  [
    [
      64149,
      64149
    ],
    "mapped",
    [
      27513
    ]
  ],
  [
    [
      64150,
      64150
    ],
    "mapped",
    [
      27578
    ]
  ],
  [
    [
      64151,
      64151
    ],
    "mapped",
    [
      27969
    ]
  ],
  [
    [
      64152,
      64152
    ],
    "mapped",
    [
      28379
    ]
  ],
  [
    [
      64153,
      64153
    ],
    "mapped",
    [
      28363
    ]
  ],
  [
    [
      64154,
      64154
    ],
    "mapped",
    [
      28450
    ]
  ],
  [
    [
      64155,
      64155
    ],
    "mapped",
    [
      28702
    ]
  ],
  [
    [
      64156,
      64156
    ],
    "mapped",
    [
      29038
    ]
  ],
  [
    [
      64157,
      64157
    ],
    "mapped",
    [
      30631
    ]
  ],
  [
    [
      64158,
      64158
    ],
    "mapped",
    [
      29237
    ]
  ],
  [
    [
      64159,
      64159
    ],
    "mapped",
    [
      29359
    ]
  ],
  [
    [
      64160,
      64160
    ],
    "mapped",
    [
      29482
    ]
  ],
  [
    [
      64161,
      64161
    ],
    "mapped",
    [
      29809
    ]
  ],
  [
    [
      64162,
      64162
    ],
    "mapped",
    [
      29958
    ]
  ],
  [
    [
      64163,
      64163
    ],
    "mapped",
    [
      30011
    ]
  ],
  [
    [
      64164,
      64164
    ],
    "mapped",
    [
      30237
    ]
  ],
  [
    [
      64165,
      64165
    ],
    "mapped",
    [
      30239
    ]
  ],
  [
    [
      64166,
      64166
    ],
    "mapped",
    [
      30410
    ]
  ],
  [
    [
      64167,
      64167
    ],
    "mapped",
    [
      30427
    ]
  ],
  [
    [
      64168,
      64168
    ],
    "mapped",
    [
      30452
    ]
  ],
  [
    [
      64169,
      64169
    ],
    "mapped",
    [
      30538
    ]
  ],
  [
    [
      64170,
      64170
    ],
    "mapped",
    [
      30528
    ]
  ],
  [
    [
      64171,
      64171
    ],
    "mapped",
    [
      30924
    ]
  ],
  [
    [
      64172,
      64172
    ],
    "mapped",
    [
      31409
    ]
  ],
  [
    [
      64173,
      64173
    ],
    "mapped",
    [
      31680
    ]
  ],
  [
    [
      64174,
      64174
    ],
    "mapped",
    [
      31867
    ]
  ],
  [
    [
      64175,
      64175
    ],
    "mapped",
    [
      32091
    ]
  ],
  [
    [
      64176,
      64176
    ],
    "mapped",
    [
      32244
    ]
  ],
  [
    [
      64177,
      64177
    ],
    "mapped",
    [
      32574
    ]
  ],
  [
    [
      64178,
      64178
    ],
    "mapped",
    [
      32773
    ]
  ],
  [
    [
      64179,
      64179
    ],
    "mapped",
    [
      33618
    ]
  ],
  [
    [
      64180,
      64180
    ],
    "mapped",
    [
      33775
    ]
  ],
  [
    [
      64181,
      64181
    ],
    "mapped",
    [
      34681
    ]
  ],
  [
    [
      64182,
      64182
    ],
    "mapped",
    [
      35137
    ]
  ],
  [
    [
      64183,
      64183
    ],
    "mapped",
    [
      35206
    ]
  ],
  [
    [
      64184,
      64184
    ],
    "mapped",
    [
      35222
    ]
  ],
  [
    [
      64185,
      64185
    ],
    "mapped",
    [
      35519
    ]
  ],
  [
    [
      64186,
      64186
    ],
    "mapped",
    [
      35576
    ]
  ],
  [
    [
      64187,
      64187
    ],
    "mapped",
    [
      35531
    ]
  ],
  [
    [
      64188,
      64188
    ],
    "mapped",
    [
      35585
    ]
  ],
  [
    [
      64189,
      64189
    ],
    "mapped",
    [
      35582
    ]
  ],
  [
    [
      64190,
      64190
    ],
    "mapped",
    [
      35565
    ]
  ],
  [
    [
      64191,
      64191
    ],
    "mapped",
    [
      35641
    ]
  ],
  [
    [
      64192,
      64192
    ],
    "mapped",
    [
      35722
    ]
  ],
  [
    [
      64193,
      64193
    ],
    "mapped",
    [
      36104
    ]
  ],
  [
    [
      64194,
      64194
    ],
    "mapped",
    [
      36664
    ]
  ],
  [
    [
      64195,
      64195
    ],
    "mapped",
    [
      36978
    ]
  ],
  [
    [
      64196,
      64196
    ],
    "mapped",
    [
      37273
    ]
  ],
  [
    [
      64197,
      64197
    ],
    "mapped",
    [
      37494
    ]
  ],
  [
    [
      64198,
      64198
    ],
    "mapped",
    [
      38524
    ]
  ],
  [
    [
      64199,
      64199
    ],
    "mapped",
    [
      38627
    ]
  ],
  [
    [
      64200,
      64200
    ],
    "mapped",
    [
      38742
    ]
  ],
  [
    [
      64201,
      64201
    ],
    "mapped",
    [
      38875
    ]
  ],
  [
    [
      64202,
      64202
    ],
    "mapped",
    [
      38911
    ]
  ],
  [
    [
      64203,
      64203
    ],
    "mapped",
    [
      38923
    ]
  ],
  [
    [
      64204,
      64204
    ],
    "mapped",
    [
      38971
    ]
  ],
  [
    [
      64205,
      64205
    ],
    "mapped",
    [
      39698
    ]
  ],
  [
    [
      64206,
      64206
    ],
    "mapped",
    [
      40860
    ]
  ],
  [
    [
      64207,
      64207
    ],
    "mapped",
    [
      141386
    ]
  ],
  [
    [
      64208,
      64208
    ],
    "mapped",
    [
      141380
    ]
  ],
  [
    [
      64209,
      64209
    ],
    "mapped",
    [
      144341
    ]
  ],
  [
    [
      64210,
      64210
    ],
    "mapped",
    [
      15261
    ]
  ],
  [
    [
      64211,
      64211
    ],
    "mapped",
    [
      16408
    ]
  ],
  [
    [
      64212,
      64212
    ],
    "mapped",
    [
      16441
    ]
  ],
  [
    [
      64213,
      64213
    ],
    "mapped",
    [
      152137
    ]
  ],
  [
    [
      64214,
      64214
    ],
    "mapped",
    [
      154832
    ]
  ],
  [
    [
      64215,
      64215
    ],
    "mapped",
    [
      163539
    ]
  ],
  [
    [
      64216,
      64216
    ],
    "mapped",
    [
      40771
    ]
  ],
  [
    [
      64217,
      64217
    ],
    "mapped",
    [
      40846
    ]
  ],
  [
    [
      64218,
      64255
    ],
    "disallowed"
  ],
  [
    [
      64256,
      64256
    ],
    "mapped",
    [
      102,
      102
    ]
  ],
  [
    [
      64257,
      64257
    ],
    "mapped",
    [
      102,
      105
    ]
  ],
  [
    [
      64258,
      64258
    ],
    "mapped",
    [
      102,
      108
    ]
  ],
  [
    [
      64259,
      64259
    ],
    "mapped",
    [
      102,
      102,
      105
    ]
  ],
  [
    [
      64260,
      64260
    ],
    "mapped",
    [
      102,
      102,
      108
    ]
  ],
  [
    [
      64261,
      64262
    ],
    "mapped",
    [
      115,
      116
    ]
  ],
  [
    [
      64263,
      64274
    ],
    "disallowed"
  ],
  [
    [
      64275,
      64275
    ],
    "mapped",
    [
      1396,
      1398
    ]
  ],
  [
    [
      64276,
      64276
    ],
    "mapped",
    [
      1396,
      1381
    ]
  ],
  [
    [
      64277,
      64277
    ],
    "mapped",
    [
      1396,
      1387
    ]
  ],
  [
    [
      64278,
      64278
    ],
    "mapped",
    [
      1406,
      1398
    ]
  ],
  [
    [
      64279,
      64279
    ],
    "mapped",
    [
      1396,
      1389
    ]
  ],
  [
    [
      64280,
      64284
    ],
    "disallowed"
  ],
  [
    [
      64285,
      64285
    ],
    "mapped",
    [
      1497,
      1460
    ]
  ],
  [
    [
      64286,
      64286
    ],
    "valid"
  ],
  [
    [
      64287,
      64287
    ],
    "mapped",
    [
      1522,
      1463
    ]
  ],
  [
    [
      64288,
      64288
    ],
    "mapped",
    [
      1506
    ]
  ],
  [
    [
      64289,
      64289
    ],
    "mapped",
    [
      1488
    ]
  ],
  [
    [
      64290,
      64290
    ],
    "mapped",
    [
      1491
    ]
  ],
  [
    [
      64291,
      64291
    ],
    "mapped",
    [
      1492
    ]
  ],
  [
    [
      64292,
      64292
    ],
    "mapped",
    [
      1499
    ]
  ],
  [
    [
      64293,
      64293
    ],
    "mapped",
    [
      1500
    ]
  ],
  [
    [
      64294,
      64294
    ],
    "mapped",
    [
      1501
    ]
  ],
  [
    [
      64295,
      64295
    ],
    "mapped",
    [
      1512
    ]
  ],
  [
    [
      64296,
      64296
    ],
    "mapped",
    [
      1514
    ]
  ],
  [
    [
      64297,
      64297
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      64298,
      64298
    ],
    "mapped",
    [
      1513,
      1473
    ]
  ],
  [
    [
      64299,
      64299
    ],
    "mapped",
    [
      1513,
      1474
    ]
  ],
  [
    [
      64300,
      64300
    ],
    "mapped",
    [
      1513,
      1468,
      1473
    ]
  ],
  [
    [
      64301,
      64301
    ],
    "mapped",
    [
      1513,
      1468,
      1474
    ]
  ],
  [
    [
      64302,
      64302
    ],
    "mapped",
    [
      1488,
      1463
    ]
  ],
  [
    [
      64303,
      64303
    ],
    "mapped",
    [
      1488,
      1464
    ]
  ],
  [
    [
      64304,
      64304
    ],
    "mapped",
    [
      1488,
      1468
    ]
  ],
  [
    [
      64305,
      64305
    ],
    "mapped",
    [
      1489,
      1468
    ]
  ],
  [
    [
      64306,
      64306
    ],
    "mapped",
    [
      1490,
      1468
    ]
  ],
  [
    [
      64307,
      64307
    ],
    "mapped",
    [
      1491,
      1468
    ]
  ],
  [
    [
      64308,
      64308
    ],
    "mapped",
    [
      1492,
      1468
    ]
  ],
  [
    [
      64309,
      64309
    ],
    "mapped",
    [
      1493,
      1468
    ]
  ],
  [
    [
      64310,
      64310
    ],
    "mapped",
    [
      1494,
      1468
    ]
  ],
  [
    [
      64311,
      64311
    ],
    "disallowed"
  ],
  [
    [
      64312,
      64312
    ],
    "mapped",
    [
      1496,
      1468
    ]
  ],
  [
    [
      64313,
      64313
    ],
    "mapped",
    [
      1497,
      1468
    ]
  ],
  [
    [
      64314,
      64314
    ],
    "mapped",
    [
      1498,
      1468
    ]
  ],
  [
    [
      64315,
      64315
    ],
    "mapped",
    [
      1499,
      1468
    ]
  ],
  [
    [
      64316,
      64316
    ],
    "mapped",
    [
      1500,
      1468
    ]
  ],
  [
    [
      64317,
      64317
    ],
    "disallowed"
  ],
  [
    [
      64318,
      64318
    ],
    "mapped",
    [
      1502,
      1468
    ]
  ],
  [
    [
      64319,
      64319
    ],
    "disallowed"
  ],
  [
    [
      64320,
      64320
    ],
    "mapped",
    [
      1504,
      1468
    ]
  ],
  [
    [
      64321,
      64321
    ],
    "mapped",
    [
      1505,
      1468
    ]
  ],
  [
    [
      64322,
      64322
    ],
    "disallowed"
  ],
  [
    [
      64323,
      64323
    ],
    "mapped",
    [
      1507,
      1468
    ]
  ],
  [
    [
      64324,
      64324
    ],
    "mapped",
    [
      1508,
      1468
    ]
  ],
  [
    [
      64325,
      64325
    ],
    "disallowed"
  ],
  [
    [
      64326,
      64326
    ],
    "mapped",
    [
      1510,
      1468
    ]
  ],
  [
    [
      64327,
      64327
    ],
    "mapped",
    [
      1511,
      1468
    ]
  ],
  [
    [
      64328,
      64328
    ],
    "mapped",
    [
      1512,
      1468
    ]
  ],
  [
    [
      64329,
      64329
    ],
    "mapped",
    [
      1513,
      1468
    ]
  ],
  [
    [
      64330,
      64330
    ],
    "mapped",
    [
      1514,
      1468
    ]
  ],
  [
    [
      64331,
      64331
    ],
    "mapped",
    [
      1493,
      1465
    ]
  ],
  [
    [
      64332,
      64332
    ],
    "mapped",
    [
      1489,
      1471
    ]
  ],
  [
    [
      64333,
      64333
    ],
    "mapped",
    [
      1499,
      1471
    ]
  ],
  [
    [
      64334,
      64334
    ],
    "mapped",
    [
      1508,
      1471
    ]
  ],
  [
    [
      64335,
      64335
    ],
    "mapped",
    [
      1488,
      1500
    ]
  ],
  [
    [
      64336,
      64337
    ],
    "mapped",
    [
      1649
    ]
  ],
  [
    [
      64338,
      64341
    ],
    "mapped",
    [
      1659
    ]
  ],
  [
    [
      64342,
      64345
    ],
    "mapped",
    [
      1662
    ]
  ],
  [
    [
      64346,
      64349
    ],
    "mapped",
    [
      1664
    ]
  ],
  [
    [
      64350,
      64353
    ],
    "mapped",
    [
      1658
    ]
  ],
  [
    [
      64354,
      64357
    ],
    "mapped",
    [
      1663
    ]
  ],
  [
    [
      64358,
      64361
    ],
    "mapped",
    [
      1657
    ]
  ],
  [
    [
      64362,
      64365
    ],
    "mapped",
    [
      1700
    ]
  ],
  [
    [
      64366,
      64369
    ],
    "mapped",
    [
      1702
    ]
  ],
  [
    [
      64370,
      64373
    ],
    "mapped",
    [
      1668
    ]
  ],
  [
    [
      64374,
      64377
    ],
    "mapped",
    [
      1667
    ]
  ],
  [
    [
      64378,
      64381
    ],
    "mapped",
    [
      1670
    ]
  ],
  [
    [
      64382,
      64385
    ],
    "mapped",
    [
      1671
    ]
  ],
  [
    [
      64386,
      64387
    ],
    "mapped",
    [
      1677
    ]
  ],
  [
    [
      64388,
      64389
    ],
    "mapped",
    [
      1676
    ]
  ],
  [
    [
      64390,
      64391
    ],
    "mapped",
    [
      1678
    ]
  ],
  [
    [
      64392,
      64393
    ],
    "mapped",
    [
      1672
    ]
  ],
  [
    [
      64394,
      64395
    ],
    "mapped",
    [
      1688
    ]
  ],
  [
    [
      64396,
      64397
    ],
    "mapped",
    [
      1681
    ]
  ],
  [
    [
      64398,
      64401
    ],
    "mapped",
    [
      1705
    ]
  ],
  [
    [
      64402,
      64405
    ],
    "mapped",
    [
      1711
    ]
  ],
  [
    [
      64406,
      64409
    ],
    "mapped",
    [
      1715
    ]
  ],
  [
    [
      64410,
      64413
    ],
    "mapped",
    [
      1713
    ]
  ],
  [
    [
      64414,
      64415
    ],
    "mapped",
    [
      1722
    ]
  ],
  [
    [
      64416,
      64419
    ],
    "mapped",
    [
      1723
    ]
  ],
  [
    [
      64420,
      64421
    ],
    "mapped",
    [
      1728
    ]
  ],
  [
    [
      64422,
      64425
    ],
    "mapped",
    [
      1729
    ]
  ],
  [
    [
      64426,
      64429
    ],
    "mapped",
    [
      1726
    ]
  ],
  [
    [
      64430,
      64431
    ],
    "mapped",
    [
      1746
    ]
  ],
  [
    [
      64432,
      64433
    ],
    "mapped",
    [
      1747
    ]
  ],
  [
    [
      64434,
      64449
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      64450,
      64466
    ],
    "disallowed"
  ],
  [
    [
      64467,
      64470
    ],
    "mapped",
    [
      1709
    ]
  ],
  [
    [
      64471,
      64472
    ],
    "mapped",
    [
      1735
    ]
  ],
  [
    [
      64473,
      64474
    ],
    "mapped",
    [
      1734
    ]
  ],
  [
    [
      64475,
      64476
    ],
    "mapped",
    [
      1736
    ]
  ],
  [
    [
      64477,
      64477
    ],
    "mapped",
    [
      1735,
      1652
    ]
  ],
  [
    [
      64478,
      64479
    ],
    "mapped",
    [
      1739
    ]
  ],
  [
    [
      64480,
      64481
    ],
    "mapped",
    [
      1733
    ]
  ],
  [
    [
      64482,
      64483
    ],
    "mapped",
    [
      1737
    ]
  ],
  [
    [
      64484,
      64487
    ],
    "mapped",
    [
      1744
    ]
  ],
  [
    [
      64488,
      64489
    ],
    "mapped",
    [
      1609
    ]
  ],
  [
    [
      64490,
      64491
    ],
    "mapped",
    [
      1574,
      1575
    ]
  ],
  [
    [
      64492,
      64493
    ],
    "mapped",
    [
      1574,
      1749
    ]
  ],
  [
    [
      64494,
      64495
    ],
    "mapped",
    [
      1574,
      1608
    ]
  ],
  [
    [
      64496,
      64497
    ],
    "mapped",
    [
      1574,
      1735
    ]
  ],
  [
    [
      64498,
      64499
    ],
    "mapped",
    [
      1574,
      1734
    ]
  ],
  [
    [
      64500,
      64501
    ],
    "mapped",
    [
      1574,
      1736
    ]
  ],
  [
    [
      64502,
      64504
    ],
    "mapped",
    [
      1574,
      1744
    ]
  ],
  [
    [
      64505,
      64507
    ],
    "mapped",
    [
      1574,
      1609
    ]
  ],
  [
    [
      64508,
      64511
    ],
    "mapped",
    [
      1740
    ]
  ],
  [
    [
      64512,
      64512
    ],
    "mapped",
    [
      1574,
      1580
    ]
  ],
  [
    [
      64513,
      64513
    ],
    "mapped",
    [
      1574,
      1581
    ]
  ],
  [
    [
      64514,
      64514
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64515,
      64515
    ],
    "mapped",
    [
      1574,
      1609
    ]
  ],
  [
    [
      64516,
      64516
    ],
    "mapped",
    [
      1574,
      1610
    ]
  ],
  [
    [
      64517,
      64517
    ],
    "mapped",
    [
      1576,
      1580
    ]
  ],
  [
    [
      64518,
      64518
    ],
    "mapped",
    [
      1576,
      1581
    ]
  ],
  [
    [
      64519,
      64519
    ],
    "mapped",
    [
      1576,
      1582
    ]
  ],
  [
    [
      64520,
      64520
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64521,
      64521
    ],
    "mapped",
    [
      1576,
      1609
    ]
  ],
  [
    [
      64522,
      64522
    ],
    "mapped",
    [
      1576,
      1610
    ]
  ],
  [
    [
      64523,
      64523
    ],
    "mapped",
    [
      1578,
      1580
    ]
  ],
  [
    [
      64524,
      64524
    ],
    "mapped",
    [
      1578,
      1581
    ]
  ],
  [
    [
      64525,
      64525
    ],
    "mapped",
    [
      1578,
      1582
    ]
  ],
  [
    [
      64526,
      64526
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64527,
      64527
    ],
    "mapped",
    [
      1578,
      1609
    ]
  ],
  [
    [
      64528,
      64528
    ],
    "mapped",
    [
      1578,
      1610
    ]
  ],
  [
    [
      64529,
      64529
    ],
    "mapped",
    [
      1579,
      1580
    ]
  ],
  [
    [
      64530,
      64530
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64531,
      64531
    ],
    "mapped",
    [
      1579,
      1609
    ]
  ],
  [
    [
      64532,
      64532
    ],
    "mapped",
    [
      1579,
      1610
    ]
  ],
  [
    [
      64533,
      64533
    ],
    "mapped",
    [
      1580,
      1581
    ]
  ],
  [
    [
      64534,
      64534
    ],
    "mapped",
    [
      1580,
      1605
    ]
  ],
  [
    [
      64535,
      64535
    ],
    "mapped",
    [
      1581,
      1580
    ]
  ],
  [
    [
      64536,
      64536
    ],
    "mapped",
    [
      1581,
      1605
    ]
  ],
  [
    [
      64537,
      64537
    ],
    "mapped",
    [
      1582,
      1580
    ]
  ],
  [
    [
      64538,
      64538
    ],
    "mapped",
    [
      1582,
      1581
    ]
  ],
  [
    [
      64539,
      64539
    ],
    "mapped",
    [
      1582,
      1605
    ]
  ],
  [
    [
      64540,
      64540
    ],
    "mapped",
    [
      1587,
      1580
    ]
  ],
  [
    [
      64541,
      64541
    ],
    "mapped",
    [
      1587,
      1581
    ]
  ],
  [
    [
      64542,
      64542
    ],
    "mapped",
    [
      1587,
      1582
    ]
  ],
  [
    [
      64543,
      64543
    ],
    "mapped",
    [
      1587,
      1605
    ]
  ],
  [
    [
      64544,
      64544
    ],
    "mapped",
    [
      1589,
      1581
    ]
  ],
  [
    [
      64545,
      64545
    ],
    "mapped",
    [
      1589,
      1605
    ]
  ],
  [
    [
      64546,
      64546
    ],
    "mapped",
    [
      1590,
      1580
    ]
  ],
  [
    [
      64547,
      64547
    ],
    "mapped",
    [
      1590,
      1581
    ]
  ],
  [
    [
      64548,
      64548
    ],
    "mapped",
    [
      1590,
      1582
    ]
  ],
  [
    [
      64549,
      64549
    ],
    "mapped",
    [
      1590,
      1605
    ]
  ],
  [
    [
      64550,
      64550
    ],
    "mapped",
    [
      1591,
      1581
    ]
  ],
  [
    [
      64551,
      64551
    ],
    "mapped",
    [
      1591,
      1605
    ]
  ],
  [
    [
      64552,
      64552
    ],
    "mapped",
    [
      1592,
      1605
    ]
  ],
  [
    [
      64553,
      64553
    ],
    "mapped",
    [
      1593,
      1580
    ]
  ],
  [
    [
      64554,
      64554
    ],
    "mapped",
    [
      1593,
      1605
    ]
  ],
  [
    [
      64555,
      64555
    ],
    "mapped",
    [
      1594,
      1580
    ]
  ],
  [
    [
      64556,
      64556
    ],
    "mapped",
    [
      1594,
      1605
    ]
  ],
  [
    [
      64557,
      64557
    ],
    "mapped",
    [
      1601,
      1580
    ]
  ],
  [
    [
      64558,
      64558
    ],
    "mapped",
    [
      1601,
      1581
    ]
  ],
  [
    [
      64559,
      64559
    ],
    "mapped",
    [
      1601,
      1582
    ]
  ],
  [
    [
      64560,
      64560
    ],
    "mapped",
    [
      1601,
      1605
    ]
  ],
  [
    [
      64561,
      64561
    ],
    "mapped",
    [
      1601,
      1609
    ]
  ],
  [
    [
      64562,
      64562
    ],
    "mapped",
    [
      1601,
      1610
    ]
  ],
  [
    [
      64563,
      64563
    ],
    "mapped",
    [
      1602,
      1581
    ]
  ],
  [
    [
      64564,
      64564
    ],
    "mapped",
    [
      1602,
      1605
    ]
  ],
  [
    [
      64565,
      64565
    ],
    "mapped",
    [
      1602,
      1609
    ]
  ],
  [
    [
      64566,
      64566
    ],
    "mapped",
    [
      1602,
      1610
    ]
  ],
  [
    [
      64567,
      64567
    ],
    "mapped",
    [
      1603,
      1575
    ]
  ],
  [
    [
      64568,
      64568
    ],
    "mapped",
    [
      1603,
      1580
    ]
  ],
  [
    [
      64569,
      64569
    ],
    "mapped",
    [
      1603,
      1581
    ]
  ],
  [
    [
      64570,
      64570
    ],
    "mapped",
    [
      1603,
      1582
    ]
  ],
  [
    [
      64571,
      64571
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64572,
      64572
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64573,
      64573
    ],
    "mapped",
    [
      1603,
      1609
    ]
  ],
  [
    [
      64574,
      64574
    ],
    "mapped",
    [
      1603,
      1610
    ]
  ],
  [
    [
      64575,
      64575
    ],
    "mapped",
    [
      1604,
      1580
    ]
  ],
  [
    [
      64576,
      64576
    ],
    "mapped",
    [
      1604,
      1581
    ]
  ],
  [
    [
      64577,
      64577
    ],
    "mapped",
    [
      1604,
      1582
    ]
  ],
  [
    [
      64578,
      64578
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64579,
      64579
    ],
    "mapped",
    [
      1604,
      1609
    ]
  ],
  [
    [
      64580,
      64580
    ],
    "mapped",
    [
      1604,
      1610
    ]
  ],
  [
    [
      64581,
      64581
    ],
    "mapped",
    [
      1605,
      1580
    ]
  ],
  [
    [
      64582,
      64582
    ],
    "mapped",
    [
      1605,
      1581
    ]
  ],
  [
    [
      64583,
      64583
    ],
    "mapped",
    [
      1605,
      1582
    ]
  ],
  [
    [
      64584,
      64584
    ],
    "mapped",
    [
      1605,
      1605
    ]
  ],
  [
    [
      64585,
      64585
    ],
    "mapped",
    [
      1605,
      1609
    ]
  ],
  [
    [
      64586,
      64586
    ],
    "mapped",
    [
      1605,
      1610
    ]
  ],
  [
    [
      64587,
      64587
    ],
    "mapped",
    [
      1606,
      1580
    ]
  ],
  [
    [
      64588,
      64588
    ],
    "mapped",
    [
      1606,
      1581
    ]
  ],
  [
    [
      64589,
      64589
    ],
    "mapped",
    [
      1606,
      1582
    ]
  ],
  [
    [
      64590,
      64590
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64591,
      64591
    ],
    "mapped",
    [
      1606,
      1609
    ]
  ],
  [
    [
      64592,
      64592
    ],
    "mapped",
    [
      1606,
      1610
    ]
  ],
  [
    [
      64593,
      64593
    ],
    "mapped",
    [
      1607,
      1580
    ]
  ],
  [
    [
      64594,
      64594
    ],
    "mapped",
    [
      1607,
      1605
    ]
  ],
  [
    [
      64595,
      64595
    ],
    "mapped",
    [
      1607,
      1609
    ]
  ],
  [
    [
      64596,
      64596
    ],
    "mapped",
    [
      1607,
      1610
    ]
  ],
  [
    [
      64597,
      64597
    ],
    "mapped",
    [
      1610,
      1580
    ]
  ],
  [
    [
      64598,
      64598
    ],
    "mapped",
    [
      1610,
      1581
    ]
  ],
  [
    [
      64599,
      64599
    ],
    "mapped",
    [
      1610,
      1582
    ]
  ],
  [
    [
      64600,
      64600
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64601,
      64601
    ],
    "mapped",
    [
      1610,
      1609
    ]
  ],
  [
    [
      64602,
      64602
    ],
    "mapped",
    [
      1610,
      1610
    ]
  ],
  [
    [
      64603,
      64603
    ],
    "mapped",
    [
      1584,
      1648
    ]
  ],
  [
    [
      64604,
      64604
    ],
    "mapped",
    [
      1585,
      1648
    ]
  ],
  [
    [
      64605,
      64605
    ],
    "mapped",
    [
      1609,
      1648
    ]
  ],
  [
    [
      64606,
      64606
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1612,
      1617
    ]
  ],
  [
    [
      64607,
      64607
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1613,
      1617
    ]
  ],
  [
    [
      64608,
      64608
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1614,
      1617
    ]
  ],
  [
    [
      64609,
      64609
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1615,
      1617
    ]
  ],
  [
    [
      64610,
      64610
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1616,
      1617
    ]
  ],
  [
    [
      64611,
      64611
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1617,
      1648
    ]
  ],
  [
    [
      64612,
      64612
    ],
    "mapped",
    [
      1574,
      1585
    ]
  ],
  [
    [
      64613,
      64613
    ],
    "mapped",
    [
      1574,
      1586
    ]
  ],
  [
    [
      64614,
      64614
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64615,
      64615
    ],
    "mapped",
    [
      1574,
      1606
    ]
  ],
  [
    [
      64616,
      64616
    ],
    "mapped",
    [
      1574,
      1609
    ]
  ],
  [
    [
      64617,
      64617
    ],
    "mapped",
    [
      1574,
      1610
    ]
  ],
  [
    [
      64618,
      64618
    ],
    "mapped",
    [
      1576,
      1585
    ]
  ],
  [
    [
      64619,
      64619
    ],
    "mapped",
    [
      1576,
      1586
    ]
  ],
  [
    [
      64620,
      64620
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64621,
      64621
    ],
    "mapped",
    [
      1576,
      1606
    ]
  ],
  [
    [
      64622,
      64622
    ],
    "mapped",
    [
      1576,
      1609
    ]
  ],
  [
    [
      64623,
      64623
    ],
    "mapped",
    [
      1576,
      1610
    ]
  ],
  [
    [
      64624,
      64624
    ],
    "mapped",
    [
      1578,
      1585
    ]
  ],
  [
    [
      64625,
      64625
    ],
    "mapped",
    [
      1578,
      1586
    ]
  ],
  [
    [
      64626,
      64626
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64627,
      64627
    ],
    "mapped",
    [
      1578,
      1606
    ]
  ],
  [
    [
      64628,
      64628
    ],
    "mapped",
    [
      1578,
      1609
    ]
  ],
  [
    [
      64629,
      64629
    ],
    "mapped",
    [
      1578,
      1610
    ]
  ],
  [
    [
      64630,
      64630
    ],
    "mapped",
    [
      1579,
      1585
    ]
  ],
  [
    [
      64631,
      64631
    ],
    "mapped",
    [
      1579,
      1586
    ]
  ],
  [
    [
      64632,
      64632
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64633,
      64633
    ],
    "mapped",
    [
      1579,
      1606
    ]
  ],
  [
    [
      64634,
      64634
    ],
    "mapped",
    [
      1579,
      1609
    ]
  ],
  [
    [
      64635,
      64635
    ],
    "mapped",
    [
      1579,
      1610
    ]
  ],
  [
    [
      64636,
      64636
    ],
    "mapped",
    [
      1601,
      1609
    ]
  ],
  [
    [
      64637,
      64637
    ],
    "mapped",
    [
      1601,
      1610
    ]
  ],
  [
    [
      64638,
      64638
    ],
    "mapped",
    [
      1602,
      1609
    ]
  ],
  [
    [
      64639,
      64639
    ],
    "mapped",
    [
      1602,
      1610
    ]
  ],
  [
    [
      64640,
      64640
    ],
    "mapped",
    [
      1603,
      1575
    ]
  ],
  [
    [
      64641,
      64641
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64642,
      64642
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64643,
      64643
    ],
    "mapped",
    [
      1603,
      1609
    ]
  ],
  [
    [
      64644,
      64644
    ],
    "mapped",
    [
      1603,
      1610
    ]
  ],
  [
    [
      64645,
      64645
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64646,
      64646
    ],
    "mapped",
    [
      1604,
      1609
    ]
  ],
  [
    [
      64647,
      64647
    ],
    "mapped",
    [
      1604,
      1610
    ]
  ],
  [
    [
      64648,
      64648
    ],
    "mapped",
    [
      1605,
      1575
    ]
  ],
  [
    [
      64649,
      64649
    ],
    "mapped",
    [
      1605,
      1605
    ]
  ],
  [
    [
      64650,
      64650
    ],
    "mapped",
    [
      1606,
      1585
    ]
  ],
  [
    [
      64651,
      64651
    ],
    "mapped",
    [
      1606,
      1586
    ]
  ],
  [
    [
      64652,
      64652
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64653,
      64653
    ],
    "mapped",
    [
      1606,
      1606
    ]
  ],
  [
    [
      64654,
      64654
    ],
    "mapped",
    [
      1606,
      1609
    ]
  ],
  [
    [
      64655,
      64655
    ],
    "mapped",
    [
      1606,
      1610
    ]
  ],
  [
    [
      64656,
      64656
    ],
    "mapped",
    [
      1609,
      1648
    ]
  ],
  [
    [
      64657,
      64657
    ],
    "mapped",
    [
      1610,
      1585
    ]
  ],
  [
    [
      64658,
      64658
    ],
    "mapped",
    [
      1610,
      1586
    ]
  ],
  [
    [
      64659,
      64659
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64660,
      64660
    ],
    "mapped",
    [
      1610,
      1606
    ]
  ],
  [
    [
      64661,
      64661
    ],
    "mapped",
    [
      1610,
      1609
    ]
  ],
  [
    [
      64662,
      64662
    ],
    "mapped",
    [
      1610,
      1610
    ]
  ],
  [
    [
      64663,
      64663
    ],
    "mapped",
    [
      1574,
      1580
    ]
  ],
  [
    [
      64664,
      64664
    ],
    "mapped",
    [
      1574,
      1581
    ]
  ],
  [
    [
      64665,
      64665
    ],
    "mapped",
    [
      1574,
      1582
    ]
  ],
  [
    [
      64666,
      64666
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64667,
      64667
    ],
    "mapped",
    [
      1574,
      1607
    ]
  ],
  [
    [
      64668,
      64668
    ],
    "mapped",
    [
      1576,
      1580
    ]
  ],
  [
    [
      64669,
      64669
    ],
    "mapped",
    [
      1576,
      1581
    ]
  ],
  [
    [
      64670,
      64670
    ],
    "mapped",
    [
      1576,
      1582
    ]
  ],
  [
    [
      64671,
      64671
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64672,
      64672
    ],
    "mapped",
    [
      1576,
      1607
    ]
  ],
  [
    [
      64673,
      64673
    ],
    "mapped",
    [
      1578,
      1580
    ]
  ],
  [
    [
      64674,
      64674
    ],
    "mapped",
    [
      1578,
      1581
    ]
  ],
  [
    [
      64675,
      64675
    ],
    "mapped",
    [
      1578,
      1582
    ]
  ],
  [
    [
      64676,
      64676
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64677,
      64677
    ],
    "mapped",
    [
      1578,
      1607
    ]
  ],
  [
    [
      64678,
      64678
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64679,
      64679
    ],
    "mapped",
    [
      1580,
      1581
    ]
  ],
  [
    [
      64680,
      64680
    ],
    "mapped",
    [
      1580,
      1605
    ]
  ],
  [
    [
      64681,
      64681
    ],
    "mapped",
    [
      1581,
      1580
    ]
  ],
  [
    [
      64682,
      64682
    ],
    "mapped",
    [
      1581,
      1605
    ]
  ],
  [
    [
      64683,
      64683
    ],
    "mapped",
    [
      1582,
      1580
    ]
  ],
  [
    [
      64684,
      64684
    ],
    "mapped",
    [
      1582,
      1605
    ]
  ],
  [
    [
      64685,
      64685
    ],
    "mapped",
    [
      1587,
      1580
    ]
  ],
  [
    [
      64686,
      64686
    ],
    "mapped",
    [
      1587,
      1581
    ]
  ],
  [
    [
      64687,
      64687
    ],
    "mapped",
    [
      1587,
      1582
    ]
  ],
  [
    [
      64688,
      64688
    ],
    "mapped",
    [
      1587,
      1605
    ]
  ],
  [
    [
      64689,
      64689
    ],
    "mapped",
    [
      1589,
      1581
    ]
  ],
  [
    [
      64690,
      64690
    ],
    "mapped",
    [
      1589,
      1582
    ]
  ],
  [
    [
      64691,
      64691
    ],
    "mapped",
    [
      1589,
      1605
    ]
  ],
  [
    [
      64692,
      64692
    ],
    "mapped",
    [
      1590,
      1580
    ]
  ],
  [
    [
      64693,
      64693
    ],
    "mapped",
    [
      1590,
      1581
    ]
  ],
  [
    [
      64694,
      64694
    ],
    "mapped",
    [
      1590,
      1582
    ]
  ],
  [
    [
      64695,
      64695
    ],
    "mapped",
    [
      1590,
      1605
    ]
  ],
  [
    [
      64696,
      64696
    ],
    "mapped",
    [
      1591,
      1581
    ]
  ],
  [
    [
      64697,
      64697
    ],
    "mapped",
    [
      1592,
      1605
    ]
  ],
  [
    [
      64698,
      64698
    ],
    "mapped",
    [
      1593,
      1580
    ]
  ],
  [
    [
      64699,
      64699
    ],
    "mapped",
    [
      1593,
      1605
    ]
  ],
  [
    [
      64700,
      64700
    ],
    "mapped",
    [
      1594,
      1580
    ]
  ],
  [
    [
      64701,
      64701
    ],
    "mapped",
    [
      1594,
      1605
    ]
  ],
  [
    [
      64702,
      64702
    ],
    "mapped",
    [
      1601,
      1580
    ]
  ],
  [
    [
      64703,
      64703
    ],
    "mapped",
    [
      1601,
      1581
    ]
  ],
  [
    [
      64704,
      64704
    ],
    "mapped",
    [
      1601,
      1582
    ]
  ],
  [
    [
      64705,
      64705
    ],
    "mapped",
    [
      1601,
      1605
    ]
  ],
  [
    [
      64706,
      64706
    ],
    "mapped",
    [
      1602,
      1581
    ]
  ],
  [
    [
      64707,
      64707
    ],
    "mapped",
    [
      1602,
      1605
    ]
  ],
  [
    [
      64708,
      64708
    ],
    "mapped",
    [
      1603,
      1580
    ]
  ],
  [
    [
      64709,
      64709
    ],
    "mapped",
    [
      1603,
      1581
    ]
  ],
  [
    [
      64710,
      64710
    ],
    "mapped",
    [
      1603,
      1582
    ]
  ],
  [
    [
      64711,
      64711
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64712,
      64712
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64713,
      64713
    ],
    "mapped",
    [
      1604,
      1580
    ]
  ],
  [
    [
      64714,
      64714
    ],
    "mapped",
    [
      1604,
      1581
    ]
  ],
  [
    [
      64715,
      64715
    ],
    "mapped",
    [
      1604,
      1582
    ]
  ],
  [
    [
      64716,
      64716
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64717,
      64717
    ],
    "mapped",
    [
      1604,
      1607
    ]
  ],
  [
    [
      64718,
      64718
    ],
    "mapped",
    [
      1605,
      1580
    ]
  ],
  [
    [
      64719,
      64719
    ],
    "mapped",
    [
      1605,
      1581
    ]
  ],
  [
    [
      64720,
      64720
    ],
    "mapped",
    [
      1605,
      1582
    ]
  ],
  [
    [
      64721,
      64721
    ],
    "mapped",
    [
      1605,
      1605
    ]
  ],
  [
    [
      64722,
      64722
    ],
    "mapped",
    [
      1606,
      1580
    ]
  ],
  [
    [
      64723,
      64723
    ],
    "mapped",
    [
      1606,
      1581
    ]
  ],
  [
    [
      64724,
      64724
    ],
    "mapped",
    [
      1606,
      1582
    ]
  ],
  [
    [
      64725,
      64725
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64726,
      64726
    ],
    "mapped",
    [
      1606,
      1607
    ]
  ],
  [
    [
      64727,
      64727
    ],
    "mapped",
    [
      1607,
      1580
    ]
  ],
  [
    [
      64728,
      64728
    ],
    "mapped",
    [
      1607,
      1605
    ]
  ],
  [
    [
      64729,
      64729
    ],
    "mapped",
    [
      1607,
      1648
    ]
  ],
  [
    [
      64730,
      64730
    ],
    "mapped",
    [
      1610,
      1580
    ]
  ],
  [
    [
      64731,
      64731
    ],
    "mapped",
    [
      1610,
      1581
    ]
  ],
  [
    [
      64732,
      64732
    ],
    "mapped",
    [
      1610,
      1582
    ]
  ],
  [
    [
      64733,
      64733
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64734,
      64734
    ],
    "mapped",
    [
      1610,
      1607
    ]
  ],
  [
    [
      64735,
      64735
    ],
    "mapped",
    [
      1574,
      1605
    ]
  ],
  [
    [
      64736,
      64736
    ],
    "mapped",
    [
      1574,
      1607
    ]
  ],
  [
    [
      64737,
      64737
    ],
    "mapped",
    [
      1576,
      1605
    ]
  ],
  [
    [
      64738,
      64738
    ],
    "mapped",
    [
      1576,
      1607
    ]
  ],
  [
    [
      64739,
      64739
    ],
    "mapped",
    [
      1578,
      1605
    ]
  ],
  [
    [
      64740,
      64740
    ],
    "mapped",
    [
      1578,
      1607
    ]
  ],
  [
    [
      64741,
      64741
    ],
    "mapped",
    [
      1579,
      1605
    ]
  ],
  [
    [
      64742,
      64742
    ],
    "mapped",
    [
      1579,
      1607
    ]
  ],
  [
    [
      64743,
      64743
    ],
    "mapped",
    [
      1587,
      1605
    ]
  ],
  [
    [
      64744,
      64744
    ],
    "mapped",
    [
      1587,
      1607
    ]
  ],
  [
    [
      64745,
      64745
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64746,
      64746
    ],
    "mapped",
    [
      1588,
      1607
    ]
  ],
  [
    [
      64747,
      64747
    ],
    "mapped",
    [
      1603,
      1604
    ]
  ],
  [
    [
      64748,
      64748
    ],
    "mapped",
    [
      1603,
      1605
    ]
  ],
  [
    [
      64749,
      64749
    ],
    "mapped",
    [
      1604,
      1605
    ]
  ],
  [
    [
      64750,
      64750
    ],
    "mapped",
    [
      1606,
      1605
    ]
  ],
  [
    [
      64751,
      64751
    ],
    "mapped",
    [
      1606,
      1607
    ]
  ],
  [
    [
      64752,
      64752
    ],
    "mapped",
    [
      1610,
      1605
    ]
  ],
  [
    [
      64753,
      64753
    ],
    "mapped",
    [
      1610,
      1607
    ]
  ],
  [
    [
      64754,
      64754
    ],
    "mapped",
    [
      1600,
      1614,
      1617
    ]
  ],
  [
    [
      64755,
      64755
    ],
    "mapped",
    [
      1600,
      1615,
      1617
    ]
  ],
  [
    [
      64756,
      64756
    ],
    "mapped",
    [
      1600,
      1616,
      1617
    ]
  ],
  [
    [
      64757,
      64757
    ],
    "mapped",
    [
      1591,
      1609
    ]
  ],
  [
    [
      64758,
      64758
    ],
    "mapped",
    [
      1591,
      1610
    ]
  ],
  [
    [
      64759,
      64759
    ],
    "mapped",
    [
      1593,
      1609
    ]
  ],
  [
    [
      64760,
      64760
    ],
    "mapped",
    [
      1593,
      1610
    ]
  ],
  [
    [
      64761,
      64761
    ],
    "mapped",
    [
      1594,
      1609
    ]
  ],
  [
    [
      64762,
      64762
    ],
    "mapped",
    [
      1594,
      1610
    ]
  ],
  [
    [
      64763,
      64763
    ],
    "mapped",
    [
      1587,
      1609
    ]
  ],
  [
    [
      64764,
      64764
    ],
    "mapped",
    [
      1587,
      1610
    ]
  ],
  [
    [
      64765,
      64765
    ],
    "mapped",
    [
      1588,
      1609
    ]
  ],
  [
    [
      64766,
      64766
    ],
    "mapped",
    [
      1588,
      1610
    ]
  ],
  [
    [
      64767,
      64767
    ],
    "mapped",
    [
      1581,
      1609
    ]
  ],
  [
    [
      64768,
      64768
    ],
    "mapped",
    [
      1581,
      1610
    ]
  ],
  [
    [
      64769,
      64769
    ],
    "mapped",
    [
      1580,
      1609
    ]
  ],
  [
    [
      64770,
      64770
    ],
    "mapped",
    [
      1580,
      1610
    ]
  ],
  [
    [
      64771,
      64771
    ],
    "mapped",
    [
      1582,
      1609
    ]
  ],
  [
    [
      64772,
      64772
    ],
    "mapped",
    [
      1582,
      1610
    ]
  ],
  [
    [
      64773,
      64773
    ],
    "mapped",
    [
      1589,
      1609
    ]
  ],
  [
    [
      64774,
      64774
    ],
    "mapped",
    [
      1589,
      1610
    ]
  ],
  [
    [
      64775,
      64775
    ],
    "mapped",
    [
      1590,
      1609
    ]
  ],
  [
    [
      64776,
      64776
    ],
    "mapped",
    [
      1590,
      1610
    ]
  ],
  [
    [
      64777,
      64777
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64778,
      64778
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64779,
      64779
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64780,
      64780
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64781,
      64781
    ],
    "mapped",
    [
      1588,
      1585
    ]
  ],
  [
    [
      64782,
      64782
    ],
    "mapped",
    [
      1587,
      1585
    ]
  ],
  [
    [
      64783,
      64783
    ],
    "mapped",
    [
      1589,
      1585
    ]
  ],
  [
    [
      64784,
      64784
    ],
    "mapped",
    [
      1590,
      1585
    ]
  ],
  [
    [
      64785,
      64785
    ],
    "mapped",
    [
      1591,
      1609
    ]
  ],
  [
    [
      64786,
      64786
    ],
    "mapped",
    [
      1591,
      1610
    ]
  ],
  [
    [
      64787,
      64787
    ],
    "mapped",
    [
      1593,
      1609
    ]
  ],
  [
    [
      64788,
      64788
    ],
    "mapped",
    [
      1593,
      1610
    ]
  ],
  [
    [
      64789,
      64789
    ],
    "mapped",
    [
      1594,
      1609
    ]
  ],
  [
    [
      64790,
      64790
    ],
    "mapped",
    [
      1594,
      1610
    ]
  ],
  [
    [
      64791,
      64791
    ],
    "mapped",
    [
      1587,
      1609
    ]
  ],
  [
    [
      64792,
      64792
    ],
    "mapped",
    [
      1587,
      1610
    ]
  ],
  [
    [
      64793,
      64793
    ],
    "mapped",
    [
      1588,
      1609
    ]
  ],
  [
    [
      64794,
      64794
    ],
    "mapped",
    [
      1588,
      1610
    ]
  ],
  [
    [
      64795,
      64795
    ],
    "mapped",
    [
      1581,
      1609
    ]
  ],
  [
    [
      64796,
      64796
    ],
    "mapped",
    [
      1581,
      1610
    ]
  ],
  [
    [
      64797,
      64797
    ],
    "mapped",
    [
      1580,
      1609
    ]
  ],
  [
    [
      64798,
      64798
    ],
    "mapped",
    [
      1580,
      1610
    ]
  ],
  [
    [
      64799,
      64799
    ],
    "mapped",
    [
      1582,
      1609
    ]
  ],
  [
    [
      64800,
      64800
    ],
    "mapped",
    [
      1582,
      1610
    ]
  ],
  [
    [
      64801,
      64801
    ],
    "mapped",
    [
      1589,
      1609
    ]
  ],
  [
    [
      64802,
      64802
    ],
    "mapped",
    [
      1589,
      1610
    ]
  ],
  [
    [
      64803,
      64803
    ],
    "mapped",
    [
      1590,
      1609
    ]
  ],
  [
    [
      64804,
      64804
    ],
    "mapped",
    [
      1590,
      1610
    ]
  ],
  [
    [
      64805,
      64805
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64806,
      64806
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64807,
      64807
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64808,
      64808
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64809,
      64809
    ],
    "mapped",
    [
      1588,
      1585
    ]
  ],
  [
    [
      64810,
      64810
    ],
    "mapped",
    [
      1587,
      1585
    ]
  ],
  [
    [
      64811,
      64811
    ],
    "mapped",
    [
      1589,
      1585
    ]
  ],
  [
    [
      64812,
      64812
    ],
    "mapped",
    [
      1590,
      1585
    ]
  ],
  [
    [
      64813,
      64813
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64814,
      64814
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64815,
      64815
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64816,
      64816
    ],
    "mapped",
    [
      1588,
      1605
    ]
  ],
  [
    [
      64817,
      64817
    ],
    "mapped",
    [
      1587,
      1607
    ]
  ],
  [
    [
      64818,
      64818
    ],
    "mapped",
    [
      1588,
      1607
    ]
  ],
  [
    [
      64819,
      64819
    ],
    "mapped",
    [
      1591,
      1605
    ]
  ],
  [
    [
      64820,
      64820
    ],
    "mapped",
    [
      1587,
      1580
    ]
  ],
  [
    [
      64821,
      64821
    ],
    "mapped",
    [
      1587,
      1581
    ]
  ],
  [
    [
      64822,
      64822
    ],
    "mapped",
    [
      1587,
      1582
    ]
  ],
  [
    [
      64823,
      64823
    ],
    "mapped",
    [
      1588,
      1580
    ]
  ],
  [
    [
      64824,
      64824
    ],
    "mapped",
    [
      1588,
      1581
    ]
  ],
  [
    [
      64825,
      64825
    ],
    "mapped",
    [
      1588,
      1582
    ]
  ],
  [
    [
      64826,
      64826
    ],
    "mapped",
    [
      1591,
      1605
    ]
  ],
  [
    [
      64827,
      64827
    ],
    "mapped",
    [
      1592,
      1605
    ]
  ],
  [
    [
      64828,
      64829
    ],
    "mapped",
    [
      1575,
      1611
    ]
  ],
  [
    [
      64830,
      64831
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      64832,
      64847
    ],
    "disallowed"
  ],
  [
    [
      64848,
      64848
    ],
    "mapped",
    [
      1578,
      1580,
      1605
    ]
  ],
  [
    [
      64849,
      64850
    ],
    "mapped",
    [
      1578,
      1581,
      1580
    ]
  ],
  [
    [
      64851,
      64851
    ],
    "mapped",
    [
      1578,
      1581,
      1605
    ]
  ],
  [
    [
      64852,
      64852
    ],
    "mapped",
    [
      1578,
      1582,
      1605
    ]
  ],
  [
    [
      64853,
      64853
    ],
    "mapped",
    [
      1578,
      1605,
      1580
    ]
  ],
  [
    [
      64854,
      64854
    ],
    "mapped",
    [
      1578,
      1605,
      1581
    ]
  ],
  [
    [
      64855,
      64855
    ],
    "mapped",
    [
      1578,
      1605,
      1582
    ]
  ],
  [
    [
      64856,
      64857
    ],
    "mapped",
    [
      1580,
      1605,
      1581
    ]
  ],
  [
    [
      64858,
      64858
    ],
    "mapped",
    [
      1581,
      1605,
      1610
    ]
  ],
  [
    [
      64859,
      64859
    ],
    "mapped",
    [
      1581,
      1605,
      1609
    ]
  ],
  [
    [
      64860,
      64860
    ],
    "mapped",
    [
      1587,
      1581,
      1580
    ]
  ],
  [
    [
      64861,
      64861
    ],
    "mapped",
    [
      1587,
      1580,
      1581
    ]
  ],
  [
    [
      64862,
      64862
    ],
    "mapped",
    [
      1587,
      1580,
      1609
    ]
  ],
  [
    [
      64863,
      64864
    ],
    "mapped",
    [
      1587,
      1605,
      1581
    ]
  ],
  [
    [
      64865,
      64865
    ],
    "mapped",
    [
      1587,
      1605,
      1580
    ]
  ],
  [
    [
      64866,
      64867
    ],
    "mapped",
    [
      1587,
      1605,
      1605
    ]
  ],
  [
    [
      64868,
      64869
    ],
    "mapped",
    [
      1589,
      1581,
      1581
    ]
  ],
  [
    [
      64870,
      64870
    ],
    "mapped",
    [
      1589,
      1605,
      1605
    ]
  ],
  [
    [
      64871,
      64872
    ],
    "mapped",
    [
      1588,
      1581,
      1605
    ]
  ],
  [
    [
      64873,
      64873
    ],
    "mapped",
    [
      1588,
      1580,
      1610
    ]
  ],
  [
    [
      64874,
      64875
    ],
    "mapped",
    [
      1588,
      1605,
      1582
    ]
  ],
  [
    [
      64876,
      64877
    ],
    "mapped",
    [
      1588,
      1605,
      1605
    ]
  ],
  [
    [
      64878,
      64878
    ],
    "mapped",
    [
      1590,
      1581,
      1609
    ]
  ],
  [
    [
      64879,
      64880
    ],
    "mapped",
    [
      1590,
      1582,
      1605
    ]
  ],
  [
    [
      64881,
      64882
    ],
    "mapped",
    [
      1591,
      1605,
      1581
    ]
  ],
  [
    [
      64883,
      64883
    ],
    "mapped",
    [
      1591,
      1605,
      1605
    ]
  ],
  [
    [
      64884,
      64884
    ],
    "mapped",
    [
      1591,
      1605,
      1610
    ]
  ],
  [
    [
      64885,
      64885
    ],
    "mapped",
    [
      1593,
      1580,
      1605
    ]
  ],
  [
    [
      64886,
      64887
    ],
    "mapped",
    [
      1593,
      1605,
      1605
    ]
  ],
  [
    [
      64888,
      64888
    ],
    "mapped",
    [
      1593,
      1605,
      1609
    ]
  ],
  [
    [
      64889,
      64889
    ],
    "mapped",
    [
      1594,
      1605,
      1605
    ]
  ],
  [
    [
      64890,
      64890
    ],
    "mapped",
    [
      1594,
      1605,
      1610
    ]
  ],
  [
    [
      64891,
      64891
    ],
    "mapped",
    [
      1594,
      1605,
      1609
    ]
  ],
  [
    [
      64892,
      64893
    ],
    "mapped",
    [
      1601,
      1582,
      1605
    ]
  ],
  [
    [
      64894,
      64894
    ],
    "mapped",
    [
      1602,
      1605,
      1581
    ]
  ],
  [
    [
      64895,
      64895
    ],
    "mapped",
    [
      1602,
      1605,
      1605
    ]
  ],
  [
    [
      64896,
      64896
    ],
    "mapped",
    [
      1604,
      1581,
      1605
    ]
  ],
  [
    [
      64897,
      64897
    ],
    "mapped",
    [
      1604,
      1581,
      1610
    ]
  ],
  [
    [
      64898,
      64898
    ],
    "mapped",
    [
      1604,
      1581,
      1609
    ]
  ],
  [
    [
      64899,
      64900
    ],
    "mapped",
    [
      1604,
      1580,
      1580
    ]
  ],
  [
    [
      64901,
      64902
    ],
    "mapped",
    [
      1604,
      1582,
      1605
    ]
  ],
  [
    [
      64903,
      64904
    ],
    "mapped",
    [
      1604,
      1605,
      1581
    ]
  ],
  [
    [
      64905,
      64905
    ],
    "mapped",
    [
      1605,
      1581,
      1580
    ]
  ],
  [
    [
      64906,
      64906
    ],
    "mapped",
    [
      1605,
      1581,
      1605
    ]
  ],
  [
    [
      64907,
      64907
    ],
    "mapped",
    [
      1605,
      1581,
      1610
    ]
  ],
  [
    [
      64908,
      64908
    ],
    "mapped",
    [
      1605,
      1580,
      1581
    ]
  ],
  [
    [
      64909,
      64909
    ],
    "mapped",
    [
      1605,
      1580,
      1605
    ]
  ],
  [
    [
      64910,
      64910
    ],
    "mapped",
    [
      1605,
      1582,
      1580
    ]
  ],
  [
    [
      64911,
      64911
    ],
    "mapped",
    [
      1605,
      1582,
      1605
    ]
  ],
  [
    [
      64912,
      64913
    ],
    "disallowed"
  ],
  [
    [
      64914,
      64914
    ],
    "mapped",
    [
      1605,
      1580,
      1582
    ]
  ],
  [
    [
      64915,
      64915
    ],
    "mapped",
    [
      1607,
      1605,
      1580
    ]
  ],
  [
    [
      64916,
      64916
    ],
    "mapped",
    [
      1607,
      1605,
      1605
    ]
  ],
  [
    [
      64917,
      64917
    ],
    "mapped",
    [
      1606,
      1581,
      1605
    ]
  ],
  [
    [
      64918,
      64918
    ],
    "mapped",
    [
      1606,
      1581,
      1609
    ]
  ],
  [
    [
      64919,
      64920
    ],
    "mapped",
    [
      1606,
      1580,
      1605
    ]
  ],
  [
    [
      64921,
      64921
    ],
    "mapped",
    [
      1606,
      1580,
      1609
    ]
  ],
  [
    [
      64922,
      64922
    ],
    "mapped",
    [
      1606,
      1605,
      1610
    ]
  ],
  [
    [
      64923,
      64923
    ],
    "mapped",
    [
      1606,
      1605,
      1609
    ]
  ],
  [
    [
      64924,
      64925
    ],
    "mapped",
    [
      1610,
      1605,
      1605
    ]
  ],
  [
    [
      64926,
      64926
    ],
    "mapped",
    [
      1576,
      1582,
      1610
    ]
  ],
  [
    [
      64927,
      64927
    ],
    "mapped",
    [
      1578,
      1580,
      1610
    ]
  ],
  [
    [
      64928,
      64928
    ],
    "mapped",
    [
      1578,
      1580,
      1609
    ]
  ],
  [
    [
      64929,
      64929
    ],
    "mapped",
    [
      1578,
      1582,
      1610
    ]
  ],
  [
    [
      64930,
      64930
    ],
    "mapped",
    [
      1578,
      1582,
      1609
    ]
  ],
  [
    [
      64931,
      64931
    ],
    "mapped",
    [
      1578,
      1605,
      1610
    ]
  ],
  [
    [
      64932,
      64932
    ],
    "mapped",
    [
      1578,
      1605,
      1609
    ]
  ],
  [
    [
      64933,
      64933
    ],
    "mapped",
    [
      1580,
      1605,
      1610
    ]
  ],
  [
    [
      64934,
      64934
    ],
    "mapped",
    [
      1580,
      1581,
      1609
    ]
  ],
  [
    [
      64935,
      64935
    ],
    "mapped",
    [
      1580,
      1605,
      1609
    ]
  ],
  [
    [
      64936,
      64936
    ],
    "mapped",
    [
      1587,
      1582,
      1609
    ]
  ],
  [
    [
      64937,
      64937
    ],
    "mapped",
    [
      1589,
      1581,
      1610
    ]
  ],
  [
    [
      64938,
      64938
    ],
    "mapped",
    [
      1588,
      1581,
      1610
    ]
  ],
  [
    [
      64939,
      64939
    ],
    "mapped",
    [
      1590,
      1581,
      1610
    ]
  ],
  [
    [
      64940,
      64940
    ],
    "mapped",
    [
      1604,
      1580,
      1610
    ]
  ],
  [
    [
      64941,
      64941
    ],
    "mapped",
    [
      1604,
      1605,
      1610
    ]
  ],
  [
    [
      64942,
      64942
    ],
    "mapped",
    [
      1610,
      1581,
      1610
    ]
  ],
  [
    [
      64943,
      64943
    ],
    "mapped",
    [
      1610,
      1580,
      1610
    ]
  ],
  [
    [
      64944,
      64944
    ],
    "mapped",
    [
      1610,
      1605,
      1610
    ]
  ],
  [
    [
      64945,
      64945
    ],
    "mapped",
    [
      1605,
      1605,
      1610
    ]
  ],
  [
    [
      64946,
      64946
    ],
    "mapped",
    [
      1602,
      1605,
      1610
    ]
  ],
  [
    [
      64947,
      64947
    ],
    "mapped",
    [
      1606,
      1581,
      1610
    ]
  ],
  [
    [
      64948,
      64948
    ],
    "mapped",
    [
      1602,
      1605,
      1581
    ]
  ],
  [
    [
      64949,
      64949
    ],
    "mapped",
    [
      1604,
      1581,
      1605
    ]
  ],
  [
    [
      64950,
      64950
    ],
    "mapped",
    [
      1593,
      1605,
      1610
    ]
  ],
  [
    [
      64951,
      64951
    ],
    "mapped",
    [
      1603,
      1605,
      1610
    ]
  ],
  [
    [
      64952,
      64952
    ],
    "mapped",
    [
      1606,
      1580,
      1581
    ]
  ],
  [
    [
      64953,
      64953
    ],
    "mapped",
    [
      1605,
      1582,
      1610
    ]
  ],
  [
    [
      64954,
      64954
    ],
    "mapped",
    [
      1604,
      1580,
      1605
    ]
  ],
  [
    [
      64955,
      64955
    ],
    "mapped",
    [
      1603,
      1605,
      1605
    ]
  ],
  [
    [
      64956,
      64956
    ],
    "mapped",
    [
      1604,
      1580,
      1605
    ]
  ],
  [
    [
      64957,
      64957
    ],
    "mapped",
    [
      1606,
      1580,
      1581
    ]
  ],
  [
    [
      64958,
      64958
    ],
    "mapped",
    [
      1580,
      1581,
      1610
    ]
  ],
  [
    [
      64959,
      64959
    ],
    "mapped",
    [
      1581,
      1580,
      1610
    ]
  ],
  [
    [
      64960,
      64960
    ],
    "mapped",
    [
      1605,
      1580,
      1610
    ]
  ],
  [
    [
      64961,
      64961
    ],
    "mapped",
    [
      1601,
      1605,
      1610
    ]
  ],
  [
    [
      64962,
      64962
    ],
    "mapped",
    [
      1576,
      1581,
      1610
    ]
  ],
  [
    [
      64963,
      64963
    ],
    "mapped",
    [
      1603,
      1605,
      1605
    ]
  ],
  [
    [
      64964,
      64964
    ],
    "mapped",
    [
      1593,
      1580,
      1605
    ]
  ],
  [
    [
      64965,
      64965
    ],
    "mapped",
    [
      1589,
      1605,
      1605
    ]
  ],
  [
    [
      64966,
      64966
    ],
    "mapped",
    [
      1587,
      1582,
      1610
    ]
  ],
  [
    [
      64967,
      64967
    ],
    "mapped",
    [
      1606,
      1580,
      1610
    ]
  ],
  [
    [
      64968,
      64975
    ],
    "disallowed"
  ],
  [
    [
      64976,
      65007
    ],
    "disallowed"
  ],
  [
    [
      65008,
      65008
    ],
    "mapped",
    [
      1589,
      1604,
      1746
    ]
  ],
  [
    [
      65009,
      65009
    ],
    "mapped",
    [
      1602,
      1604,
      1746
    ]
  ],
  [
    [
      65010,
      65010
    ],
    "mapped",
    [
      1575,
      1604,
      1604,
      1607
    ]
  ],
  [
    [
      65011,
      65011
    ],
    "mapped",
    [
      1575,
      1603,
      1576,
      1585
    ]
  ],
  [
    [
      65012,
      65012
    ],
    "mapped",
    [
      1605,
      1581,
      1605,
      1583
    ]
  ],
  [
    [
      65013,
      65013
    ],
    "mapped",
    [
      1589,
      1604,
      1593,
      1605
    ]
  ],
  [
    [
      65014,
      65014
    ],
    "mapped",
    [
      1585,
      1587,
      1608,
      1604
    ]
  ],
  [
    [
      65015,
      65015
    ],
    "mapped",
    [
      1593,
      1604,
      1610,
      1607
    ]
  ],
  [
    [
      65016,
      65016
    ],
    "mapped",
    [
      1608,
      1587,
      1604,
      1605
    ]
  ],
  [
    [
      65017,
      65017
    ],
    "mapped",
    [
      1589,
      1604,
      1609
    ]
  ],
  [
    [
      65018,
      65018
    ],
    "disallowed_STD3_mapped",
    [
      1589,
      1604,
      1609,
      32,
      1575,
      1604,
      1604,
      1607,
      32,
      1593,
      1604,
      1610,
      1607,
      32,
      1608,
      1587,
      1604,
      1605
    ]
  ],
  [
    [
      65019,
      65019
    ],
    "disallowed_STD3_mapped",
    [
      1580,
      1604,
      32,
      1580,
      1604,
      1575,
      1604,
      1607
    ]
  ],
  [
    [
      65020,
      65020
    ],
    "mapped",
    [
      1585,
      1740,
      1575,
      1604
    ]
  ],
  [
    [
      65021,
      65021
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65022,
      65023
    ],
    "disallowed"
  ],
  [
    [
      65024,
      65039
    ],
    "ignored"
  ],
  [
    [
      65040,
      65040
    ],
    "disallowed_STD3_mapped",
    [
      44
    ]
  ],
  [
    [
      65041,
      65041
    ],
    "mapped",
    [
      12289
    ]
  ],
  [
    [
      65042,
      65042
    ],
    "disallowed"
  ],
  [
    [
      65043,
      65043
    ],
    "disallowed_STD3_mapped",
    [
      58
    ]
  ],
  [
    [
      65044,
      65044
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      65045,
      65045
    ],
    "disallowed_STD3_mapped",
    [
      33
    ]
  ],
  [
    [
      65046,
      65046
    ],
    "disallowed_STD3_mapped",
    [
      63
    ]
  ],
  [
    [
      65047,
      65047
    ],
    "mapped",
    [
      12310
    ]
  ],
  [
    [
      65048,
      65048
    ],
    "mapped",
    [
      12311
    ]
  ],
  [
    [
      65049,
      65049
    ],
    "disallowed"
  ],
  [
    [
      65050,
      65055
    ],
    "disallowed"
  ],
  [
    [
      65056,
      65059
    ],
    "valid"
  ],
  [
    [
      65060,
      65062
    ],
    "valid"
  ],
  [
    [
      65063,
      65069
    ],
    "valid"
  ],
  [
    [
      65070,
      65071
    ],
    "valid"
  ],
  [
    [
      65072,
      65072
    ],
    "disallowed"
  ],
  [
    [
      65073,
      65073
    ],
    "mapped",
    [
      8212
    ]
  ],
  [
    [
      65074,
      65074
    ],
    "mapped",
    [
      8211
    ]
  ],
  [
    [
      65075,
      65076
    ],
    "disallowed_STD3_mapped",
    [
      95
    ]
  ],
  [
    [
      65077,
      65077
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      65078,
      65078
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      65079,
      65079
    ],
    "disallowed_STD3_mapped",
    [
      123
    ]
  ],
  [
    [
      65080,
      65080
    ],
    "disallowed_STD3_mapped",
    [
      125
    ]
  ],
  [
    [
      65081,
      65081
    ],
    "mapped",
    [
      12308
    ]
  ],
  [
    [
      65082,
      65082
    ],
    "mapped",
    [
      12309
    ]
  ],
  [
    [
      65083,
      65083
    ],
    "mapped",
    [
      12304
    ]
  ],
  [
    [
      65084,
      65084
    ],
    "mapped",
    [
      12305
    ]
  ],
  [
    [
      65085,
      65085
    ],
    "mapped",
    [
      12298
    ]
  ],
  [
    [
      65086,
      65086
    ],
    "mapped",
    [
      12299
    ]
  ],
  [
    [
      65087,
      65087
    ],
    "mapped",
    [
      12296
    ]
  ],
  [
    [
      65088,
      65088
    ],
    "mapped",
    [
      12297
    ]
  ],
  [
    [
      65089,
      65089
    ],
    "mapped",
    [
      12300
    ]
  ],
  [
    [
      65090,
      65090
    ],
    "mapped",
    [
      12301
    ]
  ],
  [
    [
      65091,
      65091
    ],
    "mapped",
    [
      12302
    ]
  ],
  [
    [
      65092,
      65092
    ],
    "mapped",
    [
      12303
    ]
  ],
  [
    [
      65093,
      65094
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65095,
      65095
    ],
    "disallowed_STD3_mapped",
    [
      91
    ]
  ],
  [
    [
      65096,
      65096
    ],
    "disallowed_STD3_mapped",
    [
      93
    ]
  ],
  [
    [
      65097,
      65100
    ],
    "disallowed_STD3_mapped",
    [
      32,
      773
    ]
  ],
  [
    [
      65101,
      65103
    ],
    "disallowed_STD3_mapped",
    [
      95
    ]
  ],
  [
    [
      65104,
      65104
    ],
    "disallowed_STD3_mapped",
    [
      44
    ]
  ],
  [
    [
      65105,
      65105
    ],
    "mapped",
    [
      12289
    ]
  ],
  [
    [
      65106,
      65106
    ],
    "disallowed"
  ],
  [
    [
      65107,
      65107
    ],
    "disallowed"
  ],
  [
    [
      65108,
      65108
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      65109,
      65109
    ],
    "disallowed_STD3_mapped",
    [
      58
    ]
  ],
  [
    [
      65110,
      65110
    ],
    "disallowed_STD3_mapped",
    [
      63
    ]
  ],
  [
    [
      65111,
      65111
    ],
    "disallowed_STD3_mapped",
    [
      33
    ]
  ],
  [
    [
      65112,
      65112
    ],
    "mapped",
    [
      8212
    ]
  ],
  [
    [
      65113,
      65113
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      65114,
      65114
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      65115,
      65115
    ],
    "disallowed_STD3_mapped",
    [
      123
    ]
  ],
  [
    [
      65116,
      65116
    ],
    "disallowed_STD3_mapped",
    [
      125
    ]
  ],
  [
    [
      65117,
      65117
    ],
    "mapped",
    [
      12308
    ]
  ],
  [
    [
      65118,
      65118
    ],
    "mapped",
    [
      12309
    ]
  ],
  [
    [
      65119,
      65119
    ],
    "disallowed_STD3_mapped",
    [
      35
    ]
  ],
  [
    [
      65120,
      65120
    ],
    "disallowed_STD3_mapped",
    [
      38
    ]
  ],
  [
    [
      65121,
      65121
    ],
    "disallowed_STD3_mapped",
    [
      42
    ]
  ],
  [
    [
      65122,
      65122
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      65123,
      65123
    ],
    "mapped",
    [
      45
    ]
  ],
  [
    [
      65124,
      65124
    ],
    "disallowed_STD3_mapped",
    [
      60
    ]
  ],
  [
    [
      65125,
      65125
    ],
    "disallowed_STD3_mapped",
    [
      62
    ]
  ],
  [
    [
      65126,
      65126
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      65127,
      65127
    ],
    "disallowed"
  ],
  [
    [
      65128,
      65128
    ],
    "disallowed_STD3_mapped",
    [
      92
    ]
  ],
  [
    [
      65129,
      65129
    ],
    "disallowed_STD3_mapped",
    [
      36
    ]
  ],
  [
    [
      65130,
      65130
    ],
    "disallowed_STD3_mapped",
    [
      37
    ]
  ],
  [
    [
      65131,
      65131
    ],
    "disallowed_STD3_mapped",
    [
      64
    ]
  ],
  [
    [
      65132,
      65135
    ],
    "disallowed"
  ],
  [
    [
      65136,
      65136
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1611
    ]
  ],
  [
    [
      65137,
      65137
    ],
    "mapped",
    [
      1600,
      1611
    ]
  ],
  [
    [
      65138,
      65138
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1612
    ]
  ],
  [
    [
      65139,
      65139
    ],
    "valid"
  ],
  [
    [
      65140,
      65140
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1613
    ]
  ],
  [
    [
      65141,
      65141
    ],
    "disallowed"
  ],
  [
    [
      65142,
      65142
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1614
    ]
  ],
  [
    [
      65143,
      65143
    ],
    "mapped",
    [
      1600,
      1614
    ]
  ],
  [
    [
      65144,
      65144
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1615
    ]
  ],
  [
    [
      65145,
      65145
    ],
    "mapped",
    [
      1600,
      1615
    ]
  ],
  [
    [
      65146,
      65146
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1616
    ]
  ],
  [
    [
      65147,
      65147
    ],
    "mapped",
    [
      1600,
      1616
    ]
  ],
  [
    [
      65148,
      65148
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1617
    ]
  ],
  [
    [
      65149,
      65149
    ],
    "mapped",
    [
      1600,
      1617
    ]
  ],
  [
    [
      65150,
      65150
    ],
    "disallowed_STD3_mapped",
    [
      32,
      1618
    ]
  ],
  [
    [
      65151,
      65151
    ],
    "mapped",
    [
      1600,
      1618
    ]
  ],
  [
    [
      65152,
      65152
    ],
    "mapped",
    [
      1569
    ]
  ],
  [
    [
      65153,
      65154
    ],
    "mapped",
    [
      1570
    ]
  ],
  [
    [
      65155,
      65156
    ],
    "mapped",
    [
      1571
    ]
  ],
  [
    [
      65157,
      65158
    ],
    "mapped",
    [
      1572
    ]
  ],
  [
    [
      65159,
      65160
    ],
    "mapped",
    [
      1573
    ]
  ],
  [
    [
      65161,
      65164
    ],
    "mapped",
    [
      1574
    ]
  ],
  [
    [
      65165,
      65166
    ],
    "mapped",
    [
      1575
    ]
  ],
  [
    [
      65167,
      65170
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      65171,
      65172
    ],
    "mapped",
    [
      1577
    ]
  ],
  [
    [
      65173,
      65176
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      65177,
      65180
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      65181,
      65184
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      65185,
      65188
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      65189,
      65192
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      65193,
      65194
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      65195,
      65196
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      65197,
      65198
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      65199,
      65200
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      65201,
      65204
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      65205,
      65208
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      65209,
      65212
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      65213,
      65216
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      65217,
      65220
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      65221,
      65224
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      65225,
      65228
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      65229,
      65232
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      65233,
      65236
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      65237,
      65240
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      65241,
      65244
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      65245,
      65248
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      65249,
      65252
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      65253,
      65256
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      65257,
      65260
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      65261,
      65262
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      65263,
      65264
    ],
    "mapped",
    [
      1609
    ]
  ],
  [
    [
      65265,
      65268
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      65269,
      65270
    ],
    "mapped",
    [
      1604,
      1570
    ]
  ],
  [
    [
      65271,
      65272
    ],
    "mapped",
    [
      1604,
      1571
    ]
  ],
  [
    [
      65273,
      65274
    ],
    "mapped",
    [
      1604,
      1573
    ]
  ],
  [
    [
      65275,
      65276
    ],
    "mapped",
    [
      1604,
      1575
    ]
  ],
  [
    [
      65277,
      65278
    ],
    "disallowed"
  ],
  [
    [
      65279,
      65279
    ],
    "ignored"
  ],
  [
    [
      65280,
      65280
    ],
    "disallowed"
  ],
  [
    [
      65281,
      65281
    ],
    "disallowed_STD3_mapped",
    [
      33
    ]
  ],
  [
    [
      65282,
      65282
    ],
    "disallowed_STD3_mapped",
    [
      34
    ]
  ],
  [
    [
      65283,
      65283
    ],
    "disallowed_STD3_mapped",
    [
      35
    ]
  ],
  [
    [
      65284,
      65284
    ],
    "disallowed_STD3_mapped",
    [
      36
    ]
  ],
  [
    [
      65285,
      65285
    ],
    "disallowed_STD3_mapped",
    [
      37
    ]
  ],
  [
    [
      65286,
      65286
    ],
    "disallowed_STD3_mapped",
    [
      38
    ]
  ],
  [
    [
      65287,
      65287
    ],
    "disallowed_STD3_mapped",
    [
      39
    ]
  ],
  [
    [
      65288,
      65288
    ],
    "disallowed_STD3_mapped",
    [
      40
    ]
  ],
  [
    [
      65289,
      65289
    ],
    "disallowed_STD3_mapped",
    [
      41
    ]
  ],
  [
    [
      65290,
      65290
    ],
    "disallowed_STD3_mapped",
    [
      42
    ]
  ],
  [
    [
      65291,
      65291
    ],
    "disallowed_STD3_mapped",
    [
      43
    ]
  ],
  [
    [
      65292,
      65292
    ],
    "disallowed_STD3_mapped",
    [
      44
    ]
  ],
  [
    [
      65293,
      65293
    ],
    "mapped",
    [
      45
    ]
  ],
  [
    [
      65294,
      65294
    ],
    "mapped",
    [
      46
    ]
  ],
  [
    [
      65295,
      65295
    ],
    "disallowed_STD3_mapped",
    [
      47
    ]
  ],
  [
    [
      65296,
      65296
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      65297,
      65297
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      65298,
      65298
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      65299,
      65299
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      65300,
      65300
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      65301,
      65301
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      65302,
      65302
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      65303,
      65303
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      65304,
      65304
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      65305,
      65305
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      65306,
      65306
    ],
    "disallowed_STD3_mapped",
    [
      58
    ]
  ],
  [
    [
      65307,
      65307
    ],
    "disallowed_STD3_mapped",
    [
      59
    ]
  ],
  [
    [
      65308,
      65308
    ],
    "disallowed_STD3_mapped",
    [
      60
    ]
  ],
  [
    [
      65309,
      65309
    ],
    "disallowed_STD3_mapped",
    [
      61
    ]
  ],
  [
    [
      65310,
      65310
    ],
    "disallowed_STD3_mapped",
    [
      62
    ]
  ],
  [
    [
      65311,
      65311
    ],
    "disallowed_STD3_mapped",
    [
      63
    ]
  ],
  [
    [
      65312,
      65312
    ],
    "disallowed_STD3_mapped",
    [
      64
    ]
  ],
  [
    [
      65313,
      65313
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      65314,
      65314
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      65315,
      65315
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      65316,
      65316
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      65317,
      65317
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      65318,
      65318
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      65319,
      65319
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      65320,
      65320
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      65321,
      65321
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      65322,
      65322
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      65323,
      65323
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      65324,
      65324
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      65325,
      65325
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      65326,
      65326
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      65327,
      65327
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      65328,
      65328
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      65329,
      65329
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      65330,
      65330
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      65331,
      65331
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      65332,
      65332
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      65333,
      65333
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      65334,
      65334
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      65335,
      65335
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      65336,
      65336
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      65337,
      65337
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      65338,
      65338
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      65339,
      65339
    ],
    "disallowed_STD3_mapped",
    [
      91
    ]
  ],
  [
    [
      65340,
      65340
    ],
    "disallowed_STD3_mapped",
    [
      92
    ]
  ],
  [
    [
      65341,
      65341
    ],
    "disallowed_STD3_mapped",
    [
      93
    ]
  ],
  [
    [
      65342,
      65342
    ],
    "disallowed_STD3_mapped",
    [
      94
    ]
  ],
  [
    [
      65343,
      65343
    ],
    "disallowed_STD3_mapped",
    [
      95
    ]
  ],
  [
    [
      65344,
      65344
    ],
    "disallowed_STD3_mapped",
    [
      96
    ]
  ],
  [
    [
      65345,
      65345
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      65346,
      65346
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      65347,
      65347
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      65348,
      65348
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      65349,
      65349
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      65350,
      65350
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      65351,
      65351
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      65352,
      65352
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      65353,
      65353
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      65354,
      65354
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      65355,
      65355
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      65356,
      65356
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      65357,
      65357
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      65358,
      65358
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      65359,
      65359
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      65360,
      65360
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      65361,
      65361
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      65362,
      65362
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      65363,
      65363
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      65364,
      65364
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      65365,
      65365
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      65366,
      65366
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      65367,
      65367
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      65368,
      65368
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      65369,
      65369
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      65370,
      65370
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      65371,
      65371
    ],
    "disallowed_STD3_mapped",
    [
      123
    ]
  ],
  [
    [
      65372,
      65372
    ],
    "disallowed_STD3_mapped",
    [
      124
    ]
  ],
  [
    [
      65373,
      65373
    ],
    "disallowed_STD3_mapped",
    [
      125
    ]
  ],
  [
    [
      65374,
      65374
    ],
    "disallowed_STD3_mapped",
    [
      126
    ]
  ],
  [
    [
      65375,
      65375
    ],
    "mapped",
    [
      10629
    ]
  ],
  [
    [
      65376,
      65376
    ],
    "mapped",
    [
      10630
    ]
  ],
  [
    [
      65377,
      65377
    ],
    "mapped",
    [
      46
    ]
  ],
  [
    [
      65378,
      65378
    ],
    "mapped",
    [
      12300
    ]
  ],
  [
    [
      65379,
      65379
    ],
    "mapped",
    [
      12301
    ]
  ],
  [
    [
      65380,
      65380
    ],
    "mapped",
    [
      12289
    ]
  ],
  [
    [
      65381,
      65381
    ],
    "mapped",
    [
      12539
    ]
  ],
  [
    [
      65382,
      65382
    ],
    "mapped",
    [
      12530
    ]
  ],
  [
    [
      65383,
      65383
    ],
    "mapped",
    [
      12449
    ]
  ],
  [
    [
      65384,
      65384
    ],
    "mapped",
    [
      12451
    ]
  ],
  [
    [
      65385,
      65385
    ],
    "mapped",
    [
      12453
    ]
  ],
  [
    [
      65386,
      65386
    ],
    "mapped",
    [
      12455
    ]
  ],
  [
    [
      65387,
      65387
    ],
    "mapped",
    [
      12457
    ]
  ],
  [
    [
      65388,
      65388
    ],
    "mapped",
    [
      12515
    ]
  ],
  [
    [
      65389,
      65389
    ],
    "mapped",
    [
      12517
    ]
  ],
  [
    [
      65390,
      65390
    ],
    "mapped",
    [
      12519
    ]
  ],
  [
    [
      65391,
      65391
    ],
    "mapped",
    [
      12483
    ]
  ],
  [
    [
      65392,
      65392
    ],
    "mapped",
    [
      12540
    ]
  ],
  [
    [
      65393,
      65393
    ],
    "mapped",
    [
      12450
    ]
  ],
  [
    [
      65394,
      65394
    ],
    "mapped",
    [
      12452
    ]
  ],
  [
    [
      65395,
      65395
    ],
    "mapped",
    [
      12454
    ]
  ],
  [
    [
      65396,
      65396
    ],
    "mapped",
    [
      12456
    ]
  ],
  [
    [
      65397,
      65397
    ],
    "mapped",
    [
      12458
    ]
  ],
  [
    [
      65398,
      65398
    ],
    "mapped",
    [
      12459
    ]
  ],
  [
    [
      65399,
      65399
    ],
    "mapped",
    [
      12461
    ]
  ],
  [
    [
      65400,
      65400
    ],
    "mapped",
    [
      12463
    ]
  ],
  [
    [
      65401,
      65401
    ],
    "mapped",
    [
      12465
    ]
  ],
  [
    [
      65402,
      65402
    ],
    "mapped",
    [
      12467
    ]
  ],
  [
    [
      65403,
      65403
    ],
    "mapped",
    [
      12469
    ]
  ],
  [
    [
      65404,
      65404
    ],
    "mapped",
    [
      12471
    ]
  ],
  [
    [
      65405,
      65405
    ],
    "mapped",
    [
      12473
    ]
  ],
  [
    [
      65406,
      65406
    ],
    "mapped",
    [
      12475
    ]
  ],
  [
    [
      65407,
      65407
    ],
    "mapped",
    [
      12477
    ]
  ],
  [
    [
      65408,
      65408
    ],
    "mapped",
    [
      12479
    ]
  ],
  [
    [
      65409,
      65409
    ],
    "mapped",
    [
      12481
    ]
  ],
  [
    [
      65410,
      65410
    ],
    "mapped",
    [
      12484
    ]
  ],
  [
    [
      65411,
      65411
    ],
    "mapped",
    [
      12486
    ]
  ],
  [
    [
      65412,
      65412
    ],
    "mapped",
    [
      12488
    ]
  ],
  [
    [
      65413,
      65413
    ],
    "mapped",
    [
      12490
    ]
  ],
  [
    [
      65414,
      65414
    ],
    "mapped",
    [
      12491
    ]
  ],
  [
    [
      65415,
      65415
    ],
    "mapped",
    [
      12492
    ]
  ],
  [
    [
      65416,
      65416
    ],
    "mapped",
    [
      12493
    ]
  ],
  [
    [
      65417,
      65417
    ],
    "mapped",
    [
      12494
    ]
  ],
  [
    [
      65418,
      65418
    ],
    "mapped",
    [
      12495
    ]
  ],
  [
    [
      65419,
      65419
    ],
    "mapped",
    [
      12498
    ]
  ],
  [
    [
      65420,
      65420
    ],
    "mapped",
    [
      12501
    ]
  ],
  [
    [
      65421,
      65421
    ],
    "mapped",
    [
      12504
    ]
  ],
  [
    [
      65422,
      65422
    ],
    "mapped",
    [
      12507
    ]
  ],
  [
    [
      65423,
      65423
    ],
    "mapped",
    [
      12510
    ]
  ],
  [
    [
      65424,
      65424
    ],
    "mapped",
    [
      12511
    ]
  ],
  [
    [
      65425,
      65425
    ],
    "mapped",
    [
      12512
    ]
  ],
  [
    [
      65426,
      65426
    ],
    "mapped",
    [
      12513
    ]
  ],
  [
    [
      65427,
      65427
    ],
    "mapped",
    [
      12514
    ]
  ],
  [
    [
      65428,
      65428
    ],
    "mapped",
    [
      12516
    ]
  ],
  [
    [
      65429,
      65429
    ],
    "mapped",
    [
      12518
    ]
  ],
  [
    [
      65430,
      65430
    ],
    "mapped",
    [
      12520
    ]
  ],
  [
    [
      65431,
      65431
    ],
    "mapped",
    [
      12521
    ]
  ],
  [
    [
      65432,
      65432
    ],
    "mapped",
    [
      12522
    ]
  ],
  [
    [
      65433,
      65433
    ],
    "mapped",
    [
      12523
    ]
  ],
  [
    [
      65434,
      65434
    ],
    "mapped",
    [
      12524
    ]
  ],
  [
    [
      65435,
      65435
    ],
    "mapped",
    [
      12525
    ]
  ],
  [
    [
      65436,
      65436
    ],
    "mapped",
    [
      12527
    ]
  ],
  [
    [
      65437,
      65437
    ],
    "mapped",
    [
      12531
    ]
  ],
  [
    [
      65438,
      65438
    ],
    "mapped",
    [
      12441
    ]
  ],
  [
    [
      65439,
      65439
    ],
    "mapped",
    [
      12442
    ]
  ],
  [
    [
      65440,
      65440
    ],
    "disallowed"
  ],
  [
    [
      65441,
      65441
    ],
    "mapped",
    [
      4352
    ]
  ],
  [
    [
      65442,
      65442
    ],
    "mapped",
    [
      4353
    ]
  ],
  [
    [
      65443,
      65443
    ],
    "mapped",
    [
      4522
    ]
  ],
  [
    [
      65444,
      65444
    ],
    "mapped",
    [
      4354
    ]
  ],
  [
    [
      65445,
      65445
    ],
    "mapped",
    [
      4524
    ]
  ],
  [
    [
      65446,
      65446
    ],
    "mapped",
    [
      4525
    ]
  ],
  [
    [
      65447,
      65447
    ],
    "mapped",
    [
      4355
    ]
  ],
  [
    [
      65448,
      65448
    ],
    "mapped",
    [
      4356
    ]
  ],
  [
    [
      65449,
      65449
    ],
    "mapped",
    [
      4357
    ]
  ],
  [
    [
      65450,
      65450
    ],
    "mapped",
    [
      4528
    ]
  ],
  [
    [
      65451,
      65451
    ],
    "mapped",
    [
      4529
    ]
  ],
  [
    [
      65452,
      65452
    ],
    "mapped",
    [
      4530
    ]
  ],
  [
    [
      65453,
      65453
    ],
    "mapped",
    [
      4531
    ]
  ],
  [
    [
      65454,
      65454
    ],
    "mapped",
    [
      4532
    ]
  ],
  [
    [
      65455,
      65455
    ],
    "mapped",
    [
      4533
    ]
  ],
  [
    [
      65456,
      65456
    ],
    "mapped",
    [
      4378
    ]
  ],
  [
    [
      65457,
      65457
    ],
    "mapped",
    [
      4358
    ]
  ],
  [
    [
      65458,
      65458
    ],
    "mapped",
    [
      4359
    ]
  ],
  [
    [
      65459,
      65459
    ],
    "mapped",
    [
      4360
    ]
  ],
  [
    [
      65460,
      65460
    ],
    "mapped",
    [
      4385
    ]
  ],
  [
    [
      65461,
      65461
    ],
    "mapped",
    [
      4361
    ]
  ],
  [
    [
      65462,
      65462
    ],
    "mapped",
    [
      4362
    ]
  ],
  [
    [
      65463,
      65463
    ],
    "mapped",
    [
      4363
    ]
  ],
  [
    [
      65464,
      65464
    ],
    "mapped",
    [
      4364
    ]
  ],
  [
    [
      65465,
      65465
    ],
    "mapped",
    [
      4365
    ]
  ],
  [
    [
      65466,
      65466
    ],
    "mapped",
    [
      4366
    ]
  ],
  [
    [
      65467,
      65467
    ],
    "mapped",
    [
      4367
    ]
  ],
  [
    [
      65468,
      65468
    ],
    "mapped",
    [
      4368
    ]
  ],
  [
    [
      65469,
      65469
    ],
    "mapped",
    [
      4369
    ]
  ],
  [
    [
      65470,
      65470
    ],
    "mapped",
    [
      4370
    ]
  ],
  [
    [
      65471,
      65473
    ],
    "disallowed"
  ],
  [
    [
      65474,
      65474
    ],
    "mapped",
    [
      4449
    ]
  ],
  [
    [
      65475,
      65475
    ],
    "mapped",
    [
      4450
    ]
  ],
  [
    [
      65476,
      65476
    ],
    "mapped",
    [
      4451
    ]
  ],
  [
    [
      65477,
      65477
    ],
    "mapped",
    [
      4452
    ]
  ],
  [
    [
      65478,
      65478
    ],
    "mapped",
    [
      4453
    ]
  ],
  [
    [
      65479,
      65479
    ],
    "mapped",
    [
      4454
    ]
  ],
  [
    [
      65480,
      65481
    ],
    "disallowed"
  ],
  [
    [
      65482,
      65482
    ],
    "mapped",
    [
      4455
    ]
  ],
  [
    [
      65483,
      65483
    ],
    "mapped",
    [
      4456
    ]
  ],
  [
    [
      65484,
      65484
    ],
    "mapped",
    [
      4457
    ]
  ],
  [
    [
      65485,
      65485
    ],
    "mapped",
    [
      4458
    ]
  ],
  [
    [
      65486,
      65486
    ],
    "mapped",
    [
      4459
    ]
  ],
  [
    [
      65487,
      65487
    ],
    "mapped",
    [
      4460
    ]
  ],
  [
    [
      65488,
      65489
    ],
    "disallowed"
  ],
  [
    [
      65490,
      65490
    ],
    "mapped",
    [
      4461
    ]
  ],
  [
    [
      65491,
      65491
    ],
    "mapped",
    [
      4462
    ]
  ],
  [
    [
      65492,
      65492
    ],
    "mapped",
    [
      4463
    ]
  ],
  [
    [
      65493,
      65493
    ],
    "mapped",
    [
      4464
    ]
  ],
  [
    [
      65494,
      65494
    ],
    "mapped",
    [
      4465
    ]
  ],
  [
    [
      65495,
      65495
    ],
    "mapped",
    [
      4466
    ]
  ],
  [
    [
      65496,
      65497
    ],
    "disallowed"
  ],
  [
    [
      65498,
      65498
    ],
    "mapped",
    [
      4467
    ]
  ],
  [
    [
      65499,
      65499
    ],
    "mapped",
    [
      4468
    ]
  ],
  [
    [
      65500,
      65500
    ],
    "mapped",
    [
      4469
    ]
  ],
  [
    [
      65501,
      65503
    ],
    "disallowed"
  ],
  [
    [
      65504,
      65504
    ],
    "mapped",
    [
      162
    ]
  ],
  [
    [
      65505,
      65505
    ],
    "mapped",
    [
      163
    ]
  ],
  [
    [
      65506,
      65506
    ],
    "mapped",
    [
      172
    ]
  ],
  [
    [
      65507,
      65507
    ],
    "disallowed_STD3_mapped",
    [
      32,
      772
    ]
  ],
  [
    [
      65508,
      65508
    ],
    "mapped",
    [
      166
    ]
  ],
  [
    [
      65509,
      65509
    ],
    "mapped",
    [
      165
    ]
  ],
  [
    [
      65510,
      65510
    ],
    "mapped",
    [
      8361
    ]
  ],
  [
    [
      65511,
      65511
    ],
    "disallowed"
  ],
  [
    [
      65512,
      65512
    ],
    "mapped",
    [
      9474
    ]
  ],
  [
    [
      65513,
      65513
    ],
    "mapped",
    [
      8592
    ]
  ],
  [
    [
      65514,
      65514
    ],
    "mapped",
    [
      8593
    ]
  ],
  [
    [
      65515,
      65515
    ],
    "mapped",
    [
      8594
    ]
  ],
  [
    [
      65516,
      65516
    ],
    "mapped",
    [
      8595
    ]
  ],
  [
    [
      65517,
      65517
    ],
    "mapped",
    [
      9632
    ]
  ],
  [
    [
      65518,
      65518
    ],
    "mapped",
    [
      9675
    ]
  ],
  [
    [
      65519,
      65528
    ],
    "disallowed"
  ],
  [
    [
      65529,
      65531
    ],
    "disallowed"
  ],
  [
    [
      65532,
      65532
    ],
    "disallowed"
  ],
  [
    [
      65533,
      65533
    ],
    "disallowed"
  ],
  [
    [
      65534,
      65535
    ],
    "disallowed"
  ],
  [
    [
      65536,
      65547
    ],
    "valid"
  ],
  [
    [
      65548,
      65548
    ],
    "disallowed"
  ],
  [
    [
      65549,
      65574
    ],
    "valid"
  ],
  [
    [
      65575,
      65575
    ],
    "disallowed"
  ],
  [
    [
      65576,
      65594
    ],
    "valid"
  ],
  [
    [
      65595,
      65595
    ],
    "disallowed"
  ],
  [
    [
      65596,
      65597
    ],
    "valid"
  ],
  [
    [
      65598,
      65598
    ],
    "disallowed"
  ],
  [
    [
      65599,
      65613
    ],
    "valid"
  ],
  [
    [
      65614,
      65615
    ],
    "disallowed"
  ],
  [
    [
      65616,
      65629
    ],
    "valid"
  ],
  [
    [
      65630,
      65663
    ],
    "disallowed"
  ],
  [
    [
      65664,
      65786
    ],
    "valid"
  ],
  [
    [
      65787,
      65791
    ],
    "disallowed"
  ],
  [
    [
      65792,
      65794
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65795,
      65798
    ],
    "disallowed"
  ],
  [
    [
      65799,
      65843
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65844,
      65846
    ],
    "disallowed"
  ],
  [
    [
      65847,
      65855
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65856,
      65930
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65931,
      65932
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65933,
      65935
    ],
    "disallowed"
  ],
  [
    [
      65936,
      65947
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65948,
      65951
    ],
    "disallowed"
  ],
  [
    [
      65952,
      65952
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      65953,
      65999
    ],
    "disallowed"
  ],
  [
    [
      66e3,
      66044
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66045,
      66045
    ],
    "valid"
  ],
  [
    [
      66046,
      66175
    ],
    "disallowed"
  ],
  [
    [
      66176,
      66204
    ],
    "valid"
  ],
  [
    [
      66205,
      66207
    ],
    "disallowed"
  ],
  [
    [
      66208,
      66256
    ],
    "valid"
  ],
  [
    [
      66257,
      66271
    ],
    "disallowed"
  ],
  [
    [
      66272,
      66272
    ],
    "valid"
  ],
  [
    [
      66273,
      66299
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66300,
      66303
    ],
    "disallowed"
  ],
  [
    [
      66304,
      66334
    ],
    "valid"
  ],
  [
    [
      66335,
      66335
    ],
    "valid"
  ],
  [
    [
      66336,
      66339
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66340,
      66351
    ],
    "disallowed"
  ],
  [
    [
      66352,
      66368
    ],
    "valid"
  ],
  [
    [
      66369,
      66369
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66370,
      66377
    ],
    "valid"
  ],
  [
    [
      66378,
      66378
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66379,
      66383
    ],
    "disallowed"
  ],
  [
    [
      66384,
      66426
    ],
    "valid"
  ],
  [
    [
      66427,
      66431
    ],
    "disallowed"
  ],
  [
    [
      66432,
      66461
    ],
    "valid"
  ],
  [
    [
      66462,
      66462
    ],
    "disallowed"
  ],
  [
    [
      66463,
      66463
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66464,
      66499
    ],
    "valid"
  ],
  [
    [
      66500,
      66503
    ],
    "disallowed"
  ],
  [
    [
      66504,
      66511
    ],
    "valid"
  ],
  [
    [
      66512,
      66517
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66518,
      66559
    ],
    "disallowed"
  ],
  [
    [
      66560,
      66560
    ],
    "mapped",
    [
      66600
    ]
  ],
  [
    [
      66561,
      66561
    ],
    "mapped",
    [
      66601
    ]
  ],
  [
    [
      66562,
      66562
    ],
    "mapped",
    [
      66602
    ]
  ],
  [
    [
      66563,
      66563
    ],
    "mapped",
    [
      66603
    ]
  ],
  [
    [
      66564,
      66564
    ],
    "mapped",
    [
      66604
    ]
  ],
  [
    [
      66565,
      66565
    ],
    "mapped",
    [
      66605
    ]
  ],
  [
    [
      66566,
      66566
    ],
    "mapped",
    [
      66606
    ]
  ],
  [
    [
      66567,
      66567
    ],
    "mapped",
    [
      66607
    ]
  ],
  [
    [
      66568,
      66568
    ],
    "mapped",
    [
      66608
    ]
  ],
  [
    [
      66569,
      66569
    ],
    "mapped",
    [
      66609
    ]
  ],
  [
    [
      66570,
      66570
    ],
    "mapped",
    [
      66610
    ]
  ],
  [
    [
      66571,
      66571
    ],
    "mapped",
    [
      66611
    ]
  ],
  [
    [
      66572,
      66572
    ],
    "mapped",
    [
      66612
    ]
  ],
  [
    [
      66573,
      66573
    ],
    "mapped",
    [
      66613
    ]
  ],
  [
    [
      66574,
      66574
    ],
    "mapped",
    [
      66614
    ]
  ],
  [
    [
      66575,
      66575
    ],
    "mapped",
    [
      66615
    ]
  ],
  [
    [
      66576,
      66576
    ],
    "mapped",
    [
      66616
    ]
  ],
  [
    [
      66577,
      66577
    ],
    "mapped",
    [
      66617
    ]
  ],
  [
    [
      66578,
      66578
    ],
    "mapped",
    [
      66618
    ]
  ],
  [
    [
      66579,
      66579
    ],
    "mapped",
    [
      66619
    ]
  ],
  [
    [
      66580,
      66580
    ],
    "mapped",
    [
      66620
    ]
  ],
  [
    [
      66581,
      66581
    ],
    "mapped",
    [
      66621
    ]
  ],
  [
    [
      66582,
      66582
    ],
    "mapped",
    [
      66622
    ]
  ],
  [
    [
      66583,
      66583
    ],
    "mapped",
    [
      66623
    ]
  ],
  [
    [
      66584,
      66584
    ],
    "mapped",
    [
      66624
    ]
  ],
  [
    [
      66585,
      66585
    ],
    "mapped",
    [
      66625
    ]
  ],
  [
    [
      66586,
      66586
    ],
    "mapped",
    [
      66626
    ]
  ],
  [
    [
      66587,
      66587
    ],
    "mapped",
    [
      66627
    ]
  ],
  [
    [
      66588,
      66588
    ],
    "mapped",
    [
      66628
    ]
  ],
  [
    [
      66589,
      66589
    ],
    "mapped",
    [
      66629
    ]
  ],
  [
    [
      66590,
      66590
    ],
    "mapped",
    [
      66630
    ]
  ],
  [
    [
      66591,
      66591
    ],
    "mapped",
    [
      66631
    ]
  ],
  [
    [
      66592,
      66592
    ],
    "mapped",
    [
      66632
    ]
  ],
  [
    [
      66593,
      66593
    ],
    "mapped",
    [
      66633
    ]
  ],
  [
    [
      66594,
      66594
    ],
    "mapped",
    [
      66634
    ]
  ],
  [
    [
      66595,
      66595
    ],
    "mapped",
    [
      66635
    ]
  ],
  [
    [
      66596,
      66596
    ],
    "mapped",
    [
      66636
    ]
  ],
  [
    [
      66597,
      66597
    ],
    "mapped",
    [
      66637
    ]
  ],
  [
    [
      66598,
      66598
    ],
    "mapped",
    [
      66638
    ]
  ],
  [
    [
      66599,
      66599
    ],
    "mapped",
    [
      66639
    ]
  ],
  [
    [
      66600,
      66637
    ],
    "valid"
  ],
  [
    [
      66638,
      66717
    ],
    "valid"
  ],
  [
    [
      66718,
      66719
    ],
    "disallowed"
  ],
  [
    [
      66720,
      66729
    ],
    "valid"
  ],
  [
    [
      66730,
      66815
    ],
    "disallowed"
  ],
  [
    [
      66816,
      66855
    ],
    "valid"
  ],
  [
    [
      66856,
      66863
    ],
    "disallowed"
  ],
  [
    [
      66864,
      66915
    ],
    "valid"
  ],
  [
    [
      66916,
      66926
    ],
    "disallowed"
  ],
  [
    [
      66927,
      66927
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      66928,
      67071
    ],
    "disallowed"
  ],
  [
    [
      67072,
      67382
    ],
    "valid"
  ],
  [
    [
      67383,
      67391
    ],
    "disallowed"
  ],
  [
    [
      67392,
      67413
    ],
    "valid"
  ],
  [
    [
      67414,
      67423
    ],
    "disallowed"
  ],
  [
    [
      67424,
      67431
    ],
    "valid"
  ],
  [
    [
      67432,
      67583
    ],
    "disallowed"
  ],
  [
    [
      67584,
      67589
    ],
    "valid"
  ],
  [
    [
      67590,
      67591
    ],
    "disallowed"
  ],
  [
    [
      67592,
      67592
    ],
    "valid"
  ],
  [
    [
      67593,
      67593
    ],
    "disallowed"
  ],
  [
    [
      67594,
      67637
    ],
    "valid"
  ],
  [
    [
      67638,
      67638
    ],
    "disallowed"
  ],
  [
    [
      67639,
      67640
    ],
    "valid"
  ],
  [
    [
      67641,
      67643
    ],
    "disallowed"
  ],
  [
    [
      67644,
      67644
    ],
    "valid"
  ],
  [
    [
      67645,
      67646
    ],
    "disallowed"
  ],
  [
    [
      67647,
      67647
    ],
    "valid"
  ],
  [
    [
      67648,
      67669
    ],
    "valid"
  ],
  [
    [
      67670,
      67670
    ],
    "disallowed"
  ],
  [
    [
      67671,
      67679
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67680,
      67702
    ],
    "valid"
  ],
  [
    [
      67703,
      67711
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67712,
      67742
    ],
    "valid"
  ],
  [
    [
      67743,
      67750
    ],
    "disallowed"
  ],
  [
    [
      67751,
      67759
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67760,
      67807
    ],
    "disallowed"
  ],
  [
    [
      67808,
      67826
    ],
    "valid"
  ],
  [
    [
      67827,
      67827
    ],
    "disallowed"
  ],
  [
    [
      67828,
      67829
    ],
    "valid"
  ],
  [
    [
      67830,
      67834
    ],
    "disallowed"
  ],
  [
    [
      67835,
      67839
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67840,
      67861
    ],
    "valid"
  ],
  [
    [
      67862,
      67865
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67866,
      67867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67868,
      67870
    ],
    "disallowed"
  ],
  [
    [
      67871,
      67871
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67872,
      67897
    ],
    "valid"
  ],
  [
    [
      67898,
      67902
    ],
    "disallowed"
  ],
  [
    [
      67903,
      67903
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      67904,
      67967
    ],
    "disallowed"
  ],
  [
    [
      67968,
      68023
    ],
    "valid"
  ],
  [
    [
      68024,
      68027
    ],
    "disallowed"
  ],
  [
    [
      68028,
      68029
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68030,
      68031
    ],
    "valid"
  ],
  [
    [
      68032,
      68047
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68048,
      68049
    ],
    "disallowed"
  ],
  [
    [
      68050,
      68095
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68096,
      68099
    ],
    "valid"
  ],
  [
    [
      68100,
      68100
    ],
    "disallowed"
  ],
  [
    [
      68101,
      68102
    ],
    "valid"
  ],
  [
    [
      68103,
      68107
    ],
    "disallowed"
  ],
  [
    [
      68108,
      68115
    ],
    "valid"
  ],
  [
    [
      68116,
      68116
    ],
    "disallowed"
  ],
  [
    [
      68117,
      68119
    ],
    "valid"
  ],
  [
    [
      68120,
      68120
    ],
    "disallowed"
  ],
  [
    [
      68121,
      68147
    ],
    "valid"
  ],
  [
    [
      68148,
      68151
    ],
    "disallowed"
  ],
  [
    [
      68152,
      68154
    ],
    "valid"
  ],
  [
    [
      68155,
      68158
    ],
    "disallowed"
  ],
  [
    [
      68159,
      68159
    ],
    "valid"
  ],
  [
    [
      68160,
      68167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68168,
      68175
    ],
    "disallowed"
  ],
  [
    [
      68176,
      68184
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68185,
      68191
    ],
    "disallowed"
  ],
  [
    [
      68192,
      68220
    ],
    "valid"
  ],
  [
    [
      68221,
      68223
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68224,
      68252
    ],
    "valid"
  ],
  [
    [
      68253,
      68255
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68256,
      68287
    ],
    "disallowed"
  ],
  [
    [
      68288,
      68295
    ],
    "valid"
  ],
  [
    [
      68296,
      68296
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68297,
      68326
    ],
    "valid"
  ],
  [
    [
      68327,
      68330
    ],
    "disallowed"
  ],
  [
    [
      68331,
      68342
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68343,
      68351
    ],
    "disallowed"
  ],
  [
    [
      68352,
      68405
    ],
    "valid"
  ],
  [
    [
      68406,
      68408
    ],
    "disallowed"
  ],
  [
    [
      68409,
      68415
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68416,
      68437
    ],
    "valid"
  ],
  [
    [
      68438,
      68439
    ],
    "disallowed"
  ],
  [
    [
      68440,
      68447
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68448,
      68466
    ],
    "valid"
  ],
  [
    [
      68467,
      68471
    ],
    "disallowed"
  ],
  [
    [
      68472,
      68479
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68480,
      68497
    ],
    "valid"
  ],
  [
    [
      68498,
      68504
    ],
    "disallowed"
  ],
  [
    [
      68505,
      68508
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68509,
      68520
    ],
    "disallowed"
  ],
  [
    [
      68521,
      68527
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68528,
      68607
    ],
    "disallowed"
  ],
  [
    [
      68608,
      68680
    ],
    "valid"
  ],
  [
    [
      68681,
      68735
    ],
    "disallowed"
  ],
  [
    [
      68736,
      68736
    ],
    "mapped",
    [
      68800
    ]
  ],
  [
    [
      68737,
      68737
    ],
    "mapped",
    [
      68801
    ]
  ],
  [
    [
      68738,
      68738
    ],
    "mapped",
    [
      68802
    ]
  ],
  [
    [
      68739,
      68739
    ],
    "mapped",
    [
      68803
    ]
  ],
  [
    [
      68740,
      68740
    ],
    "mapped",
    [
      68804
    ]
  ],
  [
    [
      68741,
      68741
    ],
    "mapped",
    [
      68805
    ]
  ],
  [
    [
      68742,
      68742
    ],
    "mapped",
    [
      68806
    ]
  ],
  [
    [
      68743,
      68743
    ],
    "mapped",
    [
      68807
    ]
  ],
  [
    [
      68744,
      68744
    ],
    "mapped",
    [
      68808
    ]
  ],
  [
    [
      68745,
      68745
    ],
    "mapped",
    [
      68809
    ]
  ],
  [
    [
      68746,
      68746
    ],
    "mapped",
    [
      68810
    ]
  ],
  [
    [
      68747,
      68747
    ],
    "mapped",
    [
      68811
    ]
  ],
  [
    [
      68748,
      68748
    ],
    "mapped",
    [
      68812
    ]
  ],
  [
    [
      68749,
      68749
    ],
    "mapped",
    [
      68813
    ]
  ],
  [
    [
      68750,
      68750
    ],
    "mapped",
    [
      68814
    ]
  ],
  [
    [
      68751,
      68751
    ],
    "mapped",
    [
      68815
    ]
  ],
  [
    [
      68752,
      68752
    ],
    "mapped",
    [
      68816
    ]
  ],
  [
    [
      68753,
      68753
    ],
    "mapped",
    [
      68817
    ]
  ],
  [
    [
      68754,
      68754
    ],
    "mapped",
    [
      68818
    ]
  ],
  [
    [
      68755,
      68755
    ],
    "mapped",
    [
      68819
    ]
  ],
  [
    [
      68756,
      68756
    ],
    "mapped",
    [
      68820
    ]
  ],
  [
    [
      68757,
      68757
    ],
    "mapped",
    [
      68821
    ]
  ],
  [
    [
      68758,
      68758
    ],
    "mapped",
    [
      68822
    ]
  ],
  [
    [
      68759,
      68759
    ],
    "mapped",
    [
      68823
    ]
  ],
  [
    [
      68760,
      68760
    ],
    "mapped",
    [
      68824
    ]
  ],
  [
    [
      68761,
      68761
    ],
    "mapped",
    [
      68825
    ]
  ],
  [
    [
      68762,
      68762
    ],
    "mapped",
    [
      68826
    ]
  ],
  [
    [
      68763,
      68763
    ],
    "mapped",
    [
      68827
    ]
  ],
  [
    [
      68764,
      68764
    ],
    "mapped",
    [
      68828
    ]
  ],
  [
    [
      68765,
      68765
    ],
    "mapped",
    [
      68829
    ]
  ],
  [
    [
      68766,
      68766
    ],
    "mapped",
    [
      68830
    ]
  ],
  [
    [
      68767,
      68767
    ],
    "mapped",
    [
      68831
    ]
  ],
  [
    [
      68768,
      68768
    ],
    "mapped",
    [
      68832
    ]
  ],
  [
    [
      68769,
      68769
    ],
    "mapped",
    [
      68833
    ]
  ],
  [
    [
      68770,
      68770
    ],
    "mapped",
    [
      68834
    ]
  ],
  [
    [
      68771,
      68771
    ],
    "mapped",
    [
      68835
    ]
  ],
  [
    [
      68772,
      68772
    ],
    "mapped",
    [
      68836
    ]
  ],
  [
    [
      68773,
      68773
    ],
    "mapped",
    [
      68837
    ]
  ],
  [
    [
      68774,
      68774
    ],
    "mapped",
    [
      68838
    ]
  ],
  [
    [
      68775,
      68775
    ],
    "mapped",
    [
      68839
    ]
  ],
  [
    [
      68776,
      68776
    ],
    "mapped",
    [
      68840
    ]
  ],
  [
    [
      68777,
      68777
    ],
    "mapped",
    [
      68841
    ]
  ],
  [
    [
      68778,
      68778
    ],
    "mapped",
    [
      68842
    ]
  ],
  [
    [
      68779,
      68779
    ],
    "mapped",
    [
      68843
    ]
  ],
  [
    [
      68780,
      68780
    ],
    "mapped",
    [
      68844
    ]
  ],
  [
    [
      68781,
      68781
    ],
    "mapped",
    [
      68845
    ]
  ],
  [
    [
      68782,
      68782
    ],
    "mapped",
    [
      68846
    ]
  ],
  [
    [
      68783,
      68783
    ],
    "mapped",
    [
      68847
    ]
  ],
  [
    [
      68784,
      68784
    ],
    "mapped",
    [
      68848
    ]
  ],
  [
    [
      68785,
      68785
    ],
    "mapped",
    [
      68849
    ]
  ],
  [
    [
      68786,
      68786
    ],
    "mapped",
    [
      68850
    ]
  ],
  [
    [
      68787,
      68799
    ],
    "disallowed"
  ],
  [
    [
      68800,
      68850
    ],
    "valid"
  ],
  [
    [
      68851,
      68857
    ],
    "disallowed"
  ],
  [
    [
      68858,
      68863
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      68864,
      69215
    ],
    "disallowed"
  ],
  [
    [
      69216,
      69246
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69247,
      69631
    ],
    "disallowed"
  ],
  [
    [
      69632,
      69702
    ],
    "valid"
  ],
  [
    [
      69703,
      69709
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69710,
      69713
    ],
    "disallowed"
  ],
  [
    [
      69714,
      69733
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69734,
      69743
    ],
    "valid"
  ],
  [
    [
      69744,
      69758
    ],
    "disallowed"
  ],
  [
    [
      69759,
      69759
    ],
    "valid"
  ],
  [
    [
      69760,
      69818
    ],
    "valid"
  ],
  [
    [
      69819,
      69820
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69821,
      69821
    ],
    "disallowed"
  ],
  [
    [
      69822,
      69825
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69826,
      69839
    ],
    "disallowed"
  ],
  [
    [
      69840,
      69864
    ],
    "valid"
  ],
  [
    [
      69865,
      69871
    ],
    "disallowed"
  ],
  [
    [
      69872,
      69881
    ],
    "valid"
  ],
  [
    [
      69882,
      69887
    ],
    "disallowed"
  ],
  [
    [
      69888,
      69940
    ],
    "valid"
  ],
  [
    [
      69941,
      69941
    ],
    "disallowed"
  ],
  [
    [
      69942,
      69951
    ],
    "valid"
  ],
  [
    [
      69952,
      69955
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      69956,
      69967
    ],
    "disallowed"
  ],
  [
    [
      69968,
      70003
    ],
    "valid"
  ],
  [
    [
      70004,
      70005
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70006,
      70006
    ],
    "valid"
  ],
  [
    [
      70007,
      70015
    ],
    "disallowed"
  ],
  [
    [
      70016,
      70084
    ],
    "valid"
  ],
  [
    [
      70085,
      70088
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70089,
      70089
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70090,
      70092
    ],
    "valid"
  ],
  [
    [
      70093,
      70093
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70094,
      70095
    ],
    "disallowed"
  ],
  [
    [
      70096,
      70105
    ],
    "valid"
  ],
  [
    [
      70106,
      70106
    ],
    "valid"
  ],
  [
    [
      70107,
      70107
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70108,
      70108
    ],
    "valid"
  ],
  [
    [
      70109,
      70111
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70112,
      70112
    ],
    "disallowed"
  ],
  [
    [
      70113,
      70132
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70133,
      70143
    ],
    "disallowed"
  ],
  [
    [
      70144,
      70161
    ],
    "valid"
  ],
  [
    [
      70162,
      70162
    ],
    "disallowed"
  ],
  [
    [
      70163,
      70199
    ],
    "valid"
  ],
  [
    [
      70200,
      70205
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70206,
      70271
    ],
    "disallowed"
  ],
  [
    [
      70272,
      70278
    ],
    "valid"
  ],
  [
    [
      70279,
      70279
    ],
    "disallowed"
  ],
  [
    [
      70280,
      70280
    ],
    "valid"
  ],
  [
    [
      70281,
      70281
    ],
    "disallowed"
  ],
  [
    [
      70282,
      70285
    ],
    "valid"
  ],
  [
    [
      70286,
      70286
    ],
    "disallowed"
  ],
  [
    [
      70287,
      70301
    ],
    "valid"
  ],
  [
    [
      70302,
      70302
    ],
    "disallowed"
  ],
  [
    [
      70303,
      70312
    ],
    "valid"
  ],
  [
    [
      70313,
      70313
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70314,
      70319
    ],
    "disallowed"
  ],
  [
    [
      70320,
      70378
    ],
    "valid"
  ],
  [
    [
      70379,
      70383
    ],
    "disallowed"
  ],
  [
    [
      70384,
      70393
    ],
    "valid"
  ],
  [
    [
      70394,
      70399
    ],
    "disallowed"
  ],
  [
    [
      70400,
      70400
    ],
    "valid"
  ],
  [
    [
      70401,
      70403
    ],
    "valid"
  ],
  [
    [
      70404,
      70404
    ],
    "disallowed"
  ],
  [
    [
      70405,
      70412
    ],
    "valid"
  ],
  [
    [
      70413,
      70414
    ],
    "disallowed"
  ],
  [
    [
      70415,
      70416
    ],
    "valid"
  ],
  [
    [
      70417,
      70418
    ],
    "disallowed"
  ],
  [
    [
      70419,
      70440
    ],
    "valid"
  ],
  [
    [
      70441,
      70441
    ],
    "disallowed"
  ],
  [
    [
      70442,
      70448
    ],
    "valid"
  ],
  [
    [
      70449,
      70449
    ],
    "disallowed"
  ],
  [
    [
      70450,
      70451
    ],
    "valid"
  ],
  [
    [
      70452,
      70452
    ],
    "disallowed"
  ],
  [
    [
      70453,
      70457
    ],
    "valid"
  ],
  [
    [
      70458,
      70459
    ],
    "disallowed"
  ],
  [
    [
      70460,
      70468
    ],
    "valid"
  ],
  [
    [
      70469,
      70470
    ],
    "disallowed"
  ],
  [
    [
      70471,
      70472
    ],
    "valid"
  ],
  [
    [
      70473,
      70474
    ],
    "disallowed"
  ],
  [
    [
      70475,
      70477
    ],
    "valid"
  ],
  [
    [
      70478,
      70479
    ],
    "disallowed"
  ],
  [
    [
      70480,
      70480
    ],
    "valid"
  ],
  [
    [
      70481,
      70486
    ],
    "disallowed"
  ],
  [
    [
      70487,
      70487
    ],
    "valid"
  ],
  [
    [
      70488,
      70492
    ],
    "disallowed"
  ],
  [
    [
      70493,
      70499
    ],
    "valid"
  ],
  [
    [
      70500,
      70501
    ],
    "disallowed"
  ],
  [
    [
      70502,
      70508
    ],
    "valid"
  ],
  [
    [
      70509,
      70511
    ],
    "disallowed"
  ],
  [
    [
      70512,
      70516
    ],
    "valid"
  ],
  [
    [
      70517,
      70783
    ],
    "disallowed"
  ],
  [
    [
      70784,
      70853
    ],
    "valid"
  ],
  [
    [
      70854,
      70854
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      70855,
      70855
    ],
    "valid"
  ],
  [
    [
      70856,
      70863
    ],
    "disallowed"
  ],
  [
    [
      70864,
      70873
    ],
    "valid"
  ],
  [
    [
      70874,
      71039
    ],
    "disallowed"
  ],
  [
    [
      71040,
      71093
    ],
    "valid"
  ],
  [
    [
      71094,
      71095
    ],
    "disallowed"
  ],
  [
    [
      71096,
      71104
    ],
    "valid"
  ],
  [
    [
      71105,
      71113
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71114,
      71127
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71128,
      71133
    ],
    "valid"
  ],
  [
    [
      71134,
      71167
    ],
    "disallowed"
  ],
  [
    [
      71168,
      71232
    ],
    "valid"
  ],
  [
    [
      71233,
      71235
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71236,
      71236
    ],
    "valid"
  ],
  [
    [
      71237,
      71247
    ],
    "disallowed"
  ],
  [
    [
      71248,
      71257
    ],
    "valid"
  ],
  [
    [
      71258,
      71295
    ],
    "disallowed"
  ],
  [
    [
      71296,
      71351
    ],
    "valid"
  ],
  [
    [
      71352,
      71359
    ],
    "disallowed"
  ],
  [
    [
      71360,
      71369
    ],
    "valid"
  ],
  [
    [
      71370,
      71423
    ],
    "disallowed"
  ],
  [
    [
      71424,
      71449
    ],
    "valid"
  ],
  [
    [
      71450,
      71452
    ],
    "disallowed"
  ],
  [
    [
      71453,
      71467
    ],
    "valid"
  ],
  [
    [
      71468,
      71471
    ],
    "disallowed"
  ],
  [
    [
      71472,
      71481
    ],
    "valid"
  ],
  [
    [
      71482,
      71487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71488,
      71839
    ],
    "disallowed"
  ],
  [
    [
      71840,
      71840
    ],
    "mapped",
    [
      71872
    ]
  ],
  [
    [
      71841,
      71841
    ],
    "mapped",
    [
      71873
    ]
  ],
  [
    [
      71842,
      71842
    ],
    "mapped",
    [
      71874
    ]
  ],
  [
    [
      71843,
      71843
    ],
    "mapped",
    [
      71875
    ]
  ],
  [
    [
      71844,
      71844
    ],
    "mapped",
    [
      71876
    ]
  ],
  [
    [
      71845,
      71845
    ],
    "mapped",
    [
      71877
    ]
  ],
  [
    [
      71846,
      71846
    ],
    "mapped",
    [
      71878
    ]
  ],
  [
    [
      71847,
      71847
    ],
    "mapped",
    [
      71879
    ]
  ],
  [
    [
      71848,
      71848
    ],
    "mapped",
    [
      71880
    ]
  ],
  [
    [
      71849,
      71849
    ],
    "mapped",
    [
      71881
    ]
  ],
  [
    [
      71850,
      71850
    ],
    "mapped",
    [
      71882
    ]
  ],
  [
    [
      71851,
      71851
    ],
    "mapped",
    [
      71883
    ]
  ],
  [
    [
      71852,
      71852
    ],
    "mapped",
    [
      71884
    ]
  ],
  [
    [
      71853,
      71853
    ],
    "mapped",
    [
      71885
    ]
  ],
  [
    [
      71854,
      71854
    ],
    "mapped",
    [
      71886
    ]
  ],
  [
    [
      71855,
      71855
    ],
    "mapped",
    [
      71887
    ]
  ],
  [
    [
      71856,
      71856
    ],
    "mapped",
    [
      71888
    ]
  ],
  [
    [
      71857,
      71857
    ],
    "mapped",
    [
      71889
    ]
  ],
  [
    [
      71858,
      71858
    ],
    "mapped",
    [
      71890
    ]
  ],
  [
    [
      71859,
      71859
    ],
    "mapped",
    [
      71891
    ]
  ],
  [
    [
      71860,
      71860
    ],
    "mapped",
    [
      71892
    ]
  ],
  [
    [
      71861,
      71861
    ],
    "mapped",
    [
      71893
    ]
  ],
  [
    [
      71862,
      71862
    ],
    "mapped",
    [
      71894
    ]
  ],
  [
    [
      71863,
      71863
    ],
    "mapped",
    [
      71895
    ]
  ],
  [
    [
      71864,
      71864
    ],
    "mapped",
    [
      71896
    ]
  ],
  [
    [
      71865,
      71865
    ],
    "mapped",
    [
      71897
    ]
  ],
  [
    [
      71866,
      71866
    ],
    "mapped",
    [
      71898
    ]
  ],
  [
    [
      71867,
      71867
    ],
    "mapped",
    [
      71899
    ]
  ],
  [
    [
      71868,
      71868
    ],
    "mapped",
    [
      71900
    ]
  ],
  [
    [
      71869,
      71869
    ],
    "mapped",
    [
      71901
    ]
  ],
  [
    [
      71870,
      71870
    ],
    "mapped",
    [
      71902
    ]
  ],
  [
    [
      71871,
      71871
    ],
    "mapped",
    [
      71903
    ]
  ],
  [
    [
      71872,
      71913
    ],
    "valid"
  ],
  [
    [
      71914,
      71922
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      71923,
      71934
    ],
    "disallowed"
  ],
  [
    [
      71935,
      71935
    ],
    "valid"
  ],
  [
    [
      71936,
      72383
    ],
    "disallowed"
  ],
  [
    [
      72384,
      72440
    ],
    "valid"
  ],
  [
    [
      72441,
      73727
    ],
    "disallowed"
  ],
  [
    [
      73728,
      74606
    ],
    "valid"
  ],
  [
    [
      74607,
      74648
    ],
    "valid"
  ],
  [
    [
      74649,
      74649
    ],
    "valid"
  ],
  [
    [
      74650,
      74751
    ],
    "disallowed"
  ],
  [
    [
      74752,
      74850
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74851,
      74862
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74863,
      74863
    ],
    "disallowed"
  ],
  [
    [
      74864,
      74867
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74868,
      74868
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      74869,
      74879
    ],
    "disallowed"
  ],
  [
    [
      74880,
      75075
    ],
    "valid"
  ],
  [
    [
      75076,
      77823
    ],
    "disallowed"
  ],
  [
    [
      77824,
      78894
    ],
    "valid"
  ],
  [
    [
      78895,
      82943
    ],
    "disallowed"
  ],
  [
    [
      82944,
      83526
    ],
    "valid"
  ],
  [
    [
      83527,
      92159
    ],
    "disallowed"
  ],
  [
    [
      92160,
      92728
    ],
    "valid"
  ],
  [
    [
      92729,
      92735
    ],
    "disallowed"
  ],
  [
    [
      92736,
      92766
    ],
    "valid"
  ],
  [
    [
      92767,
      92767
    ],
    "disallowed"
  ],
  [
    [
      92768,
      92777
    ],
    "valid"
  ],
  [
    [
      92778,
      92781
    ],
    "disallowed"
  ],
  [
    [
      92782,
      92783
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92784,
      92879
    ],
    "disallowed"
  ],
  [
    [
      92880,
      92909
    ],
    "valid"
  ],
  [
    [
      92910,
      92911
    ],
    "disallowed"
  ],
  [
    [
      92912,
      92916
    ],
    "valid"
  ],
  [
    [
      92917,
      92917
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92918,
      92927
    ],
    "disallowed"
  ],
  [
    [
      92928,
      92982
    ],
    "valid"
  ],
  [
    [
      92983,
      92991
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92992,
      92995
    ],
    "valid"
  ],
  [
    [
      92996,
      92997
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      92998,
      93007
    ],
    "disallowed"
  ],
  [
    [
      93008,
      93017
    ],
    "valid"
  ],
  [
    [
      93018,
      93018
    ],
    "disallowed"
  ],
  [
    [
      93019,
      93025
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      93026,
      93026
    ],
    "disallowed"
  ],
  [
    [
      93027,
      93047
    ],
    "valid"
  ],
  [
    [
      93048,
      93052
    ],
    "disallowed"
  ],
  [
    [
      93053,
      93071
    ],
    "valid"
  ],
  [
    [
      93072,
      93951
    ],
    "disallowed"
  ],
  [
    [
      93952,
      94020
    ],
    "valid"
  ],
  [
    [
      94021,
      94031
    ],
    "disallowed"
  ],
  [
    [
      94032,
      94078
    ],
    "valid"
  ],
  [
    [
      94079,
      94094
    ],
    "disallowed"
  ],
  [
    [
      94095,
      94111
    ],
    "valid"
  ],
  [
    [
      94112,
      110591
    ],
    "disallowed"
  ],
  [
    [
      110592,
      110593
    ],
    "valid"
  ],
  [
    [
      110594,
      113663
    ],
    "disallowed"
  ],
  [
    [
      113664,
      113770
    ],
    "valid"
  ],
  [
    [
      113771,
      113775
    ],
    "disallowed"
  ],
  [
    [
      113776,
      113788
    ],
    "valid"
  ],
  [
    [
      113789,
      113791
    ],
    "disallowed"
  ],
  [
    [
      113792,
      113800
    ],
    "valid"
  ],
  [
    [
      113801,
      113807
    ],
    "disallowed"
  ],
  [
    [
      113808,
      113817
    ],
    "valid"
  ],
  [
    [
      113818,
      113819
    ],
    "disallowed"
  ],
  [
    [
      113820,
      113820
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      113821,
      113822
    ],
    "valid"
  ],
  [
    [
      113823,
      113823
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      113824,
      113827
    ],
    "ignored"
  ],
  [
    [
      113828,
      118783
    ],
    "disallowed"
  ],
  [
    [
      118784,
      119029
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119030,
      119039
    ],
    "disallowed"
  ],
  [
    [
      119040,
      119078
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119079,
      119080
    ],
    "disallowed"
  ],
  [
    [
      119081,
      119081
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119082,
      119133
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119134,
      119134
    ],
    "mapped",
    [
      119127,
      119141
    ]
  ],
  [
    [
      119135,
      119135
    ],
    "mapped",
    [
      119128,
      119141
    ]
  ],
  [
    [
      119136,
      119136
    ],
    "mapped",
    [
      119128,
      119141,
      119150
    ]
  ],
  [
    [
      119137,
      119137
    ],
    "mapped",
    [
      119128,
      119141,
      119151
    ]
  ],
  [
    [
      119138,
      119138
    ],
    "mapped",
    [
      119128,
      119141,
      119152
    ]
  ],
  [
    [
      119139,
      119139
    ],
    "mapped",
    [
      119128,
      119141,
      119153
    ]
  ],
  [
    [
      119140,
      119140
    ],
    "mapped",
    [
      119128,
      119141,
      119154
    ]
  ],
  [
    [
      119141,
      119154
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119155,
      119162
    ],
    "disallowed"
  ],
  [
    [
      119163,
      119226
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119227,
      119227
    ],
    "mapped",
    [
      119225,
      119141
    ]
  ],
  [
    [
      119228,
      119228
    ],
    "mapped",
    [
      119226,
      119141
    ]
  ],
  [
    [
      119229,
      119229
    ],
    "mapped",
    [
      119225,
      119141,
      119150
    ]
  ],
  [
    [
      119230,
      119230
    ],
    "mapped",
    [
      119226,
      119141,
      119150
    ]
  ],
  [
    [
      119231,
      119231
    ],
    "mapped",
    [
      119225,
      119141,
      119151
    ]
  ],
  [
    [
      119232,
      119232
    ],
    "mapped",
    [
      119226,
      119141,
      119151
    ]
  ],
  [
    [
      119233,
      119261
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119262,
      119272
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119273,
      119295
    ],
    "disallowed"
  ],
  [
    [
      119296,
      119365
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119366,
      119551
    ],
    "disallowed"
  ],
  [
    [
      119552,
      119638
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119639,
      119647
    ],
    "disallowed"
  ],
  [
    [
      119648,
      119665
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      119666,
      119807
    ],
    "disallowed"
  ],
  [
    [
      119808,
      119808
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119809,
      119809
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119810,
      119810
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119811,
      119811
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119812,
      119812
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119813,
      119813
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119814,
      119814
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119815,
      119815
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119816,
      119816
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119817,
      119817
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119818,
      119818
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119819,
      119819
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119820,
      119820
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119821,
      119821
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119822,
      119822
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119823,
      119823
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119824,
      119824
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119825,
      119825
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119826,
      119826
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119827,
      119827
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119828,
      119828
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119829,
      119829
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119830,
      119830
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119831,
      119831
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119832,
      119832
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119833,
      119833
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119834,
      119834
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119835,
      119835
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119836,
      119836
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119837,
      119837
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119838,
      119838
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119839,
      119839
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119840,
      119840
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119841,
      119841
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119842,
      119842
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119843,
      119843
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119844,
      119844
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119845,
      119845
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119846,
      119846
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119847,
      119847
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119848,
      119848
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119849,
      119849
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119850,
      119850
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119851,
      119851
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119852,
      119852
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119853,
      119853
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119854,
      119854
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119855,
      119855
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119856,
      119856
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119857,
      119857
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119858,
      119858
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119859,
      119859
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119860,
      119860
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119861,
      119861
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119862,
      119862
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119863,
      119863
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119864,
      119864
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119865,
      119865
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119866,
      119866
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119867,
      119867
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119868,
      119868
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119869,
      119869
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119870,
      119870
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119871,
      119871
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119872,
      119872
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119873,
      119873
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119874,
      119874
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119875,
      119875
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119876,
      119876
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119877,
      119877
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119878,
      119878
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119879,
      119879
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119880,
      119880
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119881,
      119881
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119882,
      119882
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119883,
      119883
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119884,
      119884
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119885,
      119885
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119886,
      119886
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119887,
      119887
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119888,
      119888
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119889,
      119889
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119890,
      119890
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119891,
      119891
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119892,
      119892
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119893,
      119893
    ],
    "disallowed"
  ],
  [
    [
      119894,
      119894
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119895,
      119895
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119896,
      119896
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119897,
      119897
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119898,
      119898
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119899,
      119899
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119900,
      119900
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119901,
      119901
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119902,
      119902
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119903,
      119903
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119904,
      119904
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119905,
      119905
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119906,
      119906
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119907,
      119907
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119908,
      119908
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119909,
      119909
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119910,
      119910
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119911,
      119911
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119912,
      119912
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119913,
      119913
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119914,
      119914
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119915,
      119915
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119916,
      119916
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119917,
      119917
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119918,
      119918
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119919,
      119919
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119920,
      119920
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119921,
      119921
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119922,
      119922
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119923,
      119923
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119924,
      119924
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119925,
      119925
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119926,
      119926
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119927,
      119927
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119928,
      119928
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119929,
      119929
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119930,
      119930
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119931,
      119931
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119932,
      119932
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119933,
      119933
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119934,
      119934
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119935,
      119935
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119936,
      119936
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119937,
      119937
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119938,
      119938
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119939,
      119939
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119940,
      119940
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119941,
      119941
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119942,
      119942
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      119943,
      119943
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119944,
      119944
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119945,
      119945
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119946,
      119946
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119947,
      119947
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119948,
      119948
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119949,
      119949
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      119950,
      119950
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      119951,
      119951
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119952,
      119952
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119953,
      119953
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119954,
      119954
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119955,
      119955
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      119956,
      119956
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119957,
      119957
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119958,
      119958
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119959,
      119959
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119960,
      119960
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119961,
      119961
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119962,
      119962
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119963,
      119963
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119964,
      119964
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119965,
      119965
    ],
    "disallowed"
  ],
  [
    [
      119966,
      119966
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119967,
      119967
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119968,
      119969
    ],
    "disallowed"
  ],
  [
    [
      119970,
      119970
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      119971,
      119972
    ],
    "disallowed"
  ],
  [
    [
      119973,
      119973
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      119974,
      119974
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      119975,
      119976
    ],
    "disallowed"
  ],
  [
    [
      119977,
      119977
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      119978,
      119978
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      119979,
      119979
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      119980,
      119980
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      119981,
      119981
    ],
    "disallowed"
  ],
  [
    [
      119982,
      119982
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      119983,
      119983
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      119984,
      119984
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      119985,
      119985
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      119986,
      119986
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      119987,
      119987
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      119988,
      119988
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      119989,
      119989
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      119990,
      119990
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      119991,
      119991
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      119992,
      119992
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      119993,
      119993
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      119994,
      119994
    ],
    "disallowed"
  ],
  [
    [
      119995,
      119995
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      119996,
      119996
    ],
    "disallowed"
  ],
  [
    [
      119997,
      119997
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      119998,
      119998
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      119999,
      119999
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      12e4,
      12e4
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120001,
      120001
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120002,
      120002
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120003,
      120003
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120004,
      120004
    ],
    "disallowed"
  ],
  [
    [
      120005,
      120005
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120006,
      120006
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120007,
      120007
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120008,
      120008
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120009,
      120009
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120010,
      120010
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120011,
      120011
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120012,
      120012
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120013,
      120013
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120014,
      120014
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120015,
      120015
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120016,
      120016
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120017,
      120017
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120018,
      120018
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120019,
      120019
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120020,
      120020
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120021,
      120021
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120022,
      120022
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120023,
      120023
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120024,
      120024
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120025,
      120025
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120026,
      120026
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120027,
      120027
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120028,
      120028
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120029,
      120029
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120030,
      120030
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120031,
      120031
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120032,
      120032
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120033,
      120033
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120034,
      120034
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120035,
      120035
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120036,
      120036
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120037,
      120037
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120038,
      120038
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120039,
      120039
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120040,
      120040
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120041,
      120041
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120042,
      120042
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120043,
      120043
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120044,
      120044
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120045,
      120045
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120046,
      120046
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120047,
      120047
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120048,
      120048
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120049,
      120049
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120050,
      120050
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120051,
      120051
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120052,
      120052
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120053,
      120053
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120054,
      120054
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120055,
      120055
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120056,
      120056
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120057,
      120057
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120058,
      120058
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120059,
      120059
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120060,
      120060
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120061,
      120061
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120062,
      120062
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120063,
      120063
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120064,
      120064
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120065,
      120065
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120066,
      120066
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120067,
      120067
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120068,
      120068
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120069,
      120069
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120070,
      120070
    ],
    "disallowed"
  ],
  [
    [
      120071,
      120071
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120072,
      120072
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120073,
      120073
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120074,
      120074
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120075,
      120076
    ],
    "disallowed"
  ],
  [
    [
      120077,
      120077
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120078,
      120078
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120079,
      120079
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120080,
      120080
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120081,
      120081
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120082,
      120082
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120083,
      120083
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120084,
      120084
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120085,
      120085
    ],
    "disallowed"
  ],
  [
    [
      120086,
      120086
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120087,
      120087
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120088,
      120088
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120089,
      120089
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120090,
      120090
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120091,
      120091
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120092,
      120092
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120093,
      120093
    ],
    "disallowed"
  ],
  [
    [
      120094,
      120094
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120095,
      120095
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120096,
      120096
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120097,
      120097
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120098,
      120098
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120099,
      120099
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120100,
      120100
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120101,
      120101
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120102,
      120102
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120103,
      120103
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120104,
      120104
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120105,
      120105
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120106,
      120106
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120107,
      120107
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120108,
      120108
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120109,
      120109
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120110,
      120110
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120111,
      120111
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120112,
      120112
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120113,
      120113
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120114,
      120114
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120115,
      120115
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120116,
      120116
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120117,
      120117
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120118,
      120118
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120119,
      120119
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120120,
      120120
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120121,
      120121
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120122,
      120122
    ],
    "disallowed"
  ],
  [
    [
      120123,
      120123
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120124,
      120124
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120125,
      120125
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120126,
      120126
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120127,
      120127
    ],
    "disallowed"
  ],
  [
    [
      120128,
      120128
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120129,
      120129
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120130,
      120130
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120131,
      120131
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120132,
      120132
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120133,
      120133
    ],
    "disallowed"
  ],
  [
    [
      120134,
      120134
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120135,
      120137
    ],
    "disallowed"
  ],
  [
    [
      120138,
      120138
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120139,
      120139
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120140,
      120140
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120141,
      120141
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120142,
      120142
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120143,
      120143
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120144,
      120144
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120145,
      120145
    ],
    "disallowed"
  ],
  [
    [
      120146,
      120146
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120147,
      120147
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120148,
      120148
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120149,
      120149
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120150,
      120150
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120151,
      120151
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120152,
      120152
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120153,
      120153
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120154,
      120154
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120155,
      120155
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120156,
      120156
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120157,
      120157
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120158,
      120158
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120159,
      120159
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120160,
      120160
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120161,
      120161
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120162,
      120162
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120163,
      120163
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120164,
      120164
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120165,
      120165
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120166,
      120166
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120167,
      120167
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120168,
      120168
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120169,
      120169
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120170,
      120170
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120171,
      120171
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120172,
      120172
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120173,
      120173
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120174,
      120174
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120175,
      120175
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120176,
      120176
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120177,
      120177
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120178,
      120178
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120179,
      120179
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120180,
      120180
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120181,
      120181
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120182,
      120182
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120183,
      120183
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120184,
      120184
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120185,
      120185
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120186,
      120186
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120187,
      120187
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120188,
      120188
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120189,
      120189
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120190,
      120190
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120191,
      120191
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120192,
      120192
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120193,
      120193
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120194,
      120194
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120195,
      120195
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120196,
      120196
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120197,
      120197
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120198,
      120198
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120199,
      120199
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120200,
      120200
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120201,
      120201
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120202,
      120202
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120203,
      120203
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120204,
      120204
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120205,
      120205
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120206,
      120206
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120207,
      120207
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120208,
      120208
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120209,
      120209
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120210,
      120210
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120211,
      120211
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120212,
      120212
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120213,
      120213
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120214,
      120214
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120215,
      120215
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120216,
      120216
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120217,
      120217
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120218,
      120218
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120219,
      120219
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120220,
      120220
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120221,
      120221
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120222,
      120222
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120223,
      120223
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120224,
      120224
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120225,
      120225
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120226,
      120226
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120227,
      120227
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120228,
      120228
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120229,
      120229
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120230,
      120230
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120231,
      120231
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120232,
      120232
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120233,
      120233
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120234,
      120234
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120235,
      120235
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120236,
      120236
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120237,
      120237
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120238,
      120238
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120239,
      120239
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120240,
      120240
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120241,
      120241
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120242,
      120242
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120243,
      120243
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120244,
      120244
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120245,
      120245
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120246,
      120246
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120247,
      120247
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120248,
      120248
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120249,
      120249
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120250,
      120250
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120251,
      120251
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120252,
      120252
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120253,
      120253
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120254,
      120254
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120255,
      120255
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120256,
      120256
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120257,
      120257
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120258,
      120258
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120259,
      120259
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120260,
      120260
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120261,
      120261
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120262,
      120262
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120263,
      120263
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120264,
      120264
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120265,
      120265
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120266,
      120266
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120267,
      120267
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120268,
      120268
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120269,
      120269
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120270,
      120270
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120271,
      120271
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120272,
      120272
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120273,
      120273
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120274,
      120274
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120275,
      120275
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120276,
      120276
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120277,
      120277
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120278,
      120278
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120279,
      120279
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120280,
      120280
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120281,
      120281
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120282,
      120282
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120283,
      120283
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120284,
      120284
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120285,
      120285
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120286,
      120286
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120287,
      120287
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120288,
      120288
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120289,
      120289
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120290,
      120290
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120291,
      120291
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120292,
      120292
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120293,
      120293
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120294,
      120294
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120295,
      120295
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120296,
      120296
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120297,
      120297
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120298,
      120298
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120299,
      120299
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120300,
      120300
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120301,
      120301
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120302,
      120302
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120303,
      120303
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120304,
      120304
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120305,
      120305
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120306,
      120306
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120307,
      120307
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120308,
      120308
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120309,
      120309
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120310,
      120310
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120311,
      120311
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120312,
      120312
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120313,
      120313
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120314,
      120314
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120315,
      120315
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120316,
      120316
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120317,
      120317
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120318,
      120318
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120319,
      120319
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120320,
      120320
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120321,
      120321
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120322,
      120322
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120323,
      120323
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120324,
      120324
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120325,
      120325
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120326,
      120326
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120327,
      120327
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120328,
      120328
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120329,
      120329
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120330,
      120330
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120331,
      120331
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120332,
      120332
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120333,
      120333
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120334,
      120334
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120335,
      120335
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120336,
      120336
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120337,
      120337
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120338,
      120338
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120339,
      120339
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120340,
      120340
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120341,
      120341
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120342,
      120342
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120343,
      120343
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120344,
      120344
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120345,
      120345
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120346,
      120346
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120347,
      120347
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120348,
      120348
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120349,
      120349
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120350,
      120350
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120351,
      120351
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120352,
      120352
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120353,
      120353
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120354,
      120354
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120355,
      120355
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120356,
      120356
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120357,
      120357
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120358,
      120358
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120359,
      120359
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120360,
      120360
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120361,
      120361
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120362,
      120362
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120363,
      120363
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120364,
      120364
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120365,
      120365
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120366,
      120366
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120367,
      120367
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120368,
      120368
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120369,
      120369
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120370,
      120370
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120371,
      120371
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120372,
      120372
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120373,
      120373
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120374,
      120374
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120375,
      120375
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120376,
      120376
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120377,
      120377
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120378,
      120378
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120379,
      120379
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120380,
      120380
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120381,
      120381
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120382,
      120382
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120383,
      120383
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120384,
      120384
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120385,
      120385
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120386,
      120386
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120387,
      120387
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120388,
      120388
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120389,
      120389
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120390,
      120390
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120391,
      120391
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120392,
      120392
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120393,
      120393
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120394,
      120394
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120395,
      120395
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120396,
      120396
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120397,
      120397
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120398,
      120398
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120399,
      120399
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120400,
      120400
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120401,
      120401
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120402,
      120402
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120403,
      120403
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120404,
      120404
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120405,
      120405
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120406,
      120406
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120407,
      120407
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120408,
      120408
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120409,
      120409
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120410,
      120410
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120411,
      120411
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120412,
      120412
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120413,
      120413
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120414,
      120414
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120415,
      120415
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120416,
      120416
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120417,
      120417
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120418,
      120418
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120419,
      120419
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120420,
      120420
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120421,
      120421
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120422,
      120422
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120423,
      120423
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120424,
      120424
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120425,
      120425
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120426,
      120426
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120427,
      120427
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120428,
      120428
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120429,
      120429
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120430,
      120430
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120431,
      120431
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120432,
      120432
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120433,
      120433
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120434,
      120434
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120435,
      120435
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120436,
      120436
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120437,
      120437
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120438,
      120438
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120439,
      120439
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120440,
      120440
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120441,
      120441
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120442,
      120442
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120443,
      120443
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120444,
      120444
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120445,
      120445
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120446,
      120446
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120447,
      120447
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120448,
      120448
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120449,
      120449
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120450,
      120450
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120451,
      120451
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120452,
      120452
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120453,
      120453
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120454,
      120454
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120455,
      120455
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120456,
      120456
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120457,
      120457
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120458,
      120458
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      120459,
      120459
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      120460,
      120460
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      120461,
      120461
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      120462,
      120462
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      120463,
      120463
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      120464,
      120464
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      120465,
      120465
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      120466,
      120466
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      120467,
      120467
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      120468,
      120468
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      120469,
      120469
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      120470,
      120470
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      120471,
      120471
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      120472,
      120472
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      120473,
      120473
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      120474,
      120474
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      120475,
      120475
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      120476,
      120476
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      120477,
      120477
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      120478,
      120478
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      120479,
      120479
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      120480,
      120480
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      120481,
      120481
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      120482,
      120482
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      120483,
      120483
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      120484,
      120484
    ],
    "mapped",
    [
      305
    ]
  ],
  [
    [
      120485,
      120485
    ],
    "mapped",
    [
      567
    ]
  ],
  [
    [
      120486,
      120487
    ],
    "disallowed"
  ],
  [
    [
      120488,
      120488
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120489,
      120489
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120490,
      120490
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120491,
      120491
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120492,
      120492
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120493,
      120493
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120494,
      120494
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120495,
      120495
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120496,
      120496
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120497,
      120497
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120498,
      120498
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120499,
      120499
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120500,
      120500
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120501,
      120501
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120502,
      120502
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120503,
      120503
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120504,
      120504
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120505,
      120505
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120506,
      120506
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120507,
      120507
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120508,
      120508
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120509,
      120509
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120510,
      120510
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120511,
      120511
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120512,
      120512
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120513,
      120513
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120514,
      120514
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120515,
      120515
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120516,
      120516
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120517,
      120517
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120518,
      120518
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120519,
      120519
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120520,
      120520
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120521,
      120521
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120522,
      120522
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120523,
      120523
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120524,
      120524
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120525,
      120525
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120526,
      120526
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120527,
      120527
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120528,
      120528
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120529,
      120529
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120530,
      120530
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120531,
      120532
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120533,
      120533
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120534,
      120534
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120535,
      120535
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120536,
      120536
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120537,
      120537
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120538,
      120538
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120539,
      120539
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120540,
      120540
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120541,
      120541
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120542,
      120542
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120543,
      120543
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120544,
      120544
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120545,
      120545
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120546,
      120546
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120547,
      120547
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120548,
      120548
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120549,
      120549
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120550,
      120550
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120551,
      120551
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120552,
      120552
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120553,
      120553
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120554,
      120554
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120555,
      120555
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120556,
      120556
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120557,
      120557
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120558,
      120558
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120559,
      120559
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120560,
      120560
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120561,
      120561
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120562,
      120562
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120563,
      120563
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120564,
      120564
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120565,
      120565
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120566,
      120566
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120567,
      120567
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120568,
      120568
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120569,
      120569
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120570,
      120570
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120571,
      120571
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120572,
      120572
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120573,
      120573
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120574,
      120574
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120575,
      120575
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120576,
      120576
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120577,
      120577
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120578,
      120578
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120579,
      120579
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120580,
      120580
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120581,
      120581
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120582,
      120582
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120583,
      120583
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120584,
      120584
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120585,
      120585
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120586,
      120586
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120587,
      120587
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120588,
      120588
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120589,
      120590
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120591,
      120591
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120592,
      120592
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120593,
      120593
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120594,
      120594
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120595,
      120595
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120596,
      120596
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120597,
      120597
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120598,
      120598
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120599,
      120599
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120600,
      120600
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120601,
      120601
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120602,
      120602
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120603,
      120603
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120604,
      120604
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120605,
      120605
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120606,
      120606
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120607,
      120607
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120608,
      120608
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120609,
      120609
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120610,
      120610
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120611,
      120611
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120612,
      120612
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120613,
      120613
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120614,
      120614
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120615,
      120615
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120616,
      120616
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120617,
      120617
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120618,
      120618
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120619,
      120619
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120620,
      120620
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120621,
      120621
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120622,
      120622
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120623,
      120623
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120624,
      120624
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120625,
      120625
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120626,
      120626
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120627,
      120627
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120628,
      120628
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120629,
      120629
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120630,
      120630
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120631,
      120631
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120632,
      120632
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120633,
      120633
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120634,
      120634
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120635,
      120635
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120636,
      120636
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120637,
      120637
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120638,
      120638
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120639,
      120639
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120640,
      120640
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120641,
      120641
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120642,
      120642
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120643,
      120643
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120644,
      120644
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120645,
      120645
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120646,
      120646
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120647,
      120648
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120649,
      120649
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120650,
      120650
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120651,
      120651
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120652,
      120652
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120653,
      120653
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120654,
      120654
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120655,
      120655
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120656,
      120656
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120657,
      120657
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120658,
      120658
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120659,
      120659
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120660,
      120660
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120661,
      120661
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120662,
      120662
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120663,
      120663
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120664,
      120664
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120665,
      120665
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120666,
      120666
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120667,
      120667
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120668,
      120668
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120669,
      120669
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120670,
      120670
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120671,
      120671
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120672,
      120672
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120673,
      120673
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120674,
      120674
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120675,
      120675
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120676,
      120676
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120677,
      120677
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120678,
      120678
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120679,
      120679
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120680,
      120680
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120681,
      120681
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120682,
      120682
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120683,
      120683
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120684,
      120684
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120685,
      120685
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120686,
      120686
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120687,
      120687
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120688,
      120688
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120689,
      120689
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120690,
      120690
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120691,
      120691
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120692,
      120692
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120693,
      120693
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120694,
      120694
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120695,
      120695
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120696,
      120696
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120697,
      120697
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120698,
      120698
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120699,
      120699
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120700,
      120700
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120701,
      120701
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120702,
      120702
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120703,
      120703
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120704,
      120704
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120705,
      120706
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120707,
      120707
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120708,
      120708
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120709,
      120709
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120710,
      120710
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120711,
      120711
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120712,
      120712
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120713,
      120713
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120714,
      120714
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120715,
      120715
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120716,
      120716
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120717,
      120717
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120718,
      120718
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120719,
      120719
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120720,
      120720
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120721,
      120721
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120722,
      120722
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120723,
      120723
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120724,
      120724
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120725,
      120725
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120726,
      120726
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120727,
      120727
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120728,
      120728
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120729,
      120729
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120730,
      120730
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120731,
      120731
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120732,
      120732
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120733,
      120733
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120734,
      120734
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120735,
      120735
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120736,
      120736
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120737,
      120737
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120738,
      120738
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120739,
      120739
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120740,
      120740
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120741,
      120741
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120742,
      120742
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120743,
      120743
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120744,
      120744
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120745,
      120745
    ],
    "mapped",
    [
      8711
    ]
  ],
  [
    [
      120746,
      120746
    ],
    "mapped",
    [
      945
    ]
  ],
  [
    [
      120747,
      120747
    ],
    "mapped",
    [
      946
    ]
  ],
  [
    [
      120748,
      120748
    ],
    "mapped",
    [
      947
    ]
  ],
  [
    [
      120749,
      120749
    ],
    "mapped",
    [
      948
    ]
  ],
  [
    [
      120750,
      120750
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120751,
      120751
    ],
    "mapped",
    [
      950
    ]
  ],
  [
    [
      120752,
      120752
    ],
    "mapped",
    [
      951
    ]
  ],
  [
    [
      120753,
      120753
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120754,
      120754
    ],
    "mapped",
    [
      953
    ]
  ],
  [
    [
      120755,
      120755
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120756,
      120756
    ],
    "mapped",
    [
      955
    ]
  ],
  [
    [
      120757,
      120757
    ],
    "mapped",
    [
      956
    ]
  ],
  [
    [
      120758,
      120758
    ],
    "mapped",
    [
      957
    ]
  ],
  [
    [
      120759,
      120759
    ],
    "mapped",
    [
      958
    ]
  ],
  [
    [
      120760,
      120760
    ],
    "mapped",
    [
      959
    ]
  ],
  [
    [
      120761,
      120761
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120762,
      120762
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120763,
      120764
    ],
    "mapped",
    [
      963
    ]
  ],
  [
    [
      120765,
      120765
    ],
    "mapped",
    [
      964
    ]
  ],
  [
    [
      120766,
      120766
    ],
    "mapped",
    [
      965
    ]
  ],
  [
    [
      120767,
      120767
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120768,
      120768
    ],
    "mapped",
    [
      967
    ]
  ],
  [
    [
      120769,
      120769
    ],
    "mapped",
    [
      968
    ]
  ],
  [
    [
      120770,
      120770
    ],
    "mapped",
    [
      969
    ]
  ],
  [
    [
      120771,
      120771
    ],
    "mapped",
    [
      8706
    ]
  ],
  [
    [
      120772,
      120772
    ],
    "mapped",
    [
      949
    ]
  ],
  [
    [
      120773,
      120773
    ],
    "mapped",
    [
      952
    ]
  ],
  [
    [
      120774,
      120774
    ],
    "mapped",
    [
      954
    ]
  ],
  [
    [
      120775,
      120775
    ],
    "mapped",
    [
      966
    ]
  ],
  [
    [
      120776,
      120776
    ],
    "mapped",
    [
      961
    ]
  ],
  [
    [
      120777,
      120777
    ],
    "mapped",
    [
      960
    ]
  ],
  [
    [
      120778,
      120779
    ],
    "mapped",
    [
      989
    ]
  ],
  [
    [
      120780,
      120781
    ],
    "disallowed"
  ],
  [
    [
      120782,
      120782
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120783,
      120783
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120784,
      120784
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120785,
      120785
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120786,
      120786
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120787,
      120787
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120788,
      120788
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120789,
      120789
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120790,
      120790
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120791,
      120791
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120792,
      120792
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120793,
      120793
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120794,
      120794
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120795,
      120795
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120796,
      120796
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120797,
      120797
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120798,
      120798
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120799,
      120799
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120800,
      120800
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120801,
      120801
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120802,
      120802
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120803,
      120803
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120804,
      120804
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120805,
      120805
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120806,
      120806
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120807,
      120807
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120808,
      120808
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120809,
      120809
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120810,
      120810
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120811,
      120811
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120812,
      120812
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120813,
      120813
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120814,
      120814
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120815,
      120815
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120816,
      120816
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120817,
      120817
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120818,
      120818
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120819,
      120819
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120820,
      120820
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120821,
      120821
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120822,
      120822
    ],
    "mapped",
    [
      48
    ]
  ],
  [
    [
      120823,
      120823
    ],
    "mapped",
    [
      49
    ]
  ],
  [
    [
      120824,
      120824
    ],
    "mapped",
    [
      50
    ]
  ],
  [
    [
      120825,
      120825
    ],
    "mapped",
    [
      51
    ]
  ],
  [
    [
      120826,
      120826
    ],
    "mapped",
    [
      52
    ]
  ],
  [
    [
      120827,
      120827
    ],
    "mapped",
    [
      53
    ]
  ],
  [
    [
      120828,
      120828
    ],
    "mapped",
    [
      54
    ]
  ],
  [
    [
      120829,
      120829
    ],
    "mapped",
    [
      55
    ]
  ],
  [
    [
      120830,
      120830
    ],
    "mapped",
    [
      56
    ]
  ],
  [
    [
      120831,
      120831
    ],
    "mapped",
    [
      57
    ]
  ],
  [
    [
      120832,
      121343
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121344,
      121398
    ],
    "valid"
  ],
  [
    [
      121399,
      121402
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121403,
      121452
    ],
    "valid"
  ],
  [
    [
      121453,
      121460
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121461,
      121461
    ],
    "valid"
  ],
  [
    [
      121462,
      121475
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121476,
      121476
    ],
    "valid"
  ],
  [
    [
      121477,
      121483
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      121484,
      121498
    ],
    "disallowed"
  ],
  [
    [
      121499,
      121503
    ],
    "valid"
  ],
  [
    [
      121504,
      121504
    ],
    "disallowed"
  ],
  [
    [
      121505,
      121519
    ],
    "valid"
  ],
  [
    [
      121520,
      124927
    ],
    "disallowed"
  ],
  [
    [
      124928,
      125124
    ],
    "valid"
  ],
  [
    [
      125125,
      125126
    ],
    "disallowed"
  ],
  [
    [
      125127,
      125135
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      125136,
      125142
    ],
    "valid"
  ],
  [
    [
      125143,
      126463
    ],
    "disallowed"
  ],
  [
    [
      126464,
      126464
    ],
    "mapped",
    [
      1575
    ]
  ],
  [
    [
      126465,
      126465
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126466,
      126466
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126467,
      126467
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      126468,
      126468
    ],
    "disallowed"
  ],
  [
    [
      126469,
      126469
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      126470,
      126470
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      126471,
      126471
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126472,
      126472
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126473,
      126473
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126474,
      126474
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      126475,
      126475
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126476,
      126476
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126477,
      126477
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126478,
      126478
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126479,
      126479
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126480,
      126480
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126481,
      126481
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126482,
      126482
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126483,
      126483
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      126484,
      126484
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126485,
      126485
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126486,
      126486
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126487,
      126487
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126488,
      126488
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      126489,
      126489
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126490,
      126490
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126491,
      126491
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126492,
      126492
    ],
    "mapped",
    [
      1646
    ]
  ],
  [
    [
      126493,
      126493
    ],
    "mapped",
    [
      1722
    ]
  ],
  [
    [
      126494,
      126494
    ],
    "mapped",
    [
      1697
    ]
  ],
  [
    [
      126495,
      126495
    ],
    "mapped",
    [
      1647
    ]
  ],
  [
    [
      126496,
      126496
    ],
    "disallowed"
  ],
  [
    [
      126497,
      126497
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126498,
      126498
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126499,
      126499
    ],
    "disallowed"
  ],
  [
    [
      126500,
      126500
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      126501,
      126502
    ],
    "disallowed"
  ],
  [
    [
      126503,
      126503
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126504,
      126504
    ],
    "disallowed"
  ],
  [
    [
      126505,
      126505
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126506,
      126506
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      126507,
      126507
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126508,
      126508
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126509,
      126509
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126510,
      126510
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126511,
      126511
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126512,
      126512
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126513,
      126513
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126514,
      126514
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126515,
      126515
    ],
    "disallowed"
  ],
  [
    [
      126516,
      126516
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126517,
      126517
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126518,
      126518
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126519,
      126519
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126520,
      126520
    ],
    "disallowed"
  ],
  [
    [
      126521,
      126521
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126522,
      126522
    ],
    "disallowed"
  ],
  [
    [
      126523,
      126523
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126524,
      126529
    ],
    "disallowed"
  ],
  [
    [
      126530,
      126530
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126531,
      126534
    ],
    "disallowed"
  ],
  [
    [
      126535,
      126535
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126536,
      126536
    ],
    "disallowed"
  ],
  [
    [
      126537,
      126537
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126538,
      126538
    ],
    "disallowed"
  ],
  [
    [
      126539,
      126539
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126540,
      126540
    ],
    "disallowed"
  ],
  [
    [
      126541,
      126541
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126542,
      126542
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126543,
      126543
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126544,
      126544
    ],
    "disallowed"
  ],
  [
    [
      126545,
      126545
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126546,
      126546
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126547,
      126547
    ],
    "disallowed"
  ],
  [
    [
      126548,
      126548
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126549,
      126550
    ],
    "disallowed"
  ],
  [
    [
      126551,
      126551
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126552,
      126552
    ],
    "disallowed"
  ],
  [
    [
      126553,
      126553
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126554,
      126554
    ],
    "disallowed"
  ],
  [
    [
      126555,
      126555
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126556,
      126556
    ],
    "disallowed"
  ],
  [
    [
      126557,
      126557
    ],
    "mapped",
    [
      1722
    ]
  ],
  [
    [
      126558,
      126558
    ],
    "disallowed"
  ],
  [
    [
      126559,
      126559
    ],
    "mapped",
    [
      1647
    ]
  ],
  [
    [
      126560,
      126560
    ],
    "disallowed"
  ],
  [
    [
      126561,
      126561
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126562,
      126562
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126563,
      126563
    ],
    "disallowed"
  ],
  [
    [
      126564,
      126564
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      126565,
      126566
    ],
    "disallowed"
  ],
  [
    [
      126567,
      126567
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126568,
      126568
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126569,
      126569
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126570,
      126570
    ],
    "mapped",
    [
      1603
    ]
  ],
  [
    [
      126571,
      126571
    ],
    "disallowed"
  ],
  [
    [
      126572,
      126572
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126573,
      126573
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126574,
      126574
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126575,
      126575
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126576,
      126576
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126577,
      126577
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126578,
      126578
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126579,
      126579
    ],
    "disallowed"
  ],
  [
    [
      126580,
      126580
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126581,
      126581
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126582,
      126582
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126583,
      126583
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126584,
      126584
    ],
    "disallowed"
  ],
  [
    [
      126585,
      126585
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126586,
      126586
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126587,
      126587
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126588,
      126588
    ],
    "mapped",
    [
      1646
    ]
  ],
  [
    [
      126589,
      126589
    ],
    "disallowed"
  ],
  [
    [
      126590,
      126590
    ],
    "mapped",
    [
      1697
    ]
  ],
  [
    [
      126591,
      126591
    ],
    "disallowed"
  ],
  [
    [
      126592,
      126592
    ],
    "mapped",
    [
      1575
    ]
  ],
  [
    [
      126593,
      126593
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126594,
      126594
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126595,
      126595
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      126596,
      126596
    ],
    "mapped",
    [
      1607
    ]
  ],
  [
    [
      126597,
      126597
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      126598,
      126598
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      126599,
      126599
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126600,
      126600
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126601,
      126601
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126602,
      126602
    ],
    "disallowed"
  ],
  [
    [
      126603,
      126603
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126604,
      126604
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126605,
      126605
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126606,
      126606
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126607,
      126607
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126608,
      126608
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126609,
      126609
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126610,
      126610
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126611,
      126611
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      126612,
      126612
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126613,
      126613
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126614,
      126614
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126615,
      126615
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126616,
      126616
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      126617,
      126617
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126618,
      126618
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126619,
      126619
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126620,
      126624
    ],
    "disallowed"
  ],
  [
    [
      126625,
      126625
    ],
    "mapped",
    [
      1576
    ]
  ],
  [
    [
      126626,
      126626
    ],
    "mapped",
    [
      1580
    ]
  ],
  [
    [
      126627,
      126627
    ],
    "mapped",
    [
      1583
    ]
  ],
  [
    [
      126628,
      126628
    ],
    "disallowed"
  ],
  [
    [
      126629,
      126629
    ],
    "mapped",
    [
      1608
    ]
  ],
  [
    [
      126630,
      126630
    ],
    "mapped",
    [
      1586
    ]
  ],
  [
    [
      126631,
      126631
    ],
    "mapped",
    [
      1581
    ]
  ],
  [
    [
      126632,
      126632
    ],
    "mapped",
    [
      1591
    ]
  ],
  [
    [
      126633,
      126633
    ],
    "mapped",
    [
      1610
    ]
  ],
  [
    [
      126634,
      126634
    ],
    "disallowed"
  ],
  [
    [
      126635,
      126635
    ],
    "mapped",
    [
      1604
    ]
  ],
  [
    [
      126636,
      126636
    ],
    "mapped",
    [
      1605
    ]
  ],
  [
    [
      126637,
      126637
    ],
    "mapped",
    [
      1606
    ]
  ],
  [
    [
      126638,
      126638
    ],
    "mapped",
    [
      1587
    ]
  ],
  [
    [
      126639,
      126639
    ],
    "mapped",
    [
      1593
    ]
  ],
  [
    [
      126640,
      126640
    ],
    "mapped",
    [
      1601
    ]
  ],
  [
    [
      126641,
      126641
    ],
    "mapped",
    [
      1589
    ]
  ],
  [
    [
      126642,
      126642
    ],
    "mapped",
    [
      1602
    ]
  ],
  [
    [
      126643,
      126643
    ],
    "mapped",
    [
      1585
    ]
  ],
  [
    [
      126644,
      126644
    ],
    "mapped",
    [
      1588
    ]
  ],
  [
    [
      126645,
      126645
    ],
    "mapped",
    [
      1578
    ]
  ],
  [
    [
      126646,
      126646
    ],
    "mapped",
    [
      1579
    ]
  ],
  [
    [
      126647,
      126647
    ],
    "mapped",
    [
      1582
    ]
  ],
  [
    [
      126648,
      126648
    ],
    "mapped",
    [
      1584
    ]
  ],
  [
    [
      126649,
      126649
    ],
    "mapped",
    [
      1590
    ]
  ],
  [
    [
      126650,
      126650
    ],
    "mapped",
    [
      1592
    ]
  ],
  [
    [
      126651,
      126651
    ],
    "mapped",
    [
      1594
    ]
  ],
  [
    [
      126652,
      126703
    ],
    "disallowed"
  ],
  [
    [
      126704,
      126705
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      126706,
      126975
    ],
    "disallowed"
  ],
  [
    [
      126976,
      127019
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127020,
      127023
    ],
    "disallowed"
  ],
  [
    [
      127024,
      127123
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127124,
      127135
    ],
    "disallowed"
  ],
  [
    [
      127136,
      127150
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127151,
      127152
    ],
    "disallowed"
  ],
  [
    [
      127153,
      127166
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127167,
      127167
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127168,
      127168
    ],
    "disallowed"
  ],
  [
    [
      127169,
      127183
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127184,
      127184
    ],
    "disallowed"
  ],
  [
    [
      127185,
      127199
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127200,
      127221
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127222,
      127231
    ],
    "disallowed"
  ],
  [
    [
      127232,
      127232
    ],
    "disallowed"
  ],
  [
    [
      127233,
      127233
    ],
    "disallowed_STD3_mapped",
    [
      48,
      44
    ]
  ],
  [
    [
      127234,
      127234
    ],
    "disallowed_STD3_mapped",
    [
      49,
      44
    ]
  ],
  [
    [
      127235,
      127235
    ],
    "disallowed_STD3_mapped",
    [
      50,
      44
    ]
  ],
  [
    [
      127236,
      127236
    ],
    "disallowed_STD3_mapped",
    [
      51,
      44
    ]
  ],
  [
    [
      127237,
      127237
    ],
    "disallowed_STD3_mapped",
    [
      52,
      44
    ]
  ],
  [
    [
      127238,
      127238
    ],
    "disallowed_STD3_mapped",
    [
      53,
      44
    ]
  ],
  [
    [
      127239,
      127239
    ],
    "disallowed_STD3_mapped",
    [
      54,
      44
    ]
  ],
  [
    [
      127240,
      127240
    ],
    "disallowed_STD3_mapped",
    [
      55,
      44
    ]
  ],
  [
    [
      127241,
      127241
    ],
    "disallowed_STD3_mapped",
    [
      56,
      44
    ]
  ],
  [
    [
      127242,
      127242
    ],
    "disallowed_STD3_mapped",
    [
      57,
      44
    ]
  ],
  [
    [
      127243,
      127244
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127245,
      127247
    ],
    "disallowed"
  ],
  [
    [
      127248,
      127248
    ],
    "disallowed_STD3_mapped",
    [
      40,
      97,
      41
    ]
  ],
  [
    [
      127249,
      127249
    ],
    "disallowed_STD3_mapped",
    [
      40,
      98,
      41
    ]
  ],
  [
    [
      127250,
      127250
    ],
    "disallowed_STD3_mapped",
    [
      40,
      99,
      41
    ]
  ],
  [
    [
      127251,
      127251
    ],
    "disallowed_STD3_mapped",
    [
      40,
      100,
      41
    ]
  ],
  [
    [
      127252,
      127252
    ],
    "disallowed_STD3_mapped",
    [
      40,
      101,
      41
    ]
  ],
  [
    [
      127253,
      127253
    ],
    "disallowed_STD3_mapped",
    [
      40,
      102,
      41
    ]
  ],
  [
    [
      127254,
      127254
    ],
    "disallowed_STD3_mapped",
    [
      40,
      103,
      41
    ]
  ],
  [
    [
      127255,
      127255
    ],
    "disallowed_STD3_mapped",
    [
      40,
      104,
      41
    ]
  ],
  [
    [
      127256,
      127256
    ],
    "disallowed_STD3_mapped",
    [
      40,
      105,
      41
    ]
  ],
  [
    [
      127257,
      127257
    ],
    "disallowed_STD3_mapped",
    [
      40,
      106,
      41
    ]
  ],
  [
    [
      127258,
      127258
    ],
    "disallowed_STD3_mapped",
    [
      40,
      107,
      41
    ]
  ],
  [
    [
      127259,
      127259
    ],
    "disallowed_STD3_mapped",
    [
      40,
      108,
      41
    ]
  ],
  [
    [
      127260,
      127260
    ],
    "disallowed_STD3_mapped",
    [
      40,
      109,
      41
    ]
  ],
  [
    [
      127261,
      127261
    ],
    "disallowed_STD3_mapped",
    [
      40,
      110,
      41
    ]
  ],
  [
    [
      127262,
      127262
    ],
    "disallowed_STD3_mapped",
    [
      40,
      111,
      41
    ]
  ],
  [
    [
      127263,
      127263
    ],
    "disallowed_STD3_mapped",
    [
      40,
      112,
      41
    ]
  ],
  [
    [
      127264,
      127264
    ],
    "disallowed_STD3_mapped",
    [
      40,
      113,
      41
    ]
  ],
  [
    [
      127265,
      127265
    ],
    "disallowed_STD3_mapped",
    [
      40,
      114,
      41
    ]
  ],
  [
    [
      127266,
      127266
    ],
    "disallowed_STD3_mapped",
    [
      40,
      115,
      41
    ]
  ],
  [
    [
      127267,
      127267
    ],
    "disallowed_STD3_mapped",
    [
      40,
      116,
      41
    ]
  ],
  [
    [
      127268,
      127268
    ],
    "disallowed_STD3_mapped",
    [
      40,
      117,
      41
    ]
  ],
  [
    [
      127269,
      127269
    ],
    "disallowed_STD3_mapped",
    [
      40,
      118,
      41
    ]
  ],
  [
    [
      127270,
      127270
    ],
    "disallowed_STD3_mapped",
    [
      40,
      119,
      41
    ]
  ],
  [
    [
      127271,
      127271
    ],
    "disallowed_STD3_mapped",
    [
      40,
      120,
      41
    ]
  ],
  [
    [
      127272,
      127272
    ],
    "disallowed_STD3_mapped",
    [
      40,
      121,
      41
    ]
  ],
  [
    [
      127273,
      127273
    ],
    "disallowed_STD3_mapped",
    [
      40,
      122,
      41
    ]
  ],
  [
    [
      127274,
      127274
    ],
    "mapped",
    [
      12308,
      115,
      12309
    ]
  ],
  [
    [
      127275,
      127275
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      127276,
      127276
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      127277,
      127277
    ],
    "mapped",
    [
      99,
      100
    ]
  ],
  [
    [
      127278,
      127278
    ],
    "mapped",
    [
      119,
      122
    ]
  ],
  [
    [
      127279,
      127279
    ],
    "disallowed"
  ],
  [
    [
      127280,
      127280
    ],
    "mapped",
    [
      97
    ]
  ],
  [
    [
      127281,
      127281
    ],
    "mapped",
    [
      98
    ]
  ],
  [
    [
      127282,
      127282
    ],
    "mapped",
    [
      99
    ]
  ],
  [
    [
      127283,
      127283
    ],
    "mapped",
    [
      100
    ]
  ],
  [
    [
      127284,
      127284
    ],
    "mapped",
    [
      101
    ]
  ],
  [
    [
      127285,
      127285
    ],
    "mapped",
    [
      102
    ]
  ],
  [
    [
      127286,
      127286
    ],
    "mapped",
    [
      103
    ]
  ],
  [
    [
      127287,
      127287
    ],
    "mapped",
    [
      104
    ]
  ],
  [
    [
      127288,
      127288
    ],
    "mapped",
    [
      105
    ]
  ],
  [
    [
      127289,
      127289
    ],
    "mapped",
    [
      106
    ]
  ],
  [
    [
      127290,
      127290
    ],
    "mapped",
    [
      107
    ]
  ],
  [
    [
      127291,
      127291
    ],
    "mapped",
    [
      108
    ]
  ],
  [
    [
      127292,
      127292
    ],
    "mapped",
    [
      109
    ]
  ],
  [
    [
      127293,
      127293
    ],
    "mapped",
    [
      110
    ]
  ],
  [
    [
      127294,
      127294
    ],
    "mapped",
    [
      111
    ]
  ],
  [
    [
      127295,
      127295
    ],
    "mapped",
    [
      112
    ]
  ],
  [
    [
      127296,
      127296
    ],
    "mapped",
    [
      113
    ]
  ],
  [
    [
      127297,
      127297
    ],
    "mapped",
    [
      114
    ]
  ],
  [
    [
      127298,
      127298
    ],
    "mapped",
    [
      115
    ]
  ],
  [
    [
      127299,
      127299
    ],
    "mapped",
    [
      116
    ]
  ],
  [
    [
      127300,
      127300
    ],
    "mapped",
    [
      117
    ]
  ],
  [
    [
      127301,
      127301
    ],
    "mapped",
    [
      118
    ]
  ],
  [
    [
      127302,
      127302
    ],
    "mapped",
    [
      119
    ]
  ],
  [
    [
      127303,
      127303
    ],
    "mapped",
    [
      120
    ]
  ],
  [
    [
      127304,
      127304
    ],
    "mapped",
    [
      121
    ]
  ],
  [
    [
      127305,
      127305
    ],
    "mapped",
    [
      122
    ]
  ],
  [
    [
      127306,
      127306
    ],
    "mapped",
    [
      104,
      118
    ]
  ],
  [
    [
      127307,
      127307
    ],
    "mapped",
    [
      109,
      118
    ]
  ],
  [
    [
      127308,
      127308
    ],
    "mapped",
    [
      115,
      100
    ]
  ],
  [
    [
      127309,
      127309
    ],
    "mapped",
    [
      115,
      115
    ]
  ],
  [
    [
      127310,
      127310
    ],
    "mapped",
    [
      112,
      112,
      118
    ]
  ],
  [
    [
      127311,
      127311
    ],
    "mapped",
    [
      119,
      99
    ]
  ],
  [
    [
      127312,
      127318
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127319,
      127319
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127320,
      127326
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127327,
      127327
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127328,
      127337
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127338,
      127338
    ],
    "mapped",
    [
      109,
      99
    ]
  ],
  [
    [
      127339,
      127339
    ],
    "mapped",
    [
      109,
      100
    ]
  ],
  [
    [
      127340,
      127343
    ],
    "disallowed"
  ],
  [
    [
      127344,
      127352
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127353,
      127353
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127354,
      127354
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127355,
      127356
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127357,
      127358
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127359,
      127359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127360,
      127369
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127370,
      127373
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127374,
      127375
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127376,
      127376
    ],
    "mapped",
    [
      100,
      106
    ]
  ],
  [
    [
      127377,
      127386
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127387,
      127461
    ],
    "disallowed"
  ],
  [
    [
      127462,
      127487
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127488,
      127488
    ],
    "mapped",
    [
      12411,
      12363
    ]
  ],
  [
    [
      127489,
      127489
    ],
    "mapped",
    [
      12467,
      12467
    ]
  ],
  [
    [
      127490,
      127490
    ],
    "mapped",
    [
      12469
    ]
  ],
  [
    [
      127491,
      127503
    ],
    "disallowed"
  ],
  [
    [
      127504,
      127504
    ],
    "mapped",
    [
      25163
    ]
  ],
  [
    [
      127505,
      127505
    ],
    "mapped",
    [
      23383
    ]
  ],
  [
    [
      127506,
      127506
    ],
    "mapped",
    [
      21452
    ]
  ],
  [
    [
      127507,
      127507
    ],
    "mapped",
    [
      12487
    ]
  ],
  [
    [
      127508,
      127508
    ],
    "mapped",
    [
      20108
    ]
  ],
  [
    [
      127509,
      127509
    ],
    "mapped",
    [
      22810
    ]
  ],
  [
    [
      127510,
      127510
    ],
    "mapped",
    [
      35299
    ]
  ],
  [
    [
      127511,
      127511
    ],
    "mapped",
    [
      22825
    ]
  ],
  [
    [
      127512,
      127512
    ],
    "mapped",
    [
      20132
    ]
  ],
  [
    [
      127513,
      127513
    ],
    "mapped",
    [
      26144
    ]
  ],
  [
    [
      127514,
      127514
    ],
    "mapped",
    [
      28961
    ]
  ],
  [
    [
      127515,
      127515
    ],
    "mapped",
    [
      26009
    ]
  ],
  [
    [
      127516,
      127516
    ],
    "mapped",
    [
      21069
    ]
  ],
  [
    [
      127517,
      127517
    ],
    "mapped",
    [
      24460
    ]
  ],
  [
    [
      127518,
      127518
    ],
    "mapped",
    [
      20877
    ]
  ],
  [
    [
      127519,
      127519
    ],
    "mapped",
    [
      26032
    ]
  ],
  [
    [
      127520,
      127520
    ],
    "mapped",
    [
      21021
    ]
  ],
  [
    [
      127521,
      127521
    ],
    "mapped",
    [
      32066
    ]
  ],
  [
    [
      127522,
      127522
    ],
    "mapped",
    [
      29983
    ]
  ],
  [
    [
      127523,
      127523
    ],
    "mapped",
    [
      36009
    ]
  ],
  [
    [
      127524,
      127524
    ],
    "mapped",
    [
      22768
    ]
  ],
  [
    [
      127525,
      127525
    ],
    "mapped",
    [
      21561
    ]
  ],
  [
    [
      127526,
      127526
    ],
    "mapped",
    [
      28436
    ]
  ],
  [
    [
      127527,
      127527
    ],
    "mapped",
    [
      25237
    ]
  ],
  [
    [
      127528,
      127528
    ],
    "mapped",
    [
      25429
    ]
  ],
  [
    [
      127529,
      127529
    ],
    "mapped",
    [
      19968
    ]
  ],
  [
    [
      127530,
      127530
    ],
    "mapped",
    [
      19977
    ]
  ],
  [
    [
      127531,
      127531
    ],
    "mapped",
    [
      36938
    ]
  ],
  [
    [
      127532,
      127532
    ],
    "mapped",
    [
      24038
    ]
  ],
  [
    [
      127533,
      127533
    ],
    "mapped",
    [
      20013
    ]
  ],
  [
    [
      127534,
      127534
    ],
    "mapped",
    [
      21491
    ]
  ],
  [
    [
      127535,
      127535
    ],
    "mapped",
    [
      25351
    ]
  ],
  [
    [
      127536,
      127536
    ],
    "mapped",
    [
      36208
    ]
  ],
  [
    [
      127537,
      127537
    ],
    "mapped",
    [
      25171
    ]
  ],
  [
    [
      127538,
      127538
    ],
    "mapped",
    [
      31105
    ]
  ],
  [
    [
      127539,
      127539
    ],
    "mapped",
    [
      31354
    ]
  ],
  [
    [
      127540,
      127540
    ],
    "mapped",
    [
      21512
    ]
  ],
  [
    [
      127541,
      127541
    ],
    "mapped",
    [
      28288
    ]
  ],
  [
    [
      127542,
      127542
    ],
    "mapped",
    [
      26377
    ]
  ],
  [
    [
      127543,
      127543
    ],
    "mapped",
    [
      26376
    ]
  ],
  [
    [
      127544,
      127544
    ],
    "mapped",
    [
      30003
    ]
  ],
  [
    [
      127545,
      127545
    ],
    "mapped",
    [
      21106
    ]
  ],
  [
    [
      127546,
      127546
    ],
    "mapped",
    [
      21942
    ]
  ],
  [
    [
      127547,
      127551
    ],
    "disallowed"
  ],
  [
    [
      127552,
      127552
    ],
    "mapped",
    [
      12308,
      26412,
      12309
    ]
  ],
  [
    [
      127553,
      127553
    ],
    "mapped",
    [
      12308,
      19977,
      12309
    ]
  ],
  [
    [
      127554,
      127554
    ],
    "mapped",
    [
      12308,
      20108,
      12309
    ]
  ],
  [
    [
      127555,
      127555
    ],
    "mapped",
    [
      12308,
      23433,
      12309
    ]
  ],
  [
    [
      127556,
      127556
    ],
    "mapped",
    [
      12308,
      28857,
      12309
    ]
  ],
  [
    [
      127557,
      127557
    ],
    "mapped",
    [
      12308,
      25171,
      12309
    ]
  ],
  [
    [
      127558,
      127558
    ],
    "mapped",
    [
      12308,
      30423,
      12309
    ]
  ],
  [
    [
      127559,
      127559
    ],
    "mapped",
    [
      12308,
      21213,
      12309
    ]
  ],
  [
    [
      127560,
      127560
    ],
    "mapped",
    [
      12308,
      25943,
      12309
    ]
  ],
  [
    [
      127561,
      127567
    ],
    "disallowed"
  ],
  [
    [
      127568,
      127568
    ],
    "mapped",
    [
      24471
    ]
  ],
  [
    [
      127569,
      127569
    ],
    "mapped",
    [
      21487
    ]
  ],
  [
    [
      127570,
      127743
    ],
    "disallowed"
  ],
  [
    [
      127744,
      127776
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127777,
      127788
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127789,
      127791
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127792,
      127797
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127798,
      127798
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127799,
      127868
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127869,
      127869
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127870,
      127871
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127872,
      127891
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127892,
      127903
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127904,
      127940
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127941,
      127941
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127942,
      127946
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127947,
      127950
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127951,
      127955
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127956,
      127967
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127968,
      127984
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127985,
      127991
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      127992,
      127999
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128e3,
      128062
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128063,
      128063
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128064,
      128064
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128065,
      128065
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128066,
      128247
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128248,
      128248
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128249,
      128252
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128253,
      128254
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128255,
      128255
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128256,
      128317
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128318,
      128319
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128320,
      128323
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128324,
      128330
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128331,
      128335
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128336,
      128359
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128360,
      128377
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128378,
      128378
    ],
    "disallowed"
  ],
  [
    [
      128379,
      128419
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128420,
      128420
    ],
    "disallowed"
  ],
  [
    [
      128421,
      128506
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128507,
      128511
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128512,
      128512
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128513,
      128528
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128529,
      128529
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128530,
      128532
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128533,
      128533
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128534,
      128534
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128535,
      128535
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128536,
      128536
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128537,
      128537
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128538,
      128538
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128539,
      128539
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128540,
      128542
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128543,
      128543
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128544,
      128549
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128550,
      128551
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128552,
      128555
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128556,
      128556
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128557,
      128557
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128558,
      128559
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128560,
      128563
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128564,
      128564
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128565,
      128576
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128577,
      128578
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128579,
      128580
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128581,
      128591
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128592,
      128639
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128640,
      128709
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128710,
      128719
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128720,
      128720
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128721,
      128735
    ],
    "disallowed"
  ],
  [
    [
      128736,
      128748
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128749,
      128751
    ],
    "disallowed"
  ],
  [
    [
      128752,
      128755
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128756,
      128767
    ],
    "disallowed"
  ],
  [
    [
      128768,
      128883
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128884,
      128895
    ],
    "disallowed"
  ],
  [
    [
      128896,
      128980
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      128981,
      129023
    ],
    "disallowed"
  ],
  [
    [
      129024,
      129035
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129036,
      129039
    ],
    "disallowed"
  ],
  [
    [
      129040,
      129095
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129096,
      129103
    ],
    "disallowed"
  ],
  [
    [
      129104,
      129113
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129114,
      129119
    ],
    "disallowed"
  ],
  [
    [
      129120,
      129159
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129160,
      129167
    ],
    "disallowed"
  ],
  [
    [
      129168,
      129197
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129198,
      129295
    ],
    "disallowed"
  ],
  [
    [
      129296,
      129304
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129305,
      129407
    ],
    "disallowed"
  ],
  [
    [
      129408,
      129412
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129413,
      129471
    ],
    "disallowed"
  ],
  [
    [
      129472,
      129472
    ],
    "valid",
    [],
    "NV8"
  ],
  [
    [
      129473,
      131069
    ],
    "disallowed"
  ],
  [
    [
      131070,
      131071
    ],
    "disallowed"
  ],
  [
    [
      131072,
      173782
    ],
    "valid"
  ],
  [
    [
      173783,
      173823
    ],
    "disallowed"
  ],
  [
    [
      173824,
      177972
    ],
    "valid"
  ],
  [
    [
      177973,
      177983
    ],
    "disallowed"
  ],
  [
    [
      177984,
      178205
    ],
    "valid"
  ],
  [
    [
      178206,
      178207
    ],
    "disallowed"
  ],
  [
    [
      178208,
      183969
    ],
    "valid"
  ],
  [
    [
      183970,
      194559
    ],
    "disallowed"
  ],
  [
    [
      194560,
      194560
    ],
    "mapped",
    [
      20029
    ]
  ],
  [
    [
      194561,
      194561
    ],
    "mapped",
    [
      20024
    ]
  ],
  [
    [
      194562,
      194562
    ],
    "mapped",
    [
      20033
    ]
  ],
  [
    [
      194563,
      194563
    ],
    "mapped",
    [
      131362
    ]
  ],
  [
    [
      194564,
      194564
    ],
    "mapped",
    [
      20320
    ]
  ],
  [
    [
      194565,
      194565
    ],
    "mapped",
    [
      20398
    ]
  ],
  [
    [
      194566,
      194566
    ],
    "mapped",
    [
      20411
    ]
  ],
  [
    [
      194567,
      194567
    ],
    "mapped",
    [
      20482
    ]
  ],
  [
    [
      194568,
      194568
    ],
    "mapped",
    [
      20602
    ]
  ],
  [
    [
      194569,
      194569
    ],
    "mapped",
    [
      20633
    ]
  ],
  [
    [
      194570,
      194570
    ],
    "mapped",
    [
      20711
    ]
  ],
  [
    [
      194571,
      194571
    ],
    "mapped",
    [
      20687
    ]
  ],
  [
    [
      194572,
      194572
    ],
    "mapped",
    [
      13470
    ]
  ],
  [
    [
      194573,
      194573
    ],
    "mapped",
    [
      132666
    ]
  ],
  [
    [
      194574,
      194574
    ],
    "mapped",
    [
      20813
    ]
  ],
  [
    [
      194575,
      194575
    ],
    "mapped",
    [
      20820
    ]
  ],
  [
    [
      194576,
      194576
    ],
    "mapped",
    [
      20836
    ]
  ],
  [
    [
      194577,
      194577
    ],
    "mapped",
    [
      20855
    ]
  ],
  [
    [
      194578,
      194578
    ],
    "mapped",
    [
      132380
    ]
  ],
  [
    [
      194579,
      194579
    ],
    "mapped",
    [
      13497
    ]
  ],
  [
    [
      194580,
      194580
    ],
    "mapped",
    [
      20839
    ]
  ],
  [
    [
      194581,
      194581
    ],
    "mapped",
    [
      20877
    ]
  ],
  [
    [
      194582,
      194582
    ],
    "mapped",
    [
      132427
    ]
  ],
  [
    [
      194583,
      194583
    ],
    "mapped",
    [
      20887
    ]
  ],
  [
    [
      194584,
      194584
    ],
    "mapped",
    [
      20900
    ]
  ],
  [
    [
      194585,
      194585
    ],
    "mapped",
    [
      20172
    ]
  ],
  [
    [
      194586,
      194586
    ],
    "mapped",
    [
      20908
    ]
  ],
  [
    [
      194587,
      194587
    ],
    "mapped",
    [
      20917
    ]
  ],
  [
    [
      194588,
      194588
    ],
    "mapped",
    [
      168415
    ]
  ],
  [
    [
      194589,
      194589
    ],
    "mapped",
    [
      20981
    ]
  ],
  [
    [
      194590,
      194590
    ],
    "mapped",
    [
      20995
    ]
  ],
  [
    [
      194591,
      194591
    ],
    "mapped",
    [
      13535
    ]
  ],
  [
    [
      194592,
      194592
    ],
    "mapped",
    [
      21051
    ]
  ],
  [
    [
      194593,
      194593
    ],
    "mapped",
    [
      21062
    ]
  ],
  [
    [
      194594,
      194594
    ],
    "mapped",
    [
      21106
    ]
  ],
  [
    [
      194595,
      194595
    ],
    "mapped",
    [
      21111
    ]
  ],
  [
    [
      194596,
      194596
    ],
    "mapped",
    [
      13589
    ]
  ],
  [
    [
      194597,
      194597
    ],
    "mapped",
    [
      21191
    ]
  ],
  [
    [
      194598,
      194598
    ],
    "mapped",
    [
      21193
    ]
  ],
  [
    [
      194599,
      194599
    ],
    "mapped",
    [
      21220
    ]
  ],
  [
    [
      194600,
      194600
    ],
    "mapped",
    [
      21242
    ]
  ],
  [
    [
      194601,
      194601
    ],
    "mapped",
    [
      21253
    ]
  ],
  [
    [
      194602,
      194602
    ],
    "mapped",
    [
      21254
    ]
  ],
  [
    [
      194603,
      194603
    ],
    "mapped",
    [
      21271
    ]
  ],
  [
    [
      194604,
      194604
    ],
    "mapped",
    [
      21321
    ]
  ],
  [
    [
      194605,
      194605
    ],
    "mapped",
    [
      21329
    ]
  ],
  [
    [
      194606,
      194606
    ],
    "mapped",
    [
      21338
    ]
  ],
  [
    [
      194607,
      194607
    ],
    "mapped",
    [
      21363
    ]
  ],
  [
    [
      194608,
      194608
    ],
    "mapped",
    [
      21373
    ]
  ],
  [
    [
      194609,
      194611
    ],
    "mapped",
    [
      21375
    ]
  ],
  [
    [
      194612,
      194612
    ],
    "mapped",
    [
      133676
    ]
  ],
  [
    [
      194613,
      194613
    ],
    "mapped",
    [
      28784
    ]
  ],
  [
    [
      194614,
      194614
    ],
    "mapped",
    [
      21450
    ]
  ],
  [
    [
      194615,
      194615
    ],
    "mapped",
    [
      21471
    ]
  ],
  [
    [
      194616,
      194616
    ],
    "mapped",
    [
      133987
    ]
  ],
  [
    [
      194617,
      194617
    ],
    "mapped",
    [
      21483
    ]
  ],
  [
    [
      194618,
      194618
    ],
    "mapped",
    [
      21489
    ]
  ],
  [
    [
      194619,
      194619
    ],
    "mapped",
    [
      21510
    ]
  ],
  [
    [
      194620,
      194620
    ],
    "mapped",
    [
      21662
    ]
  ],
  [
    [
      194621,
      194621
    ],
    "mapped",
    [
      21560
    ]
  ],
  [
    [
      194622,
      194622
    ],
    "mapped",
    [
      21576
    ]
  ],
  [
    [
      194623,
      194623
    ],
    "mapped",
    [
      21608
    ]
  ],
  [
    [
      194624,
      194624
    ],
    "mapped",
    [
      21666
    ]
  ],
  [
    [
      194625,
      194625
    ],
    "mapped",
    [
      21750
    ]
  ],
  [
    [
      194626,
      194626
    ],
    "mapped",
    [
      21776
    ]
  ],
  [
    [
      194627,
      194627
    ],
    "mapped",
    [
      21843
    ]
  ],
  [
    [
      194628,
      194628
    ],
    "mapped",
    [
      21859
    ]
  ],
  [
    [
      194629,
      194630
    ],
    "mapped",
    [
      21892
    ]
  ],
  [
    [
      194631,
      194631
    ],
    "mapped",
    [
      21913
    ]
  ],
  [
    [
      194632,
      194632
    ],
    "mapped",
    [
      21931
    ]
  ],
  [
    [
      194633,
      194633
    ],
    "mapped",
    [
      21939
    ]
  ],
  [
    [
      194634,
      194634
    ],
    "mapped",
    [
      21954
    ]
  ],
  [
    [
      194635,
      194635
    ],
    "mapped",
    [
      22294
    ]
  ],
  [
    [
      194636,
      194636
    ],
    "mapped",
    [
      22022
    ]
  ],
  [
    [
      194637,
      194637
    ],
    "mapped",
    [
      22295
    ]
  ],
  [
    [
      194638,
      194638
    ],
    "mapped",
    [
      22097
    ]
  ],
  [
    [
      194639,
      194639
    ],
    "mapped",
    [
      22132
    ]
  ],
  [
    [
      194640,
      194640
    ],
    "mapped",
    [
      20999
    ]
  ],
  [
    [
      194641,
      194641
    ],
    "mapped",
    [
      22766
    ]
  ],
  [
    [
      194642,
      194642
    ],
    "mapped",
    [
      22478
    ]
  ],
  [
    [
      194643,
      194643
    ],
    "mapped",
    [
      22516
    ]
  ],
  [
    [
      194644,
      194644
    ],
    "mapped",
    [
      22541
    ]
  ],
  [
    [
      194645,
      194645
    ],
    "mapped",
    [
      22411
    ]
  ],
  [
    [
      194646,
      194646
    ],
    "mapped",
    [
      22578
    ]
  ],
  [
    [
      194647,
      194647
    ],
    "mapped",
    [
      22577
    ]
  ],
  [
    [
      194648,
      194648
    ],
    "mapped",
    [
      22700
    ]
  ],
  [
    [
      194649,
      194649
    ],
    "mapped",
    [
      136420
    ]
  ],
  [
    [
      194650,
      194650
    ],
    "mapped",
    [
      22770
    ]
  ],
  [
    [
      194651,
      194651
    ],
    "mapped",
    [
      22775
    ]
  ],
  [
    [
      194652,
      194652
    ],
    "mapped",
    [
      22790
    ]
  ],
  [
    [
      194653,
      194653
    ],
    "mapped",
    [
      22810
    ]
  ],
  [
    [
      194654,
      194654
    ],
    "mapped",
    [
      22818
    ]
  ],
  [
    [
      194655,
      194655
    ],
    "mapped",
    [
      22882
    ]
  ],
  [
    [
      194656,
      194656
    ],
    "mapped",
    [
      136872
    ]
  ],
  [
    [
      194657,
      194657
    ],
    "mapped",
    [
      136938
    ]
  ],
  [
    [
      194658,
      194658
    ],
    "mapped",
    [
      23020
    ]
  ],
  [
    [
      194659,
      194659
    ],
    "mapped",
    [
      23067
    ]
  ],
  [
    [
      194660,
      194660
    ],
    "mapped",
    [
      23079
    ]
  ],
  [
    [
      194661,
      194661
    ],
    "mapped",
    [
      23e3
    ]
  ],
  [
    [
      194662,
      194662
    ],
    "mapped",
    [
      23142
    ]
  ],
  [
    [
      194663,
      194663
    ],
    "mapped",
    [
      14062
    ]
  ],
  [
    [
      194664,
      194664
    ],
    "disallowed"
  ],
  [
    [
      194665,
      194665
    ],
    "mapped",
    [
      23304
    ]
  ],
  [
    [
      194666,
      194667
    ],
    "mapped",
    [
      23358
    ]
  ],
  [
    [
      194668,
      194668
    ],
    "mapped",
    [
      137672
    ]
  ],
  [
    [
      194669,
      194669
    ],
    "mapped",
    [
      23491
    ]
  ],
  [
    [
      194670,
      194670
    ],
    "mapped",
    [
      23512
    ]
  ],
  [
    [
      194671,
      194671
    ],
    "mapped",
    [
      23527
    ]
  ],
  [
    [
      194672,
      194672
    ],
    "mapped",
    [
      23539
    ]
  ],
  [
    [
      194673,
      194673
    ],
    "mapped",
    [
      138008
    ]
  ],
  [
    [
      194674,
      194674
    ],
    "mapped",
    [
      23551
    ]
  ],
  [
    [
      194675,
      194675
    ],
    "mapped",
    [
      23558
    ]
  ],
  [
    [
      194676,
      194676
    ],
    "disallowed"
  ],
  [
    [
      194677,
      194677
    ],
    "mapped",
    [
      23586
    ]
  ],
  [
    [
      194678,
      194678
    ],
    "mapped",
    [
      14209
    ]
  ],
  [
    [
      194679,
      194679
    ],
    "mapped",
    [
      23648
    ]
  ],
  [
    [
      194680,
      194680
    ],
    "mapped",
    [
      23662
    ]
  ],
  [
    [
      194681,
      194681
    ],
    "mapped",
    [
      23744
    ]
  ],
  [
    [
      194682,
      194682
    ],
    "mapped",
    [
      23693
    ]
  ],
  [
    [
      194683,
      194683
    ],
    "mapped",
    [
      138724
    ]
  ],
  [
    [
      194684,
      194684
    ],
    "mapped",
    [
      23875
    ]
  ],
  [
    [
      194685,
      194685
    ],
    "mapped",
    [
      138726
    ]
  ],
  [
    [
      194686,
      194686
    ],
    "mapped",
    [
      23918
    ]
  ],
  [
    [
      194687,
      194687
    ],
    "mapped",
    [
      23915
    ]
  ],
  [
    [
      194688,
      194688
    ],
    "mapped",
    [
      23932
    ]
  ],
  [
    [
      194689,
      194689
    ],
    "mapped",
    [
      24033
    ]
  ],
  [
    [
      194690,
      194690
    ],
    "mapped",
    [
      24034
    ]
  ],
  [
    [
      194691,
      194691
    ],
    "mapped",
    [
      14383
    ]
  ],
  [
    [
      194692,
      194692
    ],
    "mapped",
    [
      24061
    ]
  ],
  [
    [
      194693,
      194693
    ],
    "mapped",
    [
      24104
    ]
  ],
  [
    [
      194694,
      194694
    ],
    "mapped",
    [
      24125
    ]
  ],
  [
    [
      194695,
      194695
    ],
    "mapped",
    [
      24169
    ]
  ],
  [
    [
      194696,
      194696
    ],
    "mapped",
    [
      14434
    ]
  ],
  [
    [
      194697,
      194697
    ],
    "mapped",
    [
      139651
    ]
  ],
  [
    [
      194698,
      194698
    ],
    "mapped",
    [
      14460
    ]
  ],
  [
    [
      194699,
      194699
    ],
    "mapped",
    [
      24240
    ]
  ],
  [
    [
      194700,
      194700
    ],
    "mapped",
    [
      24243
    ]
  ],
  [
    [
      194701,
      194701
    ],
    "mapped",
    [
      24246
    ]
  ],
  [
    [
      194702,
      194702
    ],
    "mapped",
    [
      24266
    ]
  ],
  [
    [
      194703,
      194703
    ],
    "mapped",
    [
      172946
    ]
  ],
  [
    [
      194704,
      194704
    ],
    "mapped",
    [
      24318
    ]
  ],
  [
    [
      194705,
      194706
    ],
    "mapped",
    [
      140081
    ]
  ],
  [
    [
      194707,
      194707
    ],
    "mapped",
    [
      33281
    ]
  ],
  [
    [
      194708,
      194709
    ],
    "mapped",
    [
      24354
    ]
  ],
  [
    [
      194710,
      194710
    ],
    "mapped",
    [
      14535
    ]
  ],
  [
    [
      194711,
      194711
    ],
    "mapped",
    [
      144056
    ]
  ],
  [
    [
      194712,
      194712
    ],
    "mapped",
    [
      156122
    ]
  ],
  [
    [
      194713,
      194713
    ],
    "mapped",
    [
      24418
    ]
  ],
  [
    [
      194714,
      194714
    ],
    "mapped",
    [
      24427
    ]
  ],
  [
    [
      194715,
      194715
    ],
    "mapped",
    [
      14563
    ]
  ],
  [
    [
      194716,
      194716
    ],
    "mapped",
    [
      24474
    ]
  ],
  [
    [
      194717,
      194717
    ],
    "mapped",
    [
      24525
    ]
  ],
  [
    [
      194718,
      194718
    ],
    "mapped",
    [
      24535
    ]
  ],
  [
    [
      194719,
      194719
    ],
    "mapped",
    [
      24569
    ]
  ],
  [
    [
      194720,
      194720
    ],
    "mapped",
    [
      24705
    ]
  ],
  [
    [
      194721,
      194721
    ],
    "mapped",
    [
      14650
    ]
  ],
  [
    [
      194722,
      194722
    ],
    "mapped",
    [
      14620
    ]
  ],
  [
    [
      194723,
      194723
    ],
    "mapped",
    [
      24724
    ]
  ],
  [
    [
      194724,
      194724
    ],
    "mapped",
    [
      141012
    ]
  ],
  [
    [
      194725,
      194725
    ],
    "mapped",
    [
      24775
    ]
  ],
  [
    [
      194726,
      194726
    ],
    "mapped",
    [
      24904
    ]
  ],
  [
    [
      194727,
      194727
    ],
    "mapped",
    [
      24908
    ]
  ],
  [
    [
      194728,
      194728
    ],
    "mapped",
    [
      24910
    ]
  ],
  [
    [
      194729,
      194729
    ],
    "mapped",
    [
      24908
    ]
  ],
  [
    [
      194730,
      194730
    ],
    "mapped",
    [
      24954
    ]
  ],
  [
    [
      194731,
      194731
    ],
    "mapped",
    [
      24974
    ]
  ],
  [
    [
      194732,
      194732
    ],
    "mapped",
    [
      25010
    ]
  ],
  [
    [
      194733,
      194733
    ],
    "mapped",
    [
      24996
    ]
  ],
  [
    [
      194734,
      194734
    ],
    "mapped",
    [
      25007
    ]
  ],
  [
    [
      194735,
      194735
    ],
    "mapped",
    [
      25054
    ]
  ],
  [
    [
      194736,
      194736
    ],
    "mapped",
    [
      25074
    ]
  ],
  [
    [
      194737,
      194737
    ],
    "mapped",
    [
      25078
    ]
  ],
  [
    [
      194738,
      194738
    ],
    "mapped",
    [
      25104
    ]
  ],
  [
    [
      194739,
      194739
    ],
    "mapped",
    [
      25115
    ]
  ],
  [
    [
      194740,
      194740
    ],
    "mapped",
    [
      25181
    ]
  ],
  [
    [
      194741,
      194741
    ],
    "mapped",
    [
      25265
    ]
  ],
  [
    [
      194742,
      194742
    ],
    "mapped",
    [
      25300
    ]
  ],
  [
    [
      194743,
      194743
    ],
    "mapped",
    [
      25424
    ]
  ],
  [
    [
      194744,
      194744
    ],
    "mapped",
    [
      142092
    ]
  ],
  [
    [
      194745,
      194745
    ],
    "mapped",
    [
      25405
    ]
  ],
  [
    [
      194746,
      194746
    ],
    "mapped",
    [
      25340
    ]
  ],
  [
    [
      194747,
      194747
    ],
    "mapped",
    [
      25448
    ]
  ],
  [
    [
      194748,
      194748
    ],
    "mapped",
    [
      25475
    ]
  ],
  [
    [
      194749,
      194749
    ],
    "mapped",
    [
      25572
    ]
  ],
  [
    [
      194750,
      194750
    ],
    "mapped",
    [
      142321
    ]
  ],
  [
    [
      194751,
      194751
    ],
    "mapped",
    [
      25634
    ]
  ],
  [
    [
      194752,
      194752
    ],
    "mapped",
    [
      25541
    ]
  ],
  [
    [
      194753,
      194753
    ],
    "mapped",
    [
      25513
    ]
  ],
  [
    [
      194754,
      194754
    ],
    "mapped",
    [
      14894
    ]
  ],
  [
    [
      194755,
      194755
    ],
    "mapped",
    [
      25705
    ]
  ],
  [
    [
      194756,
      194756
    ],
    "mapped",
    [
      25726
    ]
  ],
  [
    [
      194757,
      194757
    ],
    "mapped",
    [
      25757
    ]
  ],
  [
    [
      194758,
      194758
    ],
    "mapped",
    [
      25719
    ]
  ],
  [
    [
      194759,
      194759
    ],
    "mapped",
    [
      14956
    ]
  ],
  [
    [
      194760,
      194760
    ],
    "mapped",
    [
      25935
    ]
  ],
  [
    [
      194761,
      194761
    ],
    "mapped",
    [
      25964
    ]
  ],
  [
    [
      194762,
      194762
    ],
    "mapped",
    [
      143370
    ]
  ],
  [
    [
      194763,
      194763
    ],
    "mapped",
    [
      26083
    ]
  ],
  [
    [
      194764,
      194764
    ],
    "mapped",
    [
      26360
    ]
  ],
  [
    [
      194765,
      194765
    ],
    "mapped",
    [
      26185
    ]
  ],
  [
    [
      194766,
      194766
    ],
    "mapped",
    [
      15129
    ]
  ],
  [
    [
      194767,
      194767
    ],
    "mapped",
    [
      26257
    ]
  ],
  [
    [
      194768,
      194768
    ],
    "mapped",
    [
      15112
    ]
  ],
  [
    [
      194769,
      194769
    ],
    "mapped",
    [
      15076
    ]
  ],
  [
    [
      194770,
      194770
    ],
    "mapped",
    [
      20882
    ]
  ],
  [
    [
      194771,
      194771
    ],
    "mapped",
    [
      20885
    ]
  ],
  [
    [
      194772,
      194772
    ],
    "mapped",
    [
      26368
    ]
  ],
  [
    [
      194773,
      194773
    ],
    "mapped",
    [
      26268
    ]
  ],
  [
    [
      194774,
      194774
    ],
    "mapped",
    [
      32941
    ]
  ],
  [
    [
      194775,
      194775
    ],
    "mapped",
    [
      17369
    ]
  ],
  [
    [
      194776,
      194776
    ],
    "mapped",
    [
      26391
    ]
  ],
  [
    [
      194777,
      194777
    ],
    "mapped",
    [
      26395
    ]
  ],
  [
    [
      194778,
      194778
    ],
    "mapped",
    [
      26401
    ]
  ],
  [
    [
      194779,
      194779
    ],
    "mapped",
    [
      26462
    ]
  ],
  [
    [
      194780,
      194780
    ],
    "mapped",
    [
      26451
    ]
  ],
  [
    [
      194781,
      194781
    ],
    "mapped",
    [
      144323
    ]
  ],
  [
    [
      194782,
      194782
    ],
    "mapped",
    [
      15177
    ]
  ],
  [
    [
      194783,
      194783
    ],
    "mapped",
    [
      26618
    ]
  ],
  [
    [
      194784,
      194784
    ],
    "mapped",
    [
      26501
    ]
  ],
  [
    [
      194785,
      194785
    ],
    "mapped",
    [
      26706
    ]
  ],
  [
    [
      194786,
      194786
    ],
    "mapped",
    [
      26757
    ]
  ],
  [
    [
      194787,
      194787
    ],
    "mapped",
    [
      144493
    ]
  ],
  [
    [
      194788,
      194788
    ],
    "mapped",
    [
      26766
    ]
  ],
  [
    [
      194789,
      194789
    ],
    "mapped",
    [
      26655
    ]
  ],
  [
    [
      194790,
      194790
    ],
    "mapped",
    [
      26900
    ]
  ],
  [
    [
      194791,
      194791
    ],
    "mapped",
    [
      15261
    ]
  ],
  [
    [
      194792,
      194792
    ],
    "mapped",
    [
      26946
    ]
  ],
  [
    [
      194793,
      194793
    ],
    "mapped",
    [
      27043
    ]
  ],
  [
    [
      194794,
      194794
    ],
    "mapped",
    [
      27114
    ]
  ],
  [
    [
      194795,
      194795
    ],
    "mapped",
    [
      27304
    ]
  ],
  [
    [
      194796,
      194796
    ],
    "mapped",
    [
      145059
    ]
  ],
  [
    [
      194797,
      194797
    ],
    "mapped",
    [
      27355
    ]
  ],
  [
    [
      194798,
      194798
    ],
    "mapped",
    [
      15384
    ]
  ],
  [
    [
      194799,
      194799
    ],
    "mapped",
    [
      27425
    ]
  ],
  [
    [
      194800,
      194800
    ],
    "mapped",
    [
      145575
    ]
  ],
  [
    [
      194801,
      194801
    ],
    "mapped",
    [
      27476
    ]
  ],
  [
    [
      194802,
      194802
    ],
    "mapped",
    [
      15438
    ]
  ],
  [
    [
      194803,
      194803
    ],
    "mapped",
    [
      27506
    ]
  ],
  [
    [
      194804,
      194804
    ],
    "mapped",
    [
      27551
    ]
  ],
  [
    [
      194805,
      194805
    ],
    "mapped",
    [
      27578
    ]
  ],
  [
    [
      194806,
      194806
    ],
    "mapped",
    [
      27579
    ]
  ],
  [
    [
      194807,
      194807
    ],
    "mapped",
    [
      146061
    ]
  ],
  [
    [
      194808,
      194808
    ],
    "mapped",
    [
      138507
    ]
  ],
  [
    [
      194809,
      194809
    ],
    "mapped",
    [
      146170
    ]
  ],
  [
    [
      194810,
      194810
    ],
    "mapped",
    [
      27726
    ]
  ],
  [
    [
      194811,
      194811
    ],
    "mapped",
    [
      146620
    ]
  ],
  [
    [
      194812,
      194812
    ],
    "mapped",
    [
      27839
    ]
  ],
  [
    [
      194813,
      194813
    ],
    "mapped",
    [
      27853
    ]
  ],
  [
    [
      194814,
      194814
    ],
    "mapped",
    [
      27751
    ]
  ],
  [
    [
      194815,
      194815
    ],
    "mapped",
    [
      27926
    ]
  ],
  [
    [
      194816,
      194816
    ],
    "mapped",
    [
      27966
    ]
  ],
  [
    [
      194817,
      194817
    ],
    "mapped",
    [
      28023
    ]
  ],
  [
    [
      194818,
      194818
    ],
    "mapped",
    [
      27969
    ]
  ],
  [
    [
      194819,
      194819
    ],
    "mapped",
    [
      28009
    ]
  ],
  [
    [
      194820,
      194820
    ],
    "mapped",
    [
      28024
    ]
  ],
  [
    [
      194821,
      194821
    ],
    "mapped",
    [
      28037
    ]
  ],
  [
    [
      194822,
      194822
    ],
    "mapped",
    [
      146718
    ]
  ],
  [
    [
      194823,
      194823
    ],
    "mapped",
    [
      27956
    ]
  ],
  [
    [
      194824,
      194824
    ],
    "mapped",
    [
      28207
    ]
  ],
  [
    [
      194825,
      194825
    ],
    "mapped",
    [
      28270
    ]
  ],
  [
    [
      194826,
      194826
    ],
    "mapped",
    [
      15667
    ]
  ],
  [
    [
      194827,
      194827
    ],
    "mapped",
    [
      28363
    ]
  ],
  [
    [
      194828,
      194828
    ],
    "mapped",
    [
      28359
    ]
  ],
  [
    [
      194829,
      194829
    ],
    "mapped",
    [
      147153
    ]
  ],
  [
    [
      194830,
      194830
    ],
    "mapped",
    [
      28153
    ]
  ],
  [
    [
      194831,
      194831
    ],
    "mapped",
    [
      28526
    ]
  ],
  [
    [
      194832,
      194832
    ],
    "mapped",
    [
      147294
    ]
  ],
  [
    [
      194833,
      194833
    ],
    "mapped",
    [
      147342
    ]
  ],
  [
    [
      194834,
      194834
    ],
    "mapped",
    [
      28614
    ]
  ],
  [
    [
      194835,
      194835
    ],
    "mapped",
    [
      28729
    ]
  ],
  [
    [
      194836,
      194836
    ],
    "mapped",
    [
      28702
    ]
  ],
  [
    [
      194837,
      194837
    ],
    "mapped",
    [
      28699
    ]
  ],
  [
    [
      194838,
      194838
    ],
    "mapped",
    [
      15766
    ]
  ],
  [
    [
      194839,
      194839
    ],
    "mapped",
    [
      28746
    ]
  ],
  [
    [
      194840,
      194840
    ],
    "mapped",
    [
      28797
    ]
  ],
  [
    [
      194841,
      194841
    ],
    "mapped",
    [
      28791
    ]
  ],
  [
    [
      194842,
      194842
    ],
    "mapped",
    [
      28845
    ]
  ],
  [
    [
      194843,
      194843
    ],
    "mapped",
    [
      132389
    ]
  ],
  [
    [
      194844,
      194844
    ],
    "mapped",
    [
      28997
    ]
  ],
  [
    [
      194845,
      194845
    ],
    "mapped",
    [
      148067
    ]
  ],
  [
    [
      194846,
      194846
    ],
    "mapped",
    [
      29084
    ]
  ],
  [
    [
      194847,
      194847
    ],
    "disallowed"
  ],
  [
    [
      194848,
      194848
    ],
    "mapped",
    [
      29224
    ]
  ],
  [
    [
      194849,
      194849
    ],
    "mapped",
    [
      29237
    ]
  ],
  [
    [
      194850,
      194850
    ],
    "mapped",
    [
      29264
    ]
  ],
  [
    [
      194851,
      194851
    ],
    "mapped",
    [
      149e3
    ]
  ],
  [
    [
      194852,
      194852
    ],
    "mapped",
    [
      29312
    ]
  ],
  [
    [
      194853,
      194853
    ],
    "mapped",
    [
      29333
    ]
  ],
  [
    [
      194854,
      194854
    ],
    "mapped",
    [
      149301
    ]
  ],
  [
    [
      194855,
      194855
    ],
    "mapped",
    [
      149524
    ]
  ],
  [
    [
      194856,
      194856
    ],
    "mapped",
    [
      29562
    ]
  ],
  [
    [
      194857,
      194857
    ],
    "mapped",
    [
      29579
    ]
  ],
  [
    [
      194858,
      194858
    ],
    "mapped",
    [
      16044
    ]
  ],
  [
    [
      194859,
      194859
    ],
    "mapped",
    [
      29605
    ]
  ],
  [
    [
      194860,
      194861
    ],
    "mapped",
    [
      16056
    ]
  ],
  [
    [
      194862,
      194862
    ],
    "mapped",
    [
      29767
    ]
  ],
  [
    [
      194863,
      194863
    ],
    "mapped",
    [
      29788
    ]
  ],
  [
    [
      194864,
      194864
    ],
    "mapped",
    [
      29809
    ]
  ],
  [
    [
      194865,
      194865
    ],
    "mapped",
    [
      29829
    ]
  ],
  [
    [
      194866,
      194866
    ],
    "mapped",
    [
      29898
    ]
  ],
  [
    [
      194867,
      194867
    ],
    "mapped",
    [
      16155
    ]
  ],
  [
    [
      194868,
      194868
    ],
    "mapped",
    [
      29988
    ]
  ],
  [
    [
      194869,
      194869
    ],
    "mapped",
    [
      150582
    ]
  ],
  [
    [
      194870,
      194870
    ],
    "mapped",
    [
      30014
    ]
  ],
  [
    [
      194871,
      194871
    ],
    "mapped",
    [
      150674
    ]
  ],
  [
    [
      194872,
      194872
    ],
    "mapped",
    [
      30064
    ]
  ],
  [
    [
      194873,
      194873
    ],
    "mapped",
    [
      139679
    ]
  ],
  [
    [
      194874,
      194874
    ],
    "mapped",
    [
      30224
    ]
  ],
  [
    [
      194875,
      194875
    ],
    "mapped",
    [
      151457
    ]
  ],
  [
    [
      194876,
      194876
    ],
    "mapped",
    [
      151480
    ]
  ],
  [
    [
      194877,
      194877
    ],
    "mapped",
    [
      151620
    ]
  ],
  [
    [
      194878,
      194878
    ],
    "mapped",
    [
      16380
    ]
  ],
  [
    [
      194879,
      194879
    ],
    "mapped",
    [
      16392
    ]
  ],
  [
    [
      194880,
      194880
    ],
    "mapped",
    [
      30452
    ]
  ],
  [
    [
      194881,
      194881
    ],
    "mapped",
    [
      151795
    ]
  ],
  [
    [
      194882,
      194882
    ],
    "mapped",
    [
      151794
    ]
  ],
  [
    [
      194883,
      194883
    ],
    "mapped",
    [
      151833
    ]
  ],
  [
    [
      194884,
      194884
    ],
    "mapped",
    [
      151859
    ]
  ],
  [
    [
      194885,
      194885
    ],
    "mapped",
    [
      30494
    ]
  ],
  [
    [
      194886,
      194887
    ],
    "mapped",
    [
      30495
    ]
  ],
  [
    [
      194888,
      194888
    ],
    "mapped",
    [
      30538
    ]
  ],
  [
    [
      194889,
      194889
    ],
    "mapped",
    [
      16441
    ]
  ],
  [
    [
      194890,
      194890
    ],
    "mapped",
    [
      30603
    ]
  ],
  [
    [
      194891,
      194891
    ],
    "mapped",
    [
      16454
    ]
  ],
  [
    [
      194892,
      194892
    ],
    "mapped",
    [
      16534
    ]
  ],
  [
    [
      194893,
      194893
    ],
    "mapped",
    [
      152605
    ]
  ],
  [
    [
      194894,
      194894
    ],
    "mapped",
    [
      30798
    ]
  ],
  [
    [
      194895,
      194895
    ],
    "mapped",
    [
      30860
    ]
  ],
  [
    [
      194896,
      194896
    ],
    "mapped",
    [
      30924
    ]
  ],
  [
    [
      194897,
      194897
    ],
    "mapped",
    [
      16611
    ]
  ],
  [
    [
      194898,
      194898
    ],
    "mapped",
    [
      153126
    ]
  ],
  [
    [
      194899,
      194899
    ],
    "mapped",
    [
      31062
    ]
  ],
  [
    [
      194900,
      194900
    ],
    "mapped",
    [
      153242
    ]
  ],
  [
    [
      194901,
      194901
    ],
    "mapped",
    [
      153285
    ]
  ],
  [
    [
      194902,
      194902
    ],
    "mapped",
    [
      31119
    ]
  ],
  [
    [
      194903,
      194903
    ],
    "mapped",
    [
      31211
    ]
  ],
  [
    [
      194904,
      194904
    ],
    "mapped",
    [
      16687
    ]
  ],
  [
    [
      194905,
      194905
    ],
    "mapped",
    [
      31296
    ]
  ],
  [
    [
      194906,
      194906
    ],
    "mapped",
    [
      31306
    ]
  ],
  [
    [
      194907,
      194907
    ],
    "mapped",
    [
      31311
    ]
  ],
  [
    [
      194908,
      194908
    ],
    "mapped",
    [
      153980
    ]
  ],
  [
    [
      194909,
      194910
    ],
    "mapped",
    [
      154279
    ]
  ],
  [
    [
      194911,
      194911
    ],
    "disallowed"
  ],
  [
    [
      194912,
      194912
    ],
    "mapped",
    [
      16898
    ]
  ],
  [
    [
      194913,
      194913
    ],
    "mapped",
    [
      154539
    ]
  ],
  [
    [
      194914,
      194914
    ],
    "mapped",
    [
      31686
    ]
  ],
  [
    [
      194915,
      194915
    ],
    "mapped",
    [
      31689
    ]
  ],
  [
    [
      194916,
      194916
    ],
    "mapped",
    [
      16935
    ]
  ],
  [
    [
      194917,
      194917
    ],
    "mapped",
    [
      154752
    ]
  ],
  [
    [
      194918,
      194918
    ],
    "mapped",
    [
      31954
    ]
  ],
  [
    [
      194919,
      194919
    ],
    "mapped",
    [
      17056
    ]
  ],
  [
    [
      194920,
      194920
    ],
    "mapped",
    [
      31976
    ]
  ],
  [
    [
      194921,
      194921
    ],
    "mapped",
    [
      31971
    ]
  ],
  [
    [
      194922,
      194922
    ],
    "mapped",
    [
      32e3
    ]
  ],
  [
    [
      194923,
      194923
    ],
    "mapped",
    [
      155526
    ]
  ],
  [
    [
      194924,
      194924
    ],
    "mapped",
    [
      32099
    ]
  ],
  [
    [
      194925,
      194925
    ],
    "mapped",
    [
      17153
    ]
  ],
  [
    [
      194926,
      194926
    ],
    "mapped",
    [
      32199
    ]
  ],
  [
    [
      194927,
      194927
    ],
    "mapped",
    [
      32258
    ]
  ],
  [
    [
      194928,
      194928
    ],
    "mapped",
    [
      32325
    ]
  ],
  [
    [
      194929,
      194929
    ],
    "mapped",
    [
      17204
    ]
  ],
  [
    [
      194930,
      194930
    ],
    "mapped",
    [
      156200
    ]
  ],
  [
    [
      194931,
      194931
    ],
    "mapped",
    [
      156231
    ]
  ],
  [
    [
      194932,
      194932
    ],
    "mapped",
    [
      17241
    ]
  ],
  [
    [
      194933,
      194933
    ],
    "mapped",
    [
      156377
    ]
  ],
  [
    [
      194934,
      194934
    ],
    "mapped",
    [
      32634
    ]
  ],
  [
    [
      194935,
      194935
    ],
    "mapped",
    [
      156478
    ]
  ],
  [
    [
      194936,
      194936
    ],
    "mapped",
    [
      32661
    ]
  ],
  [
    [
      194937,
      194937
    ],
    "mapped",
    [
      32762
    ]
  ],
  [
    [
      194938,
      194938
    ],
    "mapped",
    [
      32773
    ]
  ],
  [
    [
      194939,
      194939
    ],
    "mapped",
    [
      156890
    ]
  ],
  [
    [
      194940,
      194940
    ],
    "mapped",
    [
      156963
    ]
  ],
  [
    [
      194941,
      194941
    ],
    "mapped",
    [
      32864
    ]
  ],
  [
    [
      194942,
      194942
    ],
    "mapped",
    [
      157096
    ]
  ],
  [
    [
      194943,
      194943
    ],
    "mapped",
    [
      32880
    ]
  ],
  [
    [
      194944,
      194944
    ],
    "mapped",
    [
      144223
    ]
  ],
  [
    [
      194945,
      194945
    ],
    "mapped",
    [
      17365
    ]
  ],
  [
    [
      194946,
      194946
    ],
    "mapped",
    [
      32946
    ]
  ],
  [
    [
      194947,
      194947
    ],
    "mapped",
    [
      33027
    ]
  ],
  [
    [
      194948,
      194948
    ],
    "mapped",
    [
      17419
    ]
  ],
  [
    [
      194949,
      194949
    ],
    "mapped",
    [
      33086
    ]
  ],
  [
    [
      194950,
      194950
    ],
    "mapped",
    [
      23221
    ]
  ],
  [
    [
      194951,
      194951
    ],
    "mapped",
    [
      157607
    ]
  ],
  [
    [
      194952,
      194952
    ],
    "mapped",
    [
      157621
    ]
  ],
  [
    [
      194953,
      194953
    ],
    "mapped",
    [
      144275
    ]
  ],
  [
    [
      194954,
      194954
    ],
    "mapped",
    [
      144284
    ]
  ],
  [
    [
      194955,
      194955
    ],
    "mapped",
    [
      33281
    ]
  ],
  [
    [
      194956,
      194956
    ],
    "mapped",
    [
      33284
    ]
  ],
  [
    [
      194957,
      194957
    ],
    "mapped",
    [
      36766
    ]
  ],
  [
    [
      194958,
      194958
    ],
    "mapped",
    [
      17515
    ]
  ],
  [
    [
      194959,
      194959
    ],
    "mapped",
    [
      33425
    ]
  ],
  [
    [
      194960,
      194960
    ],
    "mapped",
    [
      33419
    ]
  ],
  [
    [
      194961,
      194961
    ],
    "mapped",
    [
      33437
    ]
  ],
  [
    [
      194962,
      194962
    ],
    "mapped",
    [
      21171
    ]
  ],
  [
    [
      194963,
      194963
    ],
    "mapped",
    [
      33457
    ]
  ],
  [
    [
      194964,
      194964
    ],
    "mapped",
    [
      33459
    ]
  ],
  [
    [
      194965,
      194965
    ],
    "mapped",
    [
      33469
    ]
  ],
  [
    [
      194966,
      194966
    ],
    "mapped",
    [
      33510
    ]
  ],
  [
    [
      194967,
      194967
    ],
    "mapped",
    [
      158524
    ]
  ],
  [
    [
      194968,
      194968
    ],
    "mapped",
    [
      33509
    ]
  ],
  [
    [
      194969,
      194969
    ],
    "mapped",
    [
      33565
    ]
  ],
  [
    [
      194970,
      194970
    ],
    "mapped",
    [
      33635
    ]
  ],
  [
    [
      194971,
      194971
    ],
    "mapped",
    [
      33709
    ]
  ],
  [
    [
      194972,
      194972
    ],
    "mapped",
    [
      33571
    ]
  ],
  [
    [
      194973,
      194973
    ],
    "mapped",
    [
      33725
    ]
  ],
  [
    [
      194974,
      194974
    ],
    "mapped",
    [
      33767
    ]
  ],
  [
    [
      194975,
      194975
    ],
    "mapped",
    [
      33879
    ]
  ],
  [
    [
      194976,
      194976
    ],
    "mapped",
    [
      33619
    ]
  ],
  [
    [
      194977,
      194977
    ],
    "mapped",
    [
      33738
    ]
  ],
  [
    [
      194978,
      194978
    ],
    "mapped",
    [
      33740
    ]
  ],
  [
    [
      194979,
      194979
    ],
    "mapped",
    [
      33756
    ]
  ],
  [
    [
      194980,
      194980
    ],
    "mapped",
    [
      158774
    ]
  ],
  [
    [
      194981,
      194981
    ],
    "mapped",
    [
      159083
    ]
  ],
  [
    [
      194982,
      194982
    ],
    "mapped",
    [
      158933
    ]
  ],
  [
    [
      194983,
      194983
    ],
    "mapped",
    [
      17707
    ]
  ],
  [
    [
      194984,
      194984
    ],
    "mapped",
    [
      34033
    ]
  ],
  [
    [
      194985,
      194985
    ],
    "mapped",
    [
      34035
    ]
  ],
  [
    [
      194986,
      194986
    ],
    "mapped",
    [
      34070
    ]
  ],
  [
    [
      194987,
      194987
    ],
    "mapped",
    [
      160714
    ]
  ],
  [
    [
      194988,
      194988
    ],
    "mapped",
    [
      34148
    ]
  ],
  [
    [
      194989,
      194989
    ],
    "mapped",
    [
      159532
    ]
  ],
  [
    [
      194990,
      194990
    ],
    "mapped",
    [
      17757
    ]
  ],
  [
    [
      194991,
      194991
    ],
    "mapped",
    [
      17761
    ]
  ],
  [
    [
      194992,
      194992
    ],
    "mapped",
    [
      159665
    ]
  ],
  [
    [
      194993,
      194993
    ],
    "mapped",
    [
      159954
    ]
  ],
  [
    [
      194994,
      194994
    ],
    "mapped",
    [
      17771
    ]
  ],
  [
    [
      194995,
      194995
    ],
    "mapped",
    [
      34384
    ]
  ],
  [
    [
      194996,
      194996
    ],
    "mapped",
    [
      34396
    ]
  ],
  [
    [
      194997,
      194997
    ],
    "mapped",
    [
      34407
    ]
  ],
  [
    [
      194998,
      194998
    ],
    "mapped",
    [
      34409
    ]
  ],
  [
    [
      194999,
      194999
    ],
    "mapped",
    [
      34473
    ]
  ],
  [
    [
      195e3,
      195e3
    ],
    "mapped",
    [
      34440
    ]
  ],
  [
    [
      195001,
      195001
    ],
    "mapped",
    [
      34574
    ]
  ],
  [
    [
      195002,
      195002
    ],
    "mapped",
    [
      34530
    ]
  ],
  [
    [
      195003,
      195003
    ],
    "mapped",
    [
      34681
    ]
  ],
  [
    [
      195004,
      195004
    ],
    "mapped",
    [
      34600
    ]
  ],
  [
    [
      195005,
      195005
    ],
    "mapped",
    [
      34667
    ]
  ],
  [
    [
      195006,
      195006
    ],
    "mapped",
    [
      34694
    ]
  ],
  [
    [
      195007,
      195007
    ],
    "disallowed"
  ],
  [
    [
      195008,
      195008
    ],
    "mapped",
    [
      34785
    ]
  ],
  [
    [
      195009,
      195009
    ],
    "mapped",
    [
      34817
    ]
  ],
  [
    [
      195010,
      195010
    ],
    "mapped",
    [
      17913
    ]
  ],
  [
    [
      195011,
      195011
    ],
    "mapped",
    [
      34912
    ]
  ],
  [
    [
      195012,
      195012
    ],
    "mapped",
    [
      34915
    ]
  ],
  [
    [
      195013,
      195013
    ],
    "mapped",
    [
      161383
    ]
  ],
  [
    [
      195014,
      195014
    ],
    "mapped",
    [
      35031
    ]
  ],
  [
    [
      195015,
      195015
    ],
    "mapped",
    [
      35038
    ]
  ],
  [
    [
      195016,
      195016
    ],
    "mapped",
    [
      17973
    ]
  ],
  [
    [
      195017,
      195017
    ],
    "mapped",
    [
      35066
    ]
  ],
  [
    [
      195018,
      195018
    ],
    "mapped",
    [
      13499
    ]
  ],
  [
    [
      195019,
      195019
    ],
    "mapped",
    [
      161966
    ]
  ],
  [
    [
      195020,
      195020
    ],
    "mapped",
    [
      162150
    ]
  ],
  [
    [
      195021,
      195021
    ],
    "mapped",
    [
      18110
    ]
  ],
  [
    [
      195022,
      195022
    ],
    "mapped",
    [
      18119
    ]
  ],
  [
    [
      195023,
      195023
    ],
    "mapped",
    [
      35488
    ]
  ],
  [
    [
      195024,
      195024
    ],
    "mapped",
    [
      35565
    ]
  ],
  [
    [
      195025,
      195025
    ],
    "mapped",
    [
      35722
    ]
  ],
  [
    [
      195026,
      195026
    ],
    "mapped",
    [
      35925
    ]
  ],
  [
    [
      195027,
      195027
    ],
    "mapped",
    [
      162984
    ]
  ],
  [
    [
      195028,
      195028
    ],
    "mapped",
    [
      36011
    ]
  ],
  [
    [
      195029,
      195029
    ],
    "mapped",
    [
      36033
    ]
  ],
  [
    [
      195030,
      195030
    ],
    "mapped",
    [
      36123
    ]
  ],
  [
    [
      195031,
      195031
    ],
    "mapped",
    [
      36215
    ]
  ],
  [
    [
      195032,
      195032
    ],
    "mapped",
    [
      163631
    ]
  ],
  [
    [
      195033,
      195033
    ],
    "mapped",
    [
      133124
    ]
  ],
  [
    [
      195034,
      195034
    ],
    "mapped",
    [
      36299
    ]
  ],
  [
    [
      195035,
      195035
    ],
    "mapped",
    [
      36284
    ]
  ],
  [
    [
      195036,
      195036
    ],
    "mapped",
    [
      36336
    ]
  ],
  [
    [
      195037,
      195037
    ],
    "mapped",
    [
      133342
    ]
  ],
  [
    [
      195038,
      195038
    ],
    "mapped",
    [
      36564
    ]
  ],
  [
    [
      195039,
      195039
    ],
    "mapped",
    [
      36664
    ]
  ],
  [
    [
      195040,
      195040
    ],
    "mapped",
    [
      165330
    ]
  ],
  [
    [
      195041,
      195041
    ],
    "mapped",
    [
      165357
    ]
  ],
  [
    [
      195042,
      195042
    ],
    "mapped",
    [
      37012
    ]
  ],
  [
    [
      195043,
      195043
    ],
    "mapped",
    [
      37105
    ]
  ],
  [
    [
      195044,
      195044
    ],
    "mapped",
    [
      37137
    ]
  ],
  [
    [
      195045,
      195045
    ],
    "mapped",
    [
      165678
    ]
  ],
  [
    [
      195046,
      195046
    ],
    "mapped",
    [
      37147
    ]
  ],
  [
    [
      195047,
      195047
    ],
    "mapped",
    [
      37432
    ]
  ],
  [
    [
      195048,
      195048
    ],
    "mapped",
    [
      37591
    ]
  ],
  [
    [
      195049,
      195049
    ],
    "mapped",
    [
      37592
    ]
  ],
  [
    [
      195050,
      195050
    ],
    "mapped",
    [
      37500
    ]
  ],
  [
    [
      195051,
      195051
    ],
    "mapped",
    [
      37881
    ]
  ],
  [
    [
      195052,
      195052
    ],
    "mapped",
    [
      37909
    ]
  ],
  [
    [
      195053,
      195053
    ],
    "mapped",
    [
      166906
    ]
  ],
  [
    [
      195054,
      195054
    ],
    "mapped",
    [
      38283
    ]
  ],
  [
    [
      195055,
      195055
    ],
    "mapped",
    [
      18837
    ]
  ],
  [
    [
      195056,
      195056
    ],
    "mapped",
    [
      38327
    ]
  ],
  [
    [
      195057,
      195057
    ],
    "mapped",
    [
      167287
    ]
  ],
  [
    [
      195058,
      195058
    ],
    "mapped",
    [
      18918
    ]
  ],
  [
    [
      195059,
      195059
    ],
    "mapped",
    [
      38595
    ]
  ],
  [
    [
      195060,
      195060
    ],
    "mapped",
    [
      23986
    ]
  ],
  [
    [
      195061,
      195061
    ],
    "mapped",
    [
      38691
    ]
  ],
  [
    [
      195062,
      195062
    ],
    "mapped",
    [
      168261
    ]
  ],
  [
    [
      195063,
      195063
    ],
    "mapped",
    [
      168474
    ]
  ],
  [
    [
      195064,
      195064
    ],
    "mapped",
    [
      19054
    ]
  ],
  [
    [
      195065,
      195065
    ],
    "mapped",
    [
      19062
    ]
  ],
  [
    [
      195066,
      195066
    ],
    "mapped",
    [
      38880
    ]
  ],
  [
    [
      195067,
      195067
    ],
    "mapped",
    [
      168970
    ]
  ],
  [
    [
      195068,
      195068
    ],
    "mapped",
    [
      19122
    ]
  ],
  [
    [
      195069,
      195069
    ],
    "mapped",
    [
      169110
    ]
  ],
  [
    [
      195070,
      195071
    ],
    "mapped",
    [
      38923
    ]
  ],
  [
    [
      195072,
      195072
    ],
    "mapped",
    [
      38953
    ]
  ],
  [
    [
      195073,
      195073
    ],
    "mapped",
    [
      169398
    ]
  ],
  [
    [
      195074,
      195074
    ],
    "mapped",
    [
      39138
    ]
  ],
  [
    [
      195075,
      195075
    ],
    "mapped",
    [
      19251
    ]
  ],
  [
    [
      195076,
      195076
    ],
    "mapped",
    [
      39209
    ]
  ],
  [
    [
      195077,
      195077
    ],
    "mapped",
    [
      39335
    ]
  ],
  [
    [
      195078,
      195078
    ],
    "mapped",
    [
      39362
    ]
  ],
  [
    [
      195079,
      195079
    ],
    "mapped",
    [
      39422
    ]
  ],
  [
    [
      195080,
      195080
    ],
    "mapped",
    [
      19406
    ]
  ],
  [
    [
      195081,
      195081
    ],
    "mapped",
    [
      170800
    ]
  ],
  [
    [
      195082,
      195082
    ],
    "mapped",
    [
      39698
    ]
  ],
  [
    [
      195083,
      195083
    ],
    "mapped",
    [
      4e4
    ]
  ],
  [
    [
      195084,
      195084
    ],
    "mapped",
    [
      40189
    ]
  ],
  [
    [
      195085,
      195085
    ],
    "mapped",
    [
      19662
    ]
  ],
  [
    [
      195086,
      195086
    ],
    "mapped",
    [
      19693
    ]
  ],
  [
    [
      195087,
      195087
    ],
    "mapped",
    [
      40295
    ]
  ],
  [
    [
      195088,
      195088
    ],
    "mapped",
    [
      172238
    ]
  ],
  [
    [
      195089,
      195089
    ],
    "mapped",
    [
      19704
    ]
  ],
  [
    [
      195090,
      195090
    ],
    "mapped",
    [
      172293
    ]
  ],
  [
    [
      195091,
      195091
    ],
    "mapped",
    [
      172558
    ]
  ],
  [
    [
      195092,
      195092
    ],
    "mapped",
    [
      172689
    ]
  ],
  [
    [
      195093,
      195093
    ],
    "mapped",
    [
      40635
    ]
  ],
  [
    [
      195094,
      195094
    ],
    "mapped",
    [
      19798
    ]
  ],
  [
    [
      195095,
      195095
    ],
    "mapped",
    [
      40697
    ]
  ],
  [
    [
      195096,
      195096
    ],
    "mapped",
    [
      40702
    ]
  ],
  [
    [
      195097,
      195097
    ],
    "mapped",
    [
      40709
    ]
  ],
  [
    [
      195098,
      195098
    ],
    "mapped",
    [
      40719
    ]
  ],
  [
    [
      195099,
      195099
    ],
    "mapped",
    [
      40726
    ]
  ],
  [
    [
      195100,
      195100
    ],
    "mapped",
    [
      40763
    ]
  ],
  [
    [
      195101,
      195101
    ],
    "mapped",
    [
      173568
    ]
  ],
  [
    [
      195102,
      196605
    ],
    "disallowed"
  ],
  [
    [
      196606,
      196607
    ],
    "disallowed"
  ],
  [
    [
      196608,
      262141
    ],
    "disallowed"
  ],
  [
    [
      262142,
      262143
    ],
    "disallowed"
  ],
  [
    [
      262144,
      327677
    ],
    "disallowed"
  ],
  [
    [
      327678,
      327679
    ],
    "disallowed"
  ],
  [
    [
      327680,
      393213
    ],
    "disallowed"
  ],
  [
    [
      393214,
      393215
    ],
    "disallowed"
  ],
  [
    [
      393216,
      458749
    ],
    "disallowed"
  ],
  [
    [
      458750,
      458751
    ],
    "disallowed"
  ],
  [
    [
      458752,
      524285
    ],
    "disallowed"
  ],
  [
    [
      524286,
      524287
    ],
    "disallowed"
  ],
  [
    [
      524288,
      589821
    ],
    "disallowed"
  ],
  [
    [
      589822,
      589823
    ],
    "disallowed"
  ],
  [
    [
      589824,
      655357
    ],
    "disallowed"
  ],
  [
    [
      655358,
      655359
    ],
    "disallowed"
  ],
  [
    [
      655360,
      720893
    ],
    "disallowed"
  ],
  [
    [
      720894,
      720895
    ],
    "disallowed"
  ],
  [
    [
      720896,
      786429
    ],
    "disallowed"
  ],
  [
    [
      786430,
      786431
    ],
    "disallowed"
  ],
  [
    [
      786432,
      851965
    ],
    "disallowed"
  ],
  [
    [
      851966,
      851967
    ],
    "disallowed"
  ],
  [
    [
      851968,
      917501
    ],
    "disallowed"
  ],
  [
    [
      917502,
      917503
    ],
    "disallowed"
  ],
  [
    [
      917504,
      917504
    ],
    "disallowed"
  ],
  [
    [
      917505,
      917505
    ],
    "disallowed"
  ],
  [
    [
      917506,
      917535
    ],
    "disallowed"
  ],
  [
    [
      917536,
      917631
    ],
    "disallowed"
  ],
  [
    [
      917632,
      917759
    ],
    "disallowed"
  ],
  [
    [
      917760,
      917999
    ],
    "ignored"
  ],
  [
    [
      918e3,
      983037
    ],
    "disallowed"
  ],
  [
    [
      983038,
      983039
    ],
    "disallowed"
  ],
  [
    [
      983040,
      1048573
    ],
    "disallowed"
  ],
  [
    [
      1048574,
      1048575
    ],
    "disallowed"
  ],
  [
    [
      1048576,
      1114109
    ],
    "disallowed"
  ],
  [
    [
      1114110,
      1114111
    ],
    "disallowed"
  ]
];
var xl = Ul, xp = V3, Wr = {
  TRANSITIONAL: 0,
  NONTRANSITIONAL: 1
};
function Vl(e) {
  return e.split("\0").map(function(t) {
    return t.normalize("NFC");
  }).join("\0");
}
function Ll(e) {
  for (var t = 0, r = xp.length - 1; t <= r; ) {
    var a = Math.floor((t + r) / 2), i = xp[a];
    if (i[0][0] <= e && i[0][1] >= e)
      return i;
    i[0][0] > e ? r = a - 1 : t = a + 1;
  }
  return null;
}
var L3 = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
function jl(e) {
  return e.replace(L3, "_").length;
}
function j3(e, t, r) {
  for (var a = !1, i = "", s = jl(e), o = 0; o < s; ++o) {
    var d = e.codePointAt(o), l = Ll(d);
    switch (l[1]) {
      case "disallowed":
        a = !0, i += String.fromCodePoint(d);
        break;
      case "ignored":
        break;
      case "mapped":
        i += String.fromCodePoint.apply(String, l[2]);
        break;
      case "deviation":
        r === Wr.TRANSITIONAL ? i += String.fromCodePoint.apply(String, l[2]) : i += String.fromCodePoint(d);
        break;
      case "valid":
        i += String.fromCodePoint(d);
        break;
      case "disallowed_STD3_mapped":
        t ? (a = !0, i += String.fromCodePoint(d)) : i += String.fromCodePoint.apply(String, l[2]);
        break;
      case "disallowed_STD3_valid":
        t && (a = !0), i += String.fromCodePoint(d);
        break;
    }
  }
  return {
    string: i,
    error: a
  };
}
var M3 = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
function q3(e, t) {
  e.substr(0, 4) === "xn--" && (e = xl.toUnicode(e), Wr.NONTRANSITIONAL);
  var r = !1;
  (Vl(e) !== e || e[3] === "-" && e[4] === "-" || e[0] === "-" || e[e.length - 1] === "-" || e.indexOf(".") !== -1 || e.search(M3) === 0) && (r = !0);
  for (var a = jl(e), i = 0; i < a; ++i) {
    var s = Ll(e.codePointAt(i));
    if (li === Wr.TRANSITIONAL && s[1] !== "valid" || li === Wr.NONTRANSITIONAL && s[1] !== "valid" && s[1] !== "deviation") {
      r = !0;
      break;
    }
  }
  return {
    label: e,
    error: r
  };
}
function li(e, t, r) {
  var a = j3(e, t, r);
  a.string = Vl(a.string);
  for (var i = a.string.split("."), s = 0; s < i.length; ++s)
    try {
      var o = q3(i[s]);
      i[s] = o.label, a.error = a.error || o.error;
    } catch {
      a.error = !0;
    }
  return {
    string: i.join("."),
    error: a.error
  };
}
Fi.toASCII = function(e, t, r, a) {
  var i = li(e, t, r), s = i.string.split(".");
  if (s = s.map(function(l) {
    try {
      return xl.toASCII(l);
    } catch {
      return i.error = !0, l;
    }
  }), a) {
    var o = s.slice(0, s.length - 1).join(".").length;
    (o.length > 253 || o.length === 0) && (i.error = !0);
    for (var d = 0; d < s.length; ++d)
      if (s.length > 63 || s.length === 0) {
        i.error = !0;
        break;
      }
  }
  return i.error ? null : s.join(".");
};
Fi.toUnicode = function(e, t) {
  var r = li(e, t, Wr.NONTRANSITIONAL);
  return {
    domain: r.string,
    error: r.error
  };
};
Fi.PROCESSING_OPTIONS = Wr;
(function(e) {
  const t = Ul, r = Fi, a = {
    ftp: 21,
    file: null,
    gopher: 70,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
  }, i = Symbol("failure");
  function s(h) {
    return t.ucs2.decode(h).length;
  }
  function o(h, _) {
    const I = h[_];
    return isNaN(I) ? void 0 : String.fromCodePoint(I);
  }
  function d(h) {
    return h >= 48 && h <= 57;
  }
  function l(h) {
    return h >= 65 && h <= 90 || h >= 97 && h <= 122;
  }
  function u(h) {
    return l(h) || d(h);
  }
  function c(h) {
    return d(h) || h >= 65 && h <= 70 || h >= 97 && h <= 102;
  }
  function v(h) {
    return h === "." || h.toLowerCase() === "%2e";
  }
  function T(h) {
    return h = h.toLowerCase(), h === ".." || h === "%2e." || h === ".%2e" || h === "%2e%2e";
  }
  function g(h, _) {
    return l(h) && (_ === 58 || _ === 124);
  }
  function w(h) {
    return h.length === 2 && l(h.codePointAt(0)) && (h[1] === ":" || h[1] === "|");
  }
  function f(h) {
    return h.length === 2 && l(h.codePointAt(0)) && h[1] === ":";
  }
  function b(h) {
    return h.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
  }
  function y(h) {
    return h.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
  }
  function k(h) {
    return a[h] !== void 0;
  }
  function N(h) {
    return k(h.scheme);
  }
  function $(h) {
    return a[h];
  }
  function O(h) {
    let _ = h.toString(16).toUpperCase();
    return _.length === 1 && (_ = "0" + _), "%" + _;
  }
  function P(h) {
    const _ = new Buffer(h);
    let I = "";
    for (let x = 0; x < _.length; ++x)
      I += O(_[x]);
    return I;
  }
  function C(h) {
    const _ = new Buffer(h), I = [];
    for (let x = 0; x < _.length; ++x)
      _[x] !== 37 ? I.push(_[x]) : _[x] === 37 && c(_[x + 1]) && c(_[x + 2]) ? (I.push(parseInt(_.slice(x + 1, x + 3).toString(), 16)), x += 2) : I.push(_[x]);
    return new Buffer(I).toString();
  }
  function A(h) {
    return h <= 31 || h > 126;
  }
  const S = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
  function R(h) {
    return A(h) || S.has(h);
  }
  const U = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
  function L(h) {
    return R(h) || U.has(h);
  }
  function M(h, _) {
    const I = String.fromCodePoint(h);
    return _(h) ? P(I) : I;
  }
  function J(h) {
    let _ = 10;
    return h.length >= 2 && h.charAt(0) === "0" && h.charAt(1).toLowerCase() === "x" ? (h = h.substring(2), _ = 16) : h.length >= 2 && h.charAt(0) === "0" && (h = h.substring(1), _ = 8), h === "" ? 0 : (_ === 10 ? /[^0-9]/ : _ === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/).test(h) ? i : parseInt(h, _);
  }
  function X(h) {
    const _ = h.split(".");
    if (_[_.length - 1] === "" && _.length > 1 && _.pop(), _.length > 4)
      return h;
    const I = [];
    for (const Q of _) {
      if (Q === "")
        return h;
      const pe = J(Q);
      if (pe === i)
        return h;
      I.push(pe);
    }
    for (let Q = 0; Q < I.length - 1; ++Q)
      if (I[Q] > 255)
        return i;
    if (I[I.length - 1] >= Math.pow(256, 5 - I.length))
      return i;
    let x = I.pop(), q = 0;
    for (const Q of I)
      x += Q * Math.pow(256, 3 - q), ++q;
    return x;
  }
  function Y(h) {
    let _ = "", I = h;
    for (let x = 1; x <= 4; ++x)
      _ = String(I % 256) + _, x !== 4 && (_ = "." + _), I = Math.floor(I / 256);
    return _;
  }
  function ne(h) {
    const _ = [0, 0, 0, 0, 0, 0, 0, 0];
    let I = 0, x = null, q = 0;
    if (h = t.ucs2.decode(h), h[q] === 58) {
      if (h[q + 1] !== 58)
        return i;
      q += 2, ++I, x = I;
    }
    for (; q < h.length; ) {
      if (I === 8)
        return i;
      if (h[q] === 58) {
        if (x !== null)
          return i;
        ++q, ++I, x = I;
        continue;
      }
      let Q = 0, pe = 0;
      for (; pe < 4 && c(h[q]); )
        Q = Q * 16 + parseInt(o(h, q), 16), ++q, ++pe;
      if (h[q] === 46) {
        if (pe === 0 || (q -= pe, I > 6))
          return i;
        let Ce = 0;
        for (; h[q] !== void 0; ) {
          let Ee = null;
          if (Ce > 0)
            if (h[q] === 46 && Ce < 4)
              ++q;
            else
              return i;
          if (!d(h[q]))
            return i;
          for (; d(h[q]); ) {
            const ft = parseInt(o(h, q));
            if (Ee === null)
              Ee = ft;
            else {
              if (Ee === 0)
                return i;
              Ee = Ee * 10 + ft;
            }
            if (Ee > 255)
              return i;
            ++q;
          }
          _[I] = _[I] * 256 + Ee, ++Ce, (Ce === 2 || Ce === 4) && ++I;
        }
        if (Ce !== 4)
          return i;
        break;
      } else if (h[q] === 58) {
        if (++q, h[q] === void 0)
          return i;
      } else if (h[q] !== void 0)
        return i;
      _[I] = Q, ++I;
    }
    if (x !== null) {
      let Q = I - x;
      for (I = 7; I !== 0 && Q > 0; ) {
        const pe = _[x + Q - 1];
        _[x + Q - 1] = _[I], _[I] = pe, --I, --Q;
      }
    } else if (x === null && I !== 8)
      return i;
    return _;
  }
  function ee(h) {
    let _ = "";
    const x = K(h).idx;
    let q = !1;
    for (let Q = 0; Q <= 7; ++Q)
      if (!(q && h[Q] === 0)) {
        if (q && (q = !1), x === Q) {
          _ += Q === 0 ? "::" : ":", q = !0;
          continue;
        }
        _ += h[Q].toString(16), Q !== 7 && (_ += ":");
      }
    return _;
  }
  function H(h, _) {
    if (h[0] === "[")
      return h[h.length - 1] !== "]" ? i : ne(h.substring(1, h.length - 1));
    if (!_)
      return j(h);
    const I = C(h), x = r.toASCII(I, !1, r.PROCESSING_OPTIONS.NONTRANSITIONAL, !1);
    if (x === null || b(x))
      return i;
    const q = X(x);
    return typeof q == "number" || q === i ? q : x;
  }
  function j(h) {
    if (y(h))
      return i;
    let _ = "";
    const I = t.ucs2.decode(h);
    for (let x = 0; x < I.length; ++x)
      _ += M(I[x], A);
    return _;
  }
  function K(h) {
    let _ = null, I = 1, x = null, q = 0;
    for (let Q = 0; Q < h.length; ++Q)
      h[Q] !== 0 ? (q > I && (_ = x, I = q), x = null, q = 0) : (x === null && (x = Q), ++q);
    return q > I && (_ = x, I = q), {
      idx: _,
      len: I
    };
  }
  function re(h) {
    return typeof h == "number" ? Y(h) : h instanceof Array ? "[" + ee(h) + "]" : h;
  }
  function me(h) {
    return h.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
  }
  function Me(h) {
    return h.replace(/\u0009|\u000A|\u000D/g, "");
  }
  function Ve(h) {
    const _ = h.path;
    _.length !== 0 && (h.scheme === "file" && _.length === 1 && Be(_[0]) || _.pop());
  }
  function it(h) {
    return h.username !== "" || h.password !== "";
  }
  function Tt(h) {
    return h.host === null || h.host === "" || h.cannotBeABaseURL || h.scheme === "file";
  }
  function Be(h) {
    return /^[A-Za-z]:$/.test(h);
  }
  function ae(h, _, I, x, q) {
    if (this.pointer = 0, this.input = h, this.base = _ || null, this.encodingOverride = I || "utf-8", this.stateOverride = q, this.url = x, this.failure = !1, this.parseError = !1, !this.url) {
      this.url = {
        scheme: "",
        username: "",
        password: "",
        host: null,
        port: null,
        path: [],
        query: null,
        fragment: null,
        cannotBeABaseURL: !1
      };
      const pe = me(this.input);
      pe !== this.input && (this.parseError = !0), this.input = pe;
    }
    const Q = Me(this.input);
    for (Q !== this.input && (this.parseError = !0), this.input = Q, this.state = q || "scheme start", this.buffer = "", this.atFlag = !1, this.arrFlag = !1, this.passwordTokenSeenFlag = !1, this.input = t.ucs2.decode(this.input); this.pointer <= this.input.length; ++this.pointer) {
      const pe = this.input[this.pointer], Ce = isNaN(pe) ? void 0 : String.fromCodePoint(pe), Ee = this["parse " + this.state](pe, Ce);
      if (Ee) {
        if (Ee === i) {
          this.failure = !0;
          break;
        }
      } else
        break;
    }
  }
  ae.prototype["parse scheme start"] = function(_, I) {
    if (l(_))
      this.buffer += I.toLowerCase(), this.state = "scheme";
    else if (!this.stateOverride)
      this.state = "no scheme", --this.pointer;
    else
      return this.parseError = !0, i;
    return !0;
  }, ae.prototype["parse scheme"] = function(_, I) {
    if (u(_) || _ === 43 || _ === 45 || _ === 46)
      this.buffer += I.toLowerCase();
    else if (_ === 58) {
      if (this.stateOverride && (N(this.url) && !k(this.buffer) || !N(this.url) && k(this.buffer) || (it(this.url) || this.url.port !== null) && this.buffer === "file" || this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) || (this.url.scheme = this.buffer, this.buffer = "", this.stateOverride))
        return !1;
      this.url.scheme === "file" ? ((this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) && (this.parseError = !0), this.state = "file") : N(this.url) && this.base !== null && this.base.scheme === this.url.scheme ? this.state = "special relative or authority" : N(this.url) ? this.state = "special authority slashes" : this.input[this.pointer + 1] === 47 ? (this.state = "path or authority", ++this.pointer) : (this.url.cannotBeABaseURL = !0, this.url.path.push(""), this.state = "cannot-be-a-base-URL path");
    } else if (!this.stateOverride)
      this.buffer = "", this.state = "no scheme", this.pointer = -1;
    else
      return this.parseError = !0, i;
    return !0;
  }, ae.prototype["parse no scheme"] = function(_) {
    return this.base === null || this.base.cannotBeABaseURL && _ !== 35 ? i : (this.base.cannotBeABaseURL && _ === 35 ? (this.url.scheme = this.base.scheme, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.url.cannotBeABaseURL = !0, this.state = "fragment") : this.base.scheme === "file" ? (this.state = "file", --this.pointer) : (this.state = "relative", --this.pointer), !0);
  }, ae.prototype["parse special relative or authority"] = function(_) {
    return _ === 47 && this.input[this.pointer + 1] === 47 ? (this.state = "special authority ignore slashes", ++this.pointer) : (this.parseError = !0, this.state = "relative", --this.pointer), !0;
  }, ae.prototype["parse path or authority"] = function(_) {
    return _ === 47 ? this.state = "authority" : (this.state = "path", --this.pointer), !0;
  }, ae.prototype["parse relative"] = function(_) {
    return this.url.scheme = this.base.scheme, isNaN(_) ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = this.base.query) : _ === 47 ? this.state = "relative slash" : _ === 63 ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = "", this.state = "query") : _ === 35 ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.state = "fragment") : N(this.url) && _ === 92 ? (this.parseError = !0, this.state = "relative slash") : (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(0, this.base.path.length - 1), this.state = "path", --this.pointer), !0;
  }, ae.prototype["parse relative slash"] = function(_) {
    return N(this.url) && (_ === 47 || _ === 92) ? (_ === 92 && (this.parseError = !0), this.state = "special authority ignore slashes") : _ === 47 ? this.state = "authority" : (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.state = "path", --this.pointer), !0;
  }, ae.prototype["parse special authority slashes"] = function(_) {
    return _ === 47 && this.input[this.pointer + 1] === 47 ? (this.state = "special authority ignore slashes", ++this.pointer) : (this.parseError = !0, this.state = "special authority ignore slashes", --this.pointer), !0;
  }, ae.prototype["parse special authority ignore slashes"] = function(_) {
    return _ !== 47 && _ !== 92 ? (this.state = "authority", --this.pointer) : this.parseError = !0, !0;
  }, ae.prototype["parse authority"] = function(_, I) {
    if (_ === 64) {
      this.parseError = !0, this.atFlag && (this.buffer = "%40" + this.buffer), this.atFlag = !0;
      const x = s(this.buffer);
      for (let q = 0; q < x; ++q) {
        const Q = this.buffer.codePointAt(q);
        if (Q === 58 && !this.passwordTokenSeenFlag) {
          this.passwordTokenSeenFlag = !0;
          continue;
        }
        const pe = M(Q, L);
        this.passwordTokenSeenFlag ? this.url.password += pe : this.url.username += pe;
      }
      this.buffer = "";
    } else if (isNaN(_) || _ === 47 || _ === 63 || _ === 35 || N(this.url) && _ === 92) {
      if (this.atFlag && this.buffer === "")
        return this.parseError = !0, i;
      this.pointer -= s(this.buffer) + 1, this.buffer = "", this.state = "host";
    } else
      this.buffer += I;
    return !0;
  }, ae.prototype["parse hostname"] = ae.prototype["parse host"] = function(_, I) {
    if (this.stateOverride && this.url.scheme === "file")
      --this.pointer, this.state = "file host";
    else if (_ === 58 && !this.arrFlag) {
      if (this.buffer === "")
        return this.parseError = !0, i;
      const x = H(this.buffer, N(this.url));
      if (x === i)
        return i;
      if (this.url.host = x, this.buffer = "", this.state = "port", this.stateOverride === "hostname")
        return !1;
    } else if (isNaN(_) || _ === 47 || _ === 63 || _ === 35 || N(this.url) && _ === 92) {
      if (--this.pointer, N(this.url) && this.buffer === "")
        return this.parseError = !0, i;
      if (this.stateOverride && this.buffer === "" && (it(this.url) || this.url.port !== null))
        return this.parseError = !0, !1;
      const x = H(this.buffer, N(this.url));
      if (x === i)
        return i;
      if (this.url.host = x, this.buffer = "", this.state = "path start", this.stateOverride)
        return !1;
    } else
      _ === 91 ? this.arrFlag = !0 : _ === 93 && (this.arrFlag = !1), this.buffer += I;
    return !0;
  }, ae.prototype["parse port"] = function(_, I) {
    if (d(_))
      this.buffer += I;
    else if (isNaN(_) || _ === 47 || _ === 63 || _ === 35 || N(this.url) && _ === 92 || this.stateOverride) {
      if (this.buffer !== "") {
        const x = parseInt(this.buffer);
        if (x > Math.pow(2, 16) - 1)
          return this.parseError = !0, i;
        this.url.port = x === $(this.url.scheme) ? null : x, this.buffer = "";
      }
      if (this.stateOverride)
        return !1;
      this.state = "path start", --this.pointer;
    } else
      return this.parseError = !0, i;
    return !0;
  };
  const qe = /* @__PURE__ */ new Set([47, 92, 63, 35]);
  ae.prototype["parse file"] = function(_) {
    return this.url.scheme = "file", _ === 47 || _ === 92 ? (_ === 92 && (this.parseError = !0), this.state = "file slash") : this.base !== null && this.base.scheme === "file" ? isNaN(_) ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = this.base.query) : _ === 63 ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = "", this.state = "query") : _ === 35 ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.state = "fragment") : (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
    !g(_, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
    !qe.has(this.input[this.pointer + 2]) ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), Ve(this.url)) : this.parseError = !0, this.state = "path", --this.pointer) : (this.state = "path", --this.pointer), !0;
  }, ae.prototype["parse file slash"] = function(_) {
    return _ === 47 || _ === 92 ? (_ === 92 && (this.parseError = !0), this.state = "file host") : (this.base !== null && this.base.scheme === "file" && (f(this.base.path[0]) ? this.url.path.push(this.base.path[0]) : this.url.host = this.base.host), this.state = "path", --this.pointer), !0;
  }, ae.prototype["parse file host"] = function(_, I) {
    if (isNaN(_) || _ === 47 || _ === 92 || _ === 63 || _ === 35)
      if (--this.pointer, !this.stateOverride && w(this.buffer))
        this.parseError = !0, this.state = "path";
      else if (this.buffer === "") {
        if (this.url.host = "", this.stateOverride)
          return !1;
        this.state = "path start";
      } else {
        let x = H(this.buffer, N(this.url));
        if (x === i)
          return i;
        if (x === "localhost" && (x = ""), this.url.host = x, this.stateOverride)
          return !1;
        this.buffer = "", this.state = "path start";
      }
    else
      this.buffer += I;
    return !0;
  }, ae.prototype["parse path start"] = function(_) {
    return N(this.url) ? (_ === 92 && (this.parseError = !0), this.state = "path", _ !== 47 && _ !== 92 && --this.pointer) : !this.stateOverride && _ === 63 ? (this.url.query = "", this.state = "query") : !this.stateOverride && _ === 35 ? (this.url.fragment = "", this.state = "fragment") : _ !== void 0 && (this.state = "path", _ !== 47 && --this.pointer), !0;
  }, ae.prototype["parse path"] = function(_) {
    if (isNaN(_) || _ === 47 || N(this.url) && _ === 92 || !this.stateOverride && (_ === 63 || _ === 35)) {
      if (N(this.url) && _ === 92 && (this.parseError = !0), T(this.buffer) ? (Ve(this.url), _ !== 47 && !(N(this.url) && _ === 92) && this.url.path.push("")) : v(this.buffer) && _ !== 47 && !(N(this.url) && _ === 92) ? this.url.path.push("") : v(this.buffer) || (this.url.scheme === "file" && this.url.path.length === 0 && w(this.buffer) && (this.url.host !== "" && this.url.host !== null && (this.parseError = !0, this.url.host = ""), this.buffer = this.buffer[0] + ":"), this.url.path.push(this.buffer)), this.buffer = "", this.url.scheme === "file" && (_ === void 0 || _ === 63 || _ === 35))
        for (; this.url.path.length > 1 && this.url.path[0] === ""; )
          this.parseError = !0, this.url.path.shift();
      _ === 63 && (this.url.query = "", this.state = "query"), _ === 35 && (this.url.fragment = "", this.state = "fragment");
    } else
      _ === 37 && (!c(this.input[this.pointer + 1]) || !c(this.input[this.pointer + 2])) && (this.parseError = !0), this.buffer += M(_, R);
    return !0;
  }, ae.prototype["parse cannot-be-a-base-URL path"] = function(_) {
    return _ === 63 ? (this.url.query = "", this.state = "query") : _ === 35 ? (this.url.fragment = "", this.state = "fragment") : (!isNaN(_) && _ !== 37 && (this.parseError = !0), _ === 37 && (!c(this.input[this.pointer + 1]) || !c(this.input[this.pointer + 2])) && (this.parseError = !0), isNaN(_) || (this.url.path[0] = this.url.path[0] + M(_, A))), !0;
  }, ae.prototype["parse query"] = function(_, I) {
    if (isNaN(_) || !this.stateOverride && _ === 35) {
      (!N(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") && (this.encodingOverride = "utf-8");
      const x = new Buffer(this.buffer);
      for (let q = 0; q < x.length; ++q)
        x[q] < 33 || x[q] > 126 || x[q] === 34 || x[q] === 35 || x[q] === 60 || x[q] === 62 ? this.url.query += O(x[q]) : this.url.query += String.fromCodePoint(x[q]);
      this.buffer = "", _ === 35 && (this.url.fragment = "", this.state = "fragment");
    } else
      _ === 37 && (!c(this.input[this.pointer + 1]) || !c(this.input[this.pointer + 2])) && (this.parseError = !0), this.buffer += I;
    return !0;
  }, ae.prototype["parse fragment"] = function(_) {
    return isNaN(_) || (_ === 0 ? this.parseError = !0 : (_ === 37 && (!c(this.input[this.pointer + 1]) || !c(this.input[this.pointer + 2])) && (this.parseError = !0), this.url.fragment += M(_, A))), !0;
  };
  function F(h, _) {
    let I = h.scheme + ":";
    if (h.host !== null ? (I += "//", (h.username !== "" || h.password !== "") && (I += h.username, h.password !== "" && (I += ":" + h.password), I += "@"), I += re(h.host), h.port !== null && (I += ":" + h.port)) : h.host === null && h.scheme === "file" && (I += "//"), h.cannotBeABaseURL)
      I += h.path[0];
    else
      for (const x of h.path)
        I += "/" + x;
    return h.query !== null && (I += "?" + h.query), !_ && h.fragment !== null && (I += "#" + h.fragment), I;
  }
  function W(h) {
    let _ = h.scheme + "://";
    return _ += re(h.host), h.port !== null && (_ += ":" + h.port), _;
  }
  e.exports.serializeURL = F, e.exports.serializeURLOrigin = function(h) {
    switch (h.scheme) {
      case "blob":
        try {
          return e.exports.serializeURLOrigin(e.exports.parseURL(h.path[0]));
        } catch {
          return "null";
        }
      case "ftp":
      case "gopher":
      case "http":
      case "https":
      case "ws":
      case "wss":
        return W({
          scheme: h.scheme,
          host: h.host,
          port: h.port
        });
      case "file":
        return "file://";
      default:
        return "null";
    }
  }, e.exports.basicURLParse = function(h, _) {
    _ === void 0 && (_ = {});
    const I = new ae(h, _.baseURL, _.encodingOverride, _.url, _.stateOverride);
    return I.failure ? "failure" : I.url;
  }, e.exports.setTheUsername = function(h, _) {
    h.username = "";
    const I = t.ucs2.decode(_);
    for (let x = 0; x < I.length; ++x)
      h.username += M(I[x], L);
  }, e.exports.setThePassword = function(h, _) {
    h.password = "";
    const I = t.ucs2.decode(_);
    for (let x = 0; x < I.length; ++x)
      h.password += M(I[x], L);
  }, e.exports.serializeHost = re, e.exports.cannotHaveAUsernamePasswordPort = Tt, e.exports.serializeInteger = function(h) {
    return String(h);
  }, e.exports.parseURL = function(h, _) {
    return _ === void 0 && (_ = {}), e.exports.basicURLParse(h, { baseURL: _.baseURL, encodingOverride: _.encodingOverride });
  };
})(Ol);
var It = Ol.exports;
const ve = It;
Rl.implementation = class {
  constructor(t) {
    const r = t[0], a = t[1];
    let i = null;
    if (a !== void 0 && (i = ve.basicURLParse(a), i === "failure"))
      throw new TypeError("Invalid base URL");
    const s = ve.basicURLParse(r, { baseURL: i });
    if (s === "failure")
      throw new TypeError("Invalid URL");
    this._url = s;
  }
  get href() {
    return ve.serializeURL(this._url);
  }
  set href(t) {
    const r = ve.basicURLParse(t);
    if (r === "failure")
      throw new TypeError("Invalid URL");
    this._url = r;
  }
  get origin() {
    return ve.serializeURLOrigin(this._url);
  }
  get protocol() {
    return this._url.scheme + ":";
  }
  set protocol(t) {
    ve.basicURLParse(t + ":", { url: this._url, stateOverride: "scheme start" });
  }
  get username() {
    return this._url.username;
  }
  set username(t) {
    ve.cannotHaveAUsernamePasswordPort(this._url) || ve.setTheUsername(this._url, t);
  }
  get password() {
    return this._url.password;
  }
  set password(t) {
    ve.cannotHaveAUsernamePasswordPort(this._url) || ve.setThePassword(this._url, t);
  }
  get host() {
    const t = this._url;
    return t.host === null ? "" : t.port === null ? ve.serializeHost(t.host) : ve.serializeHost(t.host) + ":" + ve.serializeInteger(t.port);
  }
  set host(t) {
    this._url.cannotBeABaseURL || ve.basicURLParse(t, { url: this._url, stateOverride: "host" });
  }
  get hostname() {
    return this._url.host === null ? "" : ve.serializeHost(this._url.host);
  }
  set hostname(t) {
    this._url.cannotBeABaseURL || ve.basicURLParse(t, { url: this._url, stateOverride: "hostname" });
  }
  get port() {
    return this._url.port === null ? "" : ve.serializeInteger(this._url.port);
  }
  set port(t) {
    ve.cannotHaveAUsernamePasswordPort(this._url) || (t === "" ? this._url.port = null : ve.basicURLParse(t, { url: this._url, stateOverride: "port" }));
  }
  get pathname() {
    return this._url.cannotBeABaseURL ? this._url.path[0] : this._url.path.length === 0 ? "" : "/" + this._url.path.join("/");
  }
  set pathname(t) {
    this._url.cannotBeABaseURL || (this._url.path = [], ve.basicURLParse(t, { url: this._url, stateOverride: "path start" }));
  }
  get search() {
    return this._url.query === null || this._url.query === "" ? "" : "?" + this._url.query;
  }
  set search(t) {
    const r = this._url;
    if (t === "") {
      r.query = null;
      return;
    }
    const a = t[0] === "?" ? t.substring(1) : t;
    r.query = "", ve.basicURLParse(a, { url: r, stateOverride: "query" });
  }
  get hash() {
    return this._url.fragment === null || this._url.fragment === "" ? "" : "#" + this._url.fragment;
  }
  set hash(t) {
    if (t === "") {
      this._url.fragment = null;
      return;
    }
    const r = t[0] === "#" ? t.substring(1) : t;
    this._url.fragment = "", ve.basicURLParse(r, { url: this._url, stateOverride: "fragment" });
  }
  toJSON() {
    return this.href;
  }
};
(function(e) {
  const t = D3, r = O3, a = Rl, i = r.implSymbol;
  function s(o) {
    if (!this || this[i] || !(this instanceof s))
      throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
    if (arguments.length < 1)
      throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
    const d = [];
    for (let l = 0; l < arguments.length && l < 2; ++l)
      d[l] = arguments[l];
    d[0] = t.USVString(d[0]), d[1] !== void 0 && (d[1] = t.USVString(d[1])), e.exports.setup(this, d);
  }
  s.prototype.toJSON = function() {
    if (!this || !e.exports.is(this))
      throw new TypeError("Illegal invocation");
    const d = [];
    for (let l = 0; l < arguments.length && l < 0; ++l)
      d[l] = arguments[l];
    return this[i].toJSON.apply(this[i], d);
  }, Object.defineProperty(s.prototype, "href", {
    get() {
      return this[i].href;
    },
    set(o) {
      o = t.USVString(o), this[i].href = o;
    },
    enumerable: !0,
    configurable: !0
  }), s.prototype.toString = function() {
    if (!this || !e.exports.is(this))
      throw new TypeError("Illegal invocation");
    return this.href;
  }, Object.defineProperty(s.prototype, "origin", {
    get() {
      return this[i].origin;
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(s.prototype, "protocol", {
    get() {
      return this[i].protocol;
    },
    set(o) {
      o = t.USVString(o), this[i].protocol = o;
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(s.prototype, "username", {
    get() {
      return this[i].username;
    },
    set(o) {
      o = t.USVString(o), this[i].username = o;
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(s.prototype, "password", {
    get() {
      return this[i].password;
    },
    set(o) {
      o = t.USVString(o), this[i].password = o;
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(s.prototype, "host", {
    get() {
      return this[i].host;
    },
    set(o) {
      o = t.USVString(o), this[i].host = o;
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(s.prototype, "hostname", {
    get() {
      return this[i].hostname;
    },
    set(o) {
      o = t.USVString(o), this[i].hostname = o;
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(s.prototype, "port", {
    get() {
      return this[i].port;
    },
    set(o) {
      o = t.USVString(o), this[i].port = o;
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(s.prototype, "pathname", {
    get() {
      return this[i].pathname;
    },
    set(o) {
      o = t.USVString(o), this[i].pathname = o;
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(s.prototype, "search", {
    get() {
      return this[i].search;
    },
    set(o) {
      o = t.USVString(o), this[i].search = o;
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(s.prototype, "hash", {
    get() {
      return this[i].hash;
    },
    set(o) {
      o = t.USVString(o), this[i].hash = o;
    },
    enumerable: !0,
    configurable: !0
  }), e.exports = {
    is(o) {
      return !!o && o[i] instanceof a.implementation;
    },
    create(o, d) {
      let l = Object.create(s.prototype);
      return this.setup(l, o, d), l;
    },
    setup(o, d, l) {
      l || (l = {}), l.wrapper = o, o[i] = new a.implementation(d, l), o[i][r.wrapperSymbol] = o;
    },
    interface: s,
    expose: {
      Window: { URL: s },
      Worker: { URL: s }
    }
  };
})(Cl);
var W3 = Cl.exports;
ct.URL = W3.interface;
ct.serializeURL = It.serializeURL;
ct.serializeURLOrigin = It.serializeURLOrigin;
ct.basicURLParse = It.basicURLParse;
ct.setTheUsername = It.setTheUsername;
ct.setThePassword = It.setThePassword;
ct.serializeHost = It.serializeHost;
ct.serializeInteger = It.serializeInteger;
ct.parseURL = It.parseURL;
const z3 = Ze.Readable, Rt = Symbol("buffer"), Nn = Symbol("type");
class Xr {
  constructor() {
    this[Nn] = "";
    const t = arguments[0], r = arguments[1], a = [];
    let i = 0;
    if (t) {
      const o = t, d = Number(o.length);
      for (let l = 0; l < d; l++) {
        const u = o[l];
        let c;
        u instanceof Buffer ? c = u : ArrayBuffer.isView(u) ? c = Buffer.from(u.buffer, u.byteOffset, u.byteLength) : u instanceof ArrayBuffer ? c = Buffer.from(u) : u instanceof Xr ? c = u[Rt] : c = Buffer.from(typeof u == "string" ? u : String(u)), i += c.length, a.push(c);
      }
    }
    this[Rt] = Buffer.concat(a);
    let s = r && r.type !== void 0 && String(r.type).toLowerCase();
    s && !/[^\u0020-\u007E]/.test(s) && (this[Nn] = s);
  }
  get size() {
    return this[Rt].length;
  }
  get type() {
    return this[Nn];
  }
  text() {
    return Promise.resolve(this[Rt].toString());
  }
  arrayBuffer() {
    const t = this[Rt], r = t.buffer.slice(t.byteOffset, t.byteOffset + t.byteLength);
    return Promise.resolve(r);
  }
  stream() {
    const t = new z3();
    return t._read = function() {
    }, t.push(this[Rt]), t.push(null), t;
  }
  toString() {
    return "[object Blob]";
  }
  slice() {
    const t = this.size, r = arguments[0], a = arguments[1];
    let i, s;
    r === void 0 ? i = 0 : r < 0 ? i = Math.max(t + r, 0) : i = Math.min(r, t), a === void 0 ? s = t : a < 0 ? s = Math.max(t + a, 0) : s = Math.min(a, t);
    const o = Math.max(s - i, 0), l = this[Rt].slice(i, i + o), u = new Xr([], { type: arguments[2] });
    return u[Rt] = l, u;
  }
}
Object.defineProperties(Xr.prototype, {
  size: { enumerable: !0 },
  type: { enumerable: !0 },
  slice: { enumerable: !0 }
});
Object.defineProperty(Xr.prototype, Symbol.toStringTag, {
  value: "Blob",
  writable: !1,
  enumerable: !1,
  configurable: !0
});
function Ue(e, t, r) {
  Error.call(this, e), this.message = e, this.type = t, r && (this.code = this.errno = r.code), Error.captureStackTrace(this, this.constructor);
}
Ue.prototype = Object.create(Error.prototype);
Ue.prototype.constructor = Ue;
Ue.prototype.name = "FetchError";
let Yn;
try {
  Yn = require("encoding").convert;
} catch {
}
const Ft = Symbol("Body internals"), Vp = Ze.PassThrough;
function Ae(e) {
  var t = this, r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, a = r.size;
  let i = a === void 0 ? 0 : a;
  var s = r.timeout;
  let o = s === void 0 ? 0 : s;
  e == null ? e = null : Ml(e) ? e = Buffer.from(e.toString()) : r1(e) || Buffer.isBuffer(e) || (Object.prototype.toString.call(e) === "[object ArrayBuffer]" ? e = Buffer.from(e) : ArrayBuffer.isView(e) ? e = Buffer.from(e.buffer, e.byteOffset, e.byteLength) : e instanceof Ze || (e = Buffer.from(String(e)))), this[Ft] = {
    body: e,
    disturbed: !1,
    error: null
  }, this.size = i, this.timeout = o, e instanceof Ze && e.on("error", function(d) {
    const l = d.name === "AbortError" ? d : new Ue(`Invalid response body while trying to fetch ${t.url}: ${d.message}`, "system", d);
    t[Ft].error = l;
  });
}
Ae.prototype = {
  get body() {
    return this[Ft].body;
  },
  get bodyUsed() {
    return this[Ft].disturbed;
  },
  /**
   * Decode response as ArrayBuffer
   *
   * @return  Promise
   */
  arrayBuffer() {
    return Vr.call(this).then(function(e) {
      return e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);
    });
  },
  /**
   * Return raw response as Blob
   *
   * @return Promise
   */
  blob() {
    let e = this.headers && this.headers.get("content-type") || "";
    return Vr.call(this).then(function(t) {
      return Object.assign(
        // Prevent copying
        new Xr([], {
          type: e.toLowerCase()
        }),
        {
          [Rt]: t
        }
      );
    });
  },
  /**
   * Decode response as json
   *
   * @return  Promise
   */
  json() {
    var e = this;
    return Vr.call(this).then(function(t) {
      try {
        return JSON.parse(t.toString());
      } catch (r) {
        return Ae.Promise.reject(new Ue(`invalid json response body at ${e.url} reason: ${r.message}`, "invalid-json"));
      }
    });
  },
  /**
   * Decode response as text
   *
   * @return  Promise
   */
  text() {
    return Vr.call(this).then(function(e) {
      return e.toString();
    });
  },
  /**
   * Decode response as buffer (non-spec api)
   *
   * @return  Promise
   */
  buffer() {
    return Vr.call(this);
  },
  /**
   * Decode response as text, while automatically detecting the encoding and
   * trying to decode to UTF-8 (non-spec api)
   *
   * @return  Promise
   */
  textConverted() {
    var e = this;
    return Vr.call(this).then(function(t) {
      return H3(t, e.headers);
    });
  }
};
Object.defineProperties(Ae.prototype, {
  body: { enumerable: !0 },
  bodyUsed: { enumerable: !0 },
  arrayBuffer: { enumerable: !0 },
  blob: { enumerable: !0 },
  json: { enumerable: !0 },
  text: { enumerable: !0 }
});
Ae.mixIn = function(e) {
  for (const t of Object.getOwnPropertyNames(Ae.prototype))
    if (!(t in e)) {
      const r = Object.getOwnPropertyDescriptor(Ae.prototype, t);
      Object.defineProperty(e, t, r);
    }
};
function Vr() {
  var e = this;
  if (this[Ft].disturbed)
    return Ae.Promise.reject(new TypeError(`body used already for: ${this.url}`));
  if (this[Ft].disturbed = !0, this[Ft].error)
    return Ae.Promise.reject(this[Ft].error);
  let t = this.body;
  if (t === null)
    return Ae.Promise.resolve(Buffer.alloc(0));
  if (r1(t) && (t = t.stream()), Buffer.isBuffer(t))
    return Ae.Promise.resolve(t);
  if (!(t instanceof Ze))
    return Ae.Promise.resolve(Buffer.alloc(0));
  let r = [], a = 0, i = !1;
  return new Ae.Promise(function(s, o) {
    let d;
    e.timeout && (d = setTimeout(function() {
      i = !0, o(new Ue(`Response timeout while trying to fetch ${e.url} (over ${e.timeout}ms)`, "body-timeout"));
    }, e.timeout)), t.on("error", function(l) {
      l.name === "AbortError" ? (i = !0, o(l)) : o(new Ue(`Invalid response body while trying to fetch ${e.url}: ${l.message}`, "system", l));
    }), t.on("data", function(l) {
      if (!(i || l === null)) {
        if (e.size && a + l.length > e.size) {
          i = !0, o(new Ue(`content size at ${e.url} over limit: ${e.size}`, "max-size"));
          return;
        }
        a += l.length, r.push(l);
      }
    }), t.on("end", function() {
      if (!i) {
        clearTimeout(d);
        try {
          s(Buffer.concat(r, a));
        } catch (l) {
          o(new Ue(`Could not create Buffer from response body for ${e.url}: ${l.message}`, "system", l));
        }
      }
    });
  });
}
function H3(e, t) {
  if (typeof Yn != "function")
    throw new Error("The package `encoding` must be installed to use the textConverted() function");
  const r = t.get("content-type");
  let a = "utf-8", i, s;
  return r && (i = /charset=([^;]*)/i.exec(r)), s = e.slice(0, 1024).toString(), !i && s && (i = /<meta.+?charset=(['"])(.+?)\1/i.exec(s)), !i && s && (i = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(s), i || (i = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(s), i && i.pop()), i && (i = /charset=(.*)/i.exec(i.pop()))), !i && s && (i = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(s)), i && (a = i.pop(), (a === "gb2312" || a === "gbk") && (a = "gb18030")), Yn(e, "UTF-8", a).toString();
}
function Ml(e) {
  return typeof e != "object" || typeof e.append != "function" || typeof e.delete != "function" || typeof e.get != "function" || typeof e.getAll != "function" || typeof e.has != "function" || typeof e.set != "function" ? !1 : e.constructor.name === "URLSearchParams" || Object.prototype.toString.call(e) === "[object URLSearchParams]" || typeof e.sort == "function";
}
function r1(e) {
  return typeof e == "object" && typeof e.arrayBuffer == "function" && typeof e.type == "string" && typeof e.stream == "function" && typeof e.constructor == "function" && typeof e.constructor.name == "string" && /^(Blob|File)$/.test(e.constructor.name) && /^(Blob|File)$/.test(e[Symbol.toStringTag]);
}
function ql(e) {
  let t, r, a = e.body;
  if (e.bodyUsed)
    throw new Error("cannot clone body after it is used");
  return a instanceof Ze && typeof a.getBoundary != "function" && (t = new Vp(), r = new Vp(), a.pipe(t), a.pipe(r), e[Ft].body = t, a = r), a;
}
function Wl(e) {
  return e === null ? null : typeof e == "string" ? "text/plain;charset=UTF-8" : Ml(e) ? "application/x-www-form-urlencoded;charset=UTF-8" : r1(e) ? e.type || null : Buffer.isBuffer(e) || Object.prototype.toString.call(e) === "[object ArrayBuffer]" || ArrayBuffer.isView(e) ? null : typeof e.getBoundary == "function" ? `multipart/form-data;boundary=${e.getBoundary()}` : e instanceof Ze ? null : "text/plain;charset=UTF-8";
}
function zl(e) {
  const t = e.body;
  return t === null ? 0 : r1(t) ? t.size : Buffer.isBuffer(t) ? t.length : t && typeof t.getLengthSync == "function" && (t._lengthRetrievers && t._lengthRetrievers.length == 0 || // 1.x
  t.hasKnownLength && t.hasKnownLength()) ? t.getLengthSync() : null;
}
function K3(e, t) {
  const r = t.body;
  r === null ? e.end() : r1(r) ? r.stream().pipe(e) : Buffer.isBuffer(r) ? (e.write(r), e.end()) : r.pipe(e);
}
Ae.Promise = global.Promise;
const Hl = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/, Jn = /[^\t\x20-\x7e\x80-\xff]/;
function Ra(e) {
  if (e = `${e}`, Hl.test(e) || e === "")
    throw new TypeError(`${e} is not a legal HTTP header name`);
}
function Lp(e) {
  if (e = `${e}`, Jn.test(e))
    throw new TypeError(`${e} is not a legal HTTP header value`);
}
function jr(e, t) {
  t = t.toLowerCase();
  for (const r in e)
    if (r.toLowerCase() === t)
      return r;
}
const _e = Symbol("map");
class mt {
  /**
   * Headers class
   *
   * @param   Object  headers  Response headers
   * @return  Void
   */
  constructor() {
    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
    if (this[_e] = /* @__PURE__ */ Object.create(null), t instanceof mt) {
      const r = t.raw(), a = Object.keys(r);
      for (const i of a)
        for (const s of r[i])
          this.append(i, s);
      return;
    }
    if (t != null)
      if (typeof t == "object") {
        const r = t[Symbol.iterator];
        if (r != null) {
          if (typeof r != "function")
            throw new TypeError("Header pairs must be iterable");
          const a = [];
          for (const i of t) {
            if (typeof i != "object" || typeof i[Symbol.iterator] != "function")
              throw new TypeError("Each header pair must be iterable");
            a.push(Array.from(i));
          }
          for (const i of a) {
            if (i.length !== 2)
              throw new TypeError("Each header pair must be a name/value tuple");
            this.append(i[0], i[1]);
          }
        } else
          for (const a of Object.keys(t)) {
            const i = t[a];
            this.append(a, i);
          }
      } else
        throw new TypeError("Provided initializer must be an object");
  }
  /**
   * Return combined header value given name
   *
   * @param   String  name  Header name
   * @return  Mixed
   */
  get(t) {
    t = `${t}`, Ra(t);
    const r = jr(this[_e], t);
    return r === void 0 ? null : this[_e][r].join(", ");
  }
  /**
   * Iterate over all headers
   *
   * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
   * @param   Boolean   thisArg   `this` context for callback function
   * @return  Void
   */
  forEach(t) {
    let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0, a = Zn(this), i = 0;
    for (; i < a.length; ) {
      var s = a[i];
      const o = s[0], d = s[1];
      t.call(r, d, o, this), a = Zn(this), i++;
    }
  }
  /**
   * Overwrite header values given name
   *
   * @param   String  name   Header name
   * @param   String  value  Header value
   * @return  Void
   */
  set(t, r) {
    t = `${t}`, r = `${r}`, Ra(t), Lp(r);
    const a = jr(this[_e], t);
    this[_e][a !== void 0 ? a : t] = [r];
  }
  /**
   * Append a value onto existing header
   *
   * @param   String  name   Header name
   * @param   String  value  Header value
   * @return  Void
   */
  append(t, r) {
    t = `${t}`, r = `${r}`, Ra(t), Lp(r);
    const a = jr(this[_e], t);
    a !== void 0 ? this[_e][a].push(r) : this[_e][t] = [r];
  }
  /**
   * Check for header name existence
   *
   * @param   String   name  Header name
   * @return  Boolean
   */
  has(t) {
    return t = `${t}`, Ra(t), jr(this[_e], t) !== void 0;
  }
  /**
   * Delete all header values given name
   *
   * @param   String  name  Header name
   * @return  Void
   */
  delete(t) {
    t = `${t}`, Ra(t);
    const r = jr(this[_e], t);
    r !== void 0 && delete this[_e][r];
  }
  /**
   * Return raw headers (non-spec api)
   *
   * @return  Object
   */
  raw() {
    return this[_e];
  }
  /**
   * Get an iterator on keys.
   *
   * @return  Iterator
   */
  keys() {
    return kn(this, "key");
  }
  /**
   * Get an iterator on values.
   *
   * @return  Iterator
   */
  values() {
    return kn(this, "value");
  }
  /**
   * Get an iterator on entries.
   *
   * This is the default iterator of the Headers object.
   *
   * @return  Iterator
   */
  [Symbol.iterator]() {
    return kn(this, "key+value");
  }
}
mt.prototype.entries = mt.prototype[Symbol.iterator];
Object.defineProperty(mt.prototype, Symbol.toStringTag, {
  value: "Headers",
  writable: !1,
  enumerable: !1,
  configurable: !0
});
Object.defineProperties(mt.prototype, {
  get: { enumerable: !0 },
  forEach: { enumerable: !0 },
  set: { enumerable: !0 },
  append: { enumerable: !0 },
  has: { enumerable: !0 },
  delete: { enumerable: !0 },
  keys: { enumerable: !0 },
  values: { enumerable: !0 },
  entries: { enumerable: !0 }
});
function Zn(e) {
  let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
  return Object.keys(e[_e]).sort().map(t === "key" ? function(a) {
    return a.toLowerCase();
  } : t === "value" ? function(a) {
    return e[_e][a].join(", ");
  } : function(a) {
    return [a.toLowerCase(), e[_e][a].join(", ")];
  });
}
const Xn = Symbol("internal");
function kn(e, t) {
  const r = Object.create(Rs);
  return r[Xn] = {
    target: e,
    kind: t,
    index: 0
  }, r;
}
const Rs = Object.setPrototypeOf({
  next() {
    if (!this || Object.getPrototypeOf(this) !== Rs)
      throw new TypeError("Value of `this` is not a HeadersIterator");
    var e = this[Xn];
    const t = e.target, r = e.kind, a = e.index, i = Zn(t, r), s = i.length;
    return a >= s ? {
      value: void 0,
      done: !0
    } : (this[Xn].index = a + 1, {
      value: i[a],
      done: !1
    });
  }
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
Object.defineProperty(Rs, Symbol.toStringTag, {
  value: "HeadersIterator",
  writable: !1,
  enumerable: !1,
  configurable: !0
});
function Q3(e) {
  const t = Object.assign({ __proto__: null }, e[_e]), r = jr(e[_e], "Host");
  return r !== void 0 && (t[r] = t[r][0]), t;
}
function Y3(e) {
  const t = new mt();
  for (const r of Object.keys(e))
    if (!Hl.test(r))
      if (Array.isArray(e[r]))
        for (const a of e[r])
          Jn.test(a) || (t[_e][r] === void 0 ? t[_e][r] = [a] : t[_e][r].push(a));
      else
        Jn.test(e[r]) || (t[_e][r] = [e[r]]);
  return t;
}
const Wt = Symbol("Response internals"), J3 = gi.STATUS_CODES;
class ut {
  constructor() {
    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Ae.call(this, t, r);
    const a = r.status || 200, i = new mt(r.headers);
    if (t != null && !i.has("Content-Type")) {
      const s = Wl(t);
      s && i.append("Content-Type", s);
    }
    this[Wt] = {
      url: r.url,
      status: a,
      statusText: r.statusText || J3[a],
      headers: i,
      counter: r.counter
    };
  }
  get url() {
    return this[Wt].url || "";
  }
  get status() {
    return this[Wt].status;
  }
  /**
   * Convenience property representing if the request ended normally
   */
  get ok() {
    return this[Wt].status >= 200 && this[Wt].status < 300;
  }
  get redirected() {
    return this[Wt].counter > 0;
  }
  get statusText() {
    return this[Wt].statusText;
  }
  get headers() {
    return this[Wt].headers;
  }
  /**
   * Clone this response
   *
   * @return  Response
   */
  clone() {
    return new ut(ql(this), {
      url: this.url,
      status: this.status,
      statusText: this.statusText,
      headers: this.headers,
      ok: this.ok,
      redirected: this.redirected
    });
  }
}
Ae.mixIn(ut.prototype);
Object.defineProperties(ut.prototype, {
  url: { enumerable: !0 },
  status: { enumerable: !0 },
  ok: { enumerable: !0 },
  redirected: { enumerable: !0 },
  statusText: { enumerable: !0 },
  headers: { enumerable: !0 },
  clone: { enumerable: !0 }
});
Object.defineProperty(ut.prototype, Symbol.toStringTag, {
  value: "Response",
  writable: !1,
  enumerable: !1,
  configurable: !0
});
const Pt = Symbol("Request internals"), Z3 = ta.URL || ct.URL, X3 = ta.parse, e9 = ta.format;
function In(e) {
  return /^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(e) && (e = new Z3(e).toString()), X3(e);
}
const t9 = "destroy" in Ze.Readable.prototype;
function K1(e) {
  return typeof e == "object" && typeof e[Pt] == "object";
}
function r9(e) {
  const t = e && typeof e == "object" && Object.getPrototypeOf(e);
  return !!(t && t.constructor.name === "AbortSignal");
}
class Er {
  constructor(t) {
    let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, a;
    K1(t) ? a = In(t.url) : (t && t.href ? a = In(t.href) : a = In(`${t}`), t = {});
    let i = r.method || t.method || "GET";
    if (i = i.toUpperCase(), (r.body != null || K1(t) && t.body !== null) && (i === "GET" || i === "HEAD"))
      throw new TypeError("Request with GET/HEAD method cannot have body");
    let s = r.body != null ? r.body : K1(t) && t.body !== null ? ql(t) : null;
    Ae.call(this, s, {
      timeout: r.timeout || t.timeout || 0,
      size: r.size || t.size || 0
    });
    const o = new mt(r.headers || t.headers || {});
    if (s != null && !o.has("Content-Type")) {
      const l = Wl(s);
      l && o.append("Content-Type", l);
    }
    let d = K1(t) ? t.signal : null;
    if ("signal" in r && (d = r.signal), d != null && !r9(d))
      throw new TypeError("Expected signal to be an instanceof AbortSignal");
    this[Pt] = {
      method: i,
      redirect: r.redirect || t.redirect || "follow",
      headers: o,
      parsedURL: a,
      signal: d
    }, this.follow = r.follow !== void 0 ? r.follow : t.follow !== void 0 ? t.follow : 20, this.compress = r.compress !== void 0 ? r.compress : t.compress !== void 0 ? t.compress : !0, this.counter = r.counter || t.counter || 0, this.agent = r.agent || t.agent;
  }
  get method() {
    return this[Pt].method;
  }
  get url() {
    return e9(this[Pt].parsedURL);
  }
  get headers() {
    return this[Pt].headers;
  }
  get redirect() {
    return this[Pt].redirect;
  }
  get signal() {
    return this[Pt].signal;
  }
  /**
   * Clone this request
   *
   * @return  Request
   */
  clone() {
    return new Er(this);
  }
}
Ae.mixIn(Er.prototype);
Object.defineProperty(Er.prototype, Symbol.toStringTag, {
  value: "Request",
  writable: !1,
  enumerable: !1,
  configurable: !0
});
Object.defineProperties(Er.prototype, {
  method: { enumerable: !0 },
  url: { enumerable: !0 },
  headers: { enumerable: !0 },
  redirect: { enumerable: !0 },
  clone: { enumerable: !0 },
  signal: { enumerable: !0 }
});
function a9(e) {
  const t = e[Pt].parsedURL, r = new mt(e[Pt].headers);
  if (r.has("Accept") || r.set("Accept", "*/*"), !t.protocol || !t.hostname)
    throw new TypeError("Only absolute URLs are supported");
  if (!/^https?:$/.test(t.protocol))
    throw new TypeError("Only HTTP(S) protocols are supported");
  if (e.signal && e.body instanceof Ze.Readable && !t9)
    throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
  let a = null;
  if (e.body == null && /^(POST|PUT)$/i.test(e.method) && (a = "0"), e.body != null) {
    const s = zl(e);
    typeof s == "number" && (a = String(s));
  }
  a && r.set("Content-Length", a), r.has("User-Agent") || r.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"), e.compress && !r.has("Accept-Encoding") && r.set("Accept-Encoding", "gzip,deflate");
  let i = e.agent;
  return typeof i == "function" && (i = i(t)), !r.has("Connection") && !i && r.set("Connection", "close"), Object.assign({}, t, {
    method: e.method,
    headers: Q3(r),
    agent: i
  });
}
function qa(e) {
  Error.call(this, e), this.type = "aborted", this.message = e, Error.captureStackTrace(this, this.constructor);
}
qa.prototype = Object.create(Error.prototype);
qa.prototype.constructor = qa;
qa.prototype.name = "AbortError";
const Wa = ta.URL || ct.URL, jp = Ze.PassThrough, i9 = function(t, r) {
  const a = new Wa(r).hostname, i = new Wa(t).hostname;
  return a === i || a[a.length - i.length - 1] === "." && a.endsWith(i);
}, n9 = function(t, r) {
  const a = new Wa(r).protocol, i = new Wa(t).protocol;
  return a === i;
};
function Yt(e, t) {
  if (!Yt.Promise)
    throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
  return Ae.Promise = Yt.Promise, new Yt.Promise(function(r, a) {
    const i = new Er(e, t), s = a9(i), o = (s.protocol === "https:" ? is : gi).request, d = i.signal;
    let l = null;
    const u = function() {
      let f = new qa("The user aborted a request.");
      a(f), i.body && i.body instanceof Ze.Readable && Gn(i.body, f), !(!l || !l.body) && l.body.emit("error", f);
    };
    if (d && d.aborted) {
      u();
      return;
    }
    const c = function() {
      u(), g();
    }, v = o(s);
    let T;
    d && d.addEventListener("abort", c);
    function g() {
      v.abort(), d && d.removeEventListener("abort", c), clearTimeout(T);
    }
    i.timeout && v.once("socket", function(w) {
      T = setTimeout(function() {
        a(new Ue(`network timeout at: ${i.url}`, "request-timeout")), g();
      }, i.timeout);
    }), v.on("error", function(w) {
      a(new Ue(`request to ${i.url} failed, reason: ${w.message}`, "system", w)), l && l.body && Gn(l.body, w), g();
    }), s9(v, function(w) {
      d && d.aborted || l && l.body && Gn(l.body, w);
    }), parseInt(process.version.substring(1)) < 14 && v.on("socket", function(w) {
      w.addListener("close", function(f) {
        const b = w.listenerCount("data") > 0;
        if (l && b && !f && !(d && d.aborted)) {
          const y = new Error("Premature close");
          y.code = "ERR_STREAM_PREMATURE_CLOSE", l.body.emit("error", y);
        }
      });
    }), v.on("response", function(w) {
      clearTimeout(T);
      const f = Y3(w.headers);
      if (Yt.isRedirect(w.statusCode)) {
        const $ = f.get("Location");
        let O = null;
        try {
          O = $ === null ? null : new Wa($, i.url).toString();
        } catch {
          if (i.redirect !== "manual") {
            a(new Ue(`uri requested responds with an invalid redirect URL: ${$}`, "invalid-redirect")), g();
            return;
          }
        }
        switch (i.redirect) {
          case "error":
            a(new Ue(`uri requested responds with a redirect, redirect mode is set to error: ${i.url}`, "no-redirect")), g();
            return;
          case "manual":
            if (O !== null)
              try {
                f.set("Location", O);
              } catch (C) {
                a(C);
              }
            break;
          case "follow":
            if (O === null)
              break;
            if (i.counter >= i.follow) {
              a(new Ue(`maximum redirect reached at: ${i.url}`, "max-redirect")), g();
              return;
            }
            const P = {
              headers: new mt(i.headers),
              follow: i.follow,
              counter: i.counter + 1,
              agent: i.agent,
              compress: i.compress,
              method: i.method,
              body: i.body,
              signal: i.signal,
              timeout: i.timeout,
              size: i.size
            };
            if (!i9(i.url, O) || !n9(i.url, O))
              for (const C of ["authorization", "www-authenticate", "cookie", "cookie2"])
                P.headers.delete(C);
            if (w.statusCode !== 303 && i.body && zl(i) === null) {
              a(new Ue("Cannot follow redirect with body being a readable stream", "unsupported-redirect")), g();
              return;
            }
            (w.statusCode === 303 || (w.statusCode === 301 || w.statusCode === 302) && i.method === "POST") && (P.method = "GET", P.body = void 0, P.headers.delete("content-length")), r(Yt(new Er(O, P))), g();
            return;
        }
      }
      w.once("end", function() {
        d && d.removeEventListener("abort", c);
      });
      let b = w.pipe(new jp());
      const y = {
        url: i.url,
        status: w.statusCode,
        statusText: w.statusMessage,
        headers: f,
        size: i.size,
        timeout: i.timeout,
        counter: i.counter
      }, k = f.get("Content-Encoding");
      if (!i.compress || i.method === "HEAD" || k === null || w.statusCode === 204 || w.statusCode === 304) {
        l = new ut(b, y), r(l);
        return;
      }
      const N = {
        flush: Ot.Z_SYNC_FLUSH,
        finishFlush: Ot.Z_SYNC_FLUSH
      };
      if (k == "gzip" || k == "x-gzip") {
        b = b.pipe(Ot.createGunzip(N)), l = new ut(b, y), r(l);
        return;
      }
      if (k == "deflate" || k == "x-deflate") {
        const $ = w.pipe(new jp());
        $.once("data", function(O) {
          (O[0] & 15) === 8 ? b = b.pipe(Ot.createInflate()) : b = b.pipe(Ot.createInflateRaw()), l = new ut(b, y), r(l);
        }), $.on("end", function() {
          l || (l = new ut(b, y), r(l));
        });
        return;
      }
      if (k == "br" && typeof Ot.createBrotliDecompress == "function") {
        b = b.pipe(Ot.createBrotliDecompress()), l = new ut(b, y), r(l);
        return;
      }
      l = new ut(b, y), r(l);
    }), K3(v, i);
  });
}
function s9(e, t) {
  let r;
  e.on("socket", function(a) {
    r = a;
  }), e.on("response", function(a) {
    const i = a.headers;
    i["transfer-encoding"] === "chunked" && !i["content-length"] && a.once("close", function(s) {
      if (r.listenerCount("data") > 0 && !s) {
        const d = new Error("Premature close");
        d.code = "ERR_STREAM_PREMATURE_CLOSE", t(d);
      }
    });
  });
}
function Gn(e, t) {
  e.destroy ? e.destroy(t) : (e.emit("error", t), e.end());
}
Yt.isRedirect = function(e) {
  return e === 301 || e === 302 || e === 303 || e === 307 || e === 308;
};
Yt.Promise = global.Promise;
class Mp extends Error {
  constructor(t) {
    super(t), Error.captureStackTrace && Error.captureStackTrace(this, this.constructor), this.name = "Deprecation";
  }
}
const o9 = qd((e) => console.warn(e)), p9 = qd((e) => console.warn(e));
class Oa extends Error {
  constructor(t, r, a) {
    super(t), Error.captureStackTrace && Error.captureStackTrace(this, this.constructor), this.name = "HttpError", this.status = r;
    let i;
    "headers" in a && typeof a.headers < "u" && (i = a.headers), "response" in a && (this.response = a.response, i = a.response.headers);
    const s = Object.assign({}, a.request);
    a.request.headers.authorization && (s.headers = Object.assign({}, a.request.headers, {
      authorization: a.request.headers.authorization.replace(/ .*$/, " [REDACTED]")
    })), s.url = s.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]"), this.request = s, Object.defineProperty(this, "code", {
      get() {
        return o9(new Mp("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")), r;
      }
    }), Object.defineProperty(this, "headers", {
      get() {
        return p9(new Mp("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")), i || {};
      }
    });
  }
}
const d9 = "5.6.3";
function l9(e) {
  return e.arrayBuffer();
}
function qp(e) {
  const t = e.request && e.request.log ? e.request.log : console;
  (yl(e.body) || Array.isArray(e.body)) && (e.body = JSON.stringify(e.body));
  let r = {}, a, i;
  return (e.request && e.request.fetch || Yt)(e.url, Object.assign(
    {
      method: e.method,
      body: e.body,
      headers: e.headers,
      redirect: e.redirect
    },
    // `requestOptions.request.agent` type is incompatible
    // see https://github.com/octokit/types.ts/pull/264
    e.request
  )).then(async (o) => {
    i = o.url, a = o.status;
    for (const d of o.headers)
      r[d[0]] = d[1];
    if ("deprecation" in r) {
      const d = r.link && r.link.match(/<([^>]+)>; rel="deprecation"/), l = d && d.pop();
      t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${r.sunset}${l ? `. See ${l}` : ""}`);
    }
    if (!(a === 204 || a === 205)) {
      if (e.method === "HEAD") {
        if (a < 400)
          return;
        throw new Oa(o.statusText, a, {
          response: {
            url: i,
            status: a,
            headers: r,
            data: void 0
          },
          request: e
        });
      }
      if (a === 304)
        throw new Oa("Not modified", a, {
          response: {
            url: i,
            status: a,
            headers: r,
            data: await $n(o)
          },
          request: e
        });
      if (a >= 400) {
        const d = await $n(o);
        throw new Oa(u9(d), a, {
          response: {
            url: i,
            status: a,
            headers: r,
            data: d
          },
          request: e
        });
      }
      return $n(o);
    }
  }).then((o) => ({
    status: a,
    url: i,
    headers: r,
    data: o
  })).catch((o) => {
    throw o instanceof Oa ? o : new Oa(o.message, 500, {
      request: e
    });
  });
}
async function $n(e) {
  const t = e.headers.get("content-type");
  return /application\/json/.test(t) ? e.json() : !t || /^text\/|charset=utf-8$/.test(t) ? e.text() : l9(e);
}
function u9(e) {
  return typeof e == "string" ? e : "message" in e ? Array.isArray(e.errors) ? `${e.message}: ${e.errors.map(JSON.stringify).join(", ")}` : e.message : `Unknown error: ${JSON.stringify(e)}`;
}
function es(e, t) {
  const r = e.defaults(t);
  return Object.assign(function(i, s) {
    const o = r.merge(i, s);
    if (!o.request || !o.request.hook)
      return qp(r.parse(o));
    const d = (l, u) => qp(r.parse(r.merge(l, u)));
    return Object.assign(d, {
      endpoint: r,
      defaults: es.bind(null, r)
    }), o.request.hook(d, o);
  }, {
    endpoint: r,
    defaults: es.bind(null, r)
  });
}
const ui = es(C3, {
  headers: {
    "user-agent": `octokit-request.js/${d9} ${Pi()}`
  }
}), m9 = "4.8.0";
function c9(e) {
  return `Request failed due to following response errors:
` + e.errors.map((t) => ` - ${t.message}`).join(`
`);
}
class f9 extends Error {
  constructor(t, r, a) {
    super(c9(a)), this.request = t, this.headers = r, this.response = a, this.name = "GraphqlResponseError", this.errors = a.errors, this.data = a.data, Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
  }
}
const h9 = [
  "method",
  "baseUrl",
  "url",
  "headers",
  "request",
  "query",
  "mediaType"
], g9 = ["query", "method", "url"], Wp = /\/api\/v3\/?$/;
function v9(e, t, r) {
  if (r) {
    if (typeof t == "string" && "query" in r)
      return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));
    for (const o in r)
      if (g9.includes(o))
        return Promise.reject(new Error(`[@octokit/graphql] "${o}" cannot be used as variable name`));
  }
  const a = typeof t == "string" ? Object.assign({ query: t }, r) : t, i = Object.keys(a).reduce((o, d) => h9.includes(d) ? (o[d] = a[d], o) : (o.variables || (o.variables = {}), o.variables[d] = a[d], o), {}), s = a.baseUrl || e.endpoint.DEFAULTS.baseUrl;
  return Wp.test(s) && (i.url = s.replace(Wp, "/api/graphql")), e(i).then((o) => {
    if (o.data.errors) {
      const d = {};
      for (const l of Object.keys(o.headers))
        d[l] = o.headers[l];
      throw new f9(i, d, o.data);
    }
    return o.data.data;
  });
}
function Os(e, t) {
  const r = e.defaults(t);
  return Object.assign((i, s) => v9(r, i, s), {
    defaults: Os.bind(null, r),
    endpoint: ui.endpoint
  });
}
Os(ui, {
  headers: {
    "user-agent": `octokit-graphql.js/${m9} ${Pi()}`
  },
  method: "POST",
  url: "/graphql"
});
function w9(e) {
  return Os(e, {
    method: "POST",
    url: "/graphql"
  });
}
const _9 = /^v1\./, b9 = /^ghs_/, y9 = /^ghu_/;
async function E9(e) {
  const t = e.split(/\./).length === 3, r = _9.test(e) || b9.test(e), a = y9.test(e);
  return {
    type: "token",
    token: e,
    tokenType: t ? "app" : r ? "installation" : a ? "user-to-server" : "oauth"
  };
}
function T9(e) {
  return e.split(/\./).length === 3 ? `bearer ${e}` : `token ${e}`;
}
async function S9(e, t, r, a) {
  const i = t.endpoint.merge(r, a);
  return i.headers.authorization = T9(e), t(i);
}
const A9 = function(t) {
  if (!t)
    throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
  if (typeof t != "string")
    throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
  return t = t.replace(/^(token|bearer) +/i, ""), Object.assign(E9.bind(null, t), {
    hook: S9.bind(null, t)
  });
}, Kl = "3.6.0";
class Ps {
  constructor(t = {}) {
    const r = new c3(), a = {
      baseUrl: ui.endpoint.DEFAULTS.baseUrl,
      headers: {},
      request: Object.assign({}, t.request, {
        // @ts-ignore internal usage only, no need to type
        hook: r.bind(null, "request")
      }),
      mediaType: {
        previews: [],
        format: ""
      }
    };
    if (a.headers["user-agent"] = [
      t.userAgent,
      `octokit-core.js/${Kl} ${Pi()}`
    ].filter(Boolean).join(" "), t.baseUrl && (a.baseUrl = t.baseUrl), t.previews && (a.mediaType.previews = t.previews), t.timeZone && (a.headers["time-zone"] = t.timeZone), this.request = ui.defaults(a), this.graphql = w9(this.request).defaults(a), this.log = Object.assign({
      debug: () => {
      },
      info: () => {
      },
      warn: console.warn.bind(console),
      error: console.error.bind(console)
    }, t.log), this.hook = r, t.authStrategy) {
      const { authStrategy: s, ...o } = t, d = s(Object.assign({
        request: this.request,
        log: this.log,
        // we pass the current octokit instance as well as its constructor options
        // to allow for authentication strategies that return a new octokit instance
        // that shares the same internal state as the current one. The original
        // requirement for this was the "event-octokit" authentication strategy
        // of https://github.com/probot/octokit-auth-probot.
        octokit: this,
        octokitOptions: o
      }, t.auth));
      r.wrap("request", d.hook), this.auth = d;
    } else if (!t.auth)
      this.auth = async () => ({
        type: "unauthenticated"
      });
    else {
      const s = A9(t.auth);
      r.wrap("request", s.hook), this.auth = s;
    }
    this.constructor.plugins.forEach((s) => {
      Object.assign(this, s(this, t));
    });
  }
  static defaults(t) {
    return class extends this {
      constructor(...a) {
        const i = a[0] || {};
        if (typeof t == "function") {
          super(t(i));
          return;
        }
        super(Object.assign({}, t, i, i.userAgent && t.userAgent ? {
          userAgent: `${i.userAgent} ${t.userAgent}`
        } : null));
      }
    };
  }
  /**
   * Attach a plugin (or many) to your Octokit instance.
   *
   * @example
   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
   */
  static plugin(...t) {
    var r;
    const a = this.plugins;
    return r = class extends this {
    }, r.plugins = a.concat(t.filter((s) => !a.includes(s))), r;
  }
}
Ps.VERSION = Kl;
Ps.plugins = [];
const C9 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Octokit: Ps
}, Symbol.toStringTag, { value: "Module" })), D9 = /* @__PURE__ */ Ja(C9), Ql = {
  actions: {
    addCustomLabelsToSelfHostedRunnerForOrg: [
      "POST /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    addCustomLabelsToSelfHostedRunnerForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    ],
    approveWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"
    ],
    cancelWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
    ],
    createOrUpdateEnvironmentSecret: [
      "PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"
    ],
    createRegistrationTokenForOrg: [
      "POST /orgs/{org}/actions/runners/registration-token"
    ],
    createRegistrationTokenForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/registration-token"
    ],
    createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
    createRemoveTokenForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/remove-token"
    ],
    createWorkflowDispatch: [
      "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
    ],
    deleteActionsCacheById: [
      "DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"
    ],
    deleteActionsCacheByKey: [
      "DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"
    ],
    deleteArtifact: [
      "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
    ],
    deleteEnvironmentSecret: [
      "DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"
    ],
    deleteSelfHostedRunnerFromOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}"
    ],
    deleteSelfHostedRunnerFromRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"
    ],
    deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
    deleteWorkflowRunLogs: [
      "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
    ],
    disableSelectedRepositoryGithubActionsOrganization: [
      "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"
    ],
    disableWorkflow: [
      "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"
    ],
    downloadArtifact: [
      "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
    ],
    downloadJobLogsForWorkflowRun: [
      "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
    ],
    downloadWorkflowRunAttemptLogs: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"
    ],
    downloadWorkflowRunLogs: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
    ],
    enableSelectedRepositoryGithubActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"
    ],
    enableWorkflow: [
      "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"
    ],
    getActionsCacheList: ["GET /repos/{owner}/{repo}/actions/caches"],
    getActionsCacheUsage: ["GET /repos/{owner}/{repo}/actions/cache/usage"],
    getActionsCacheUsageByRepoForOrg: [
      "GET /orgs/{org}/actions/cache/usage-by-repository"
    ],
    getActionsCacheUsageForEnterprise: [
      "GET /enterprises/{enterprise}/actions/cache/usage"
    ],
    getActionsCacheUsageForOrg: ["GET /orgs/{org}/actions/cache/usage"],
    getAllowedActionsOrganization: [
      "GET /orgs/{org}/actions/permissions/selected-actions"
    ],
    getAllowedActionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/selected-actions"
    ],
    getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
    getEnvironmentPublicKey: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"
    ],
    getEnvironmentSecret: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    getGithubActionsDefaultWorkflowPermissionsEnterprise: [
      "GET /enterprises/{enterprise}/actions/permissions/workflow"
    ],
    getGithubActionsDefaultWorkflowPermissionsOrganization: [
      "GET /orgs/{org}/actions/permissions/workflow"
    ],
    getGithubActionsDefaultWorkflowPermissionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/workflow"
    ],
    getGithubActionsPermissionsOrganization: [
      "GET /orgs/{org}/actions/permissions"
    ],
    getGithubActionsPermissionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions"
    ],
    getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
    getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
    getPendingDeploymentsForRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
    ],
    getRepoPermissions: [
      "GET /repos/{owner}/{repo}/actions/permissions",
      {},
      { renamed: ["actions", "getGithubActionsPermissionsRepository"] }
    ],
    getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
    getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
    getReviewsForRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"
    ],
    getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
    getSelfHostedRunnerForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/{runner_id}"
    ],
    getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
    getWorkflowAccessToRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/access"
    ],
    getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
    getWorkflowRunAttempt: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"
    ],
    getWorkflowRunUsage: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"
    ],
    getWorkflowUsage: [
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"
    ],
    listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
    listEnvironmentSecrets: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets"
    ],
    listJobsForWorkflowRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
    ],
    listJobsForWorkflowRunAttempt: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
    ],
    listLabelsForSelfHostedRunnerForOrg: [
      "GET /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    listLabelsForSelfHostedRunnerForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
    listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
    listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
    listRunnerApplicationsForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/downloads"
    ],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
    ],
    listSelectedRepositoriesEnabledGithubActionsOrganization: [
      "GET /orgs/{org}/actions/permissions/repositories"
    ],
    listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
    listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
    listWorkflowRunArtifacts: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
    ],
    listWorkflowRuns: [
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
    ],
    listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
    reRunJobForWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"
    ],
    reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
    reRunWorkflowFailedJobs: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"
    ],
    removeAllCustomLabelsFromSelfHostedRunnerForOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    removeAllCustomLabelsFromSelfHostedRunnerForRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    removeCustomLabelFromSelfHostedRunnerForOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"
    ],
    removeCustomLabelFromSelfHostedRunnerForRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    ],
    reviewPendingDeploymentsForRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
    ],
    setAllowedActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/selected-actions"
    ],
    setAllowedActionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"
    ],
    setCustomLabelsForSelfHostedRunnerForOrg: [
      "PUT /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    setCustomLabelsForSelfHostedRunnerForRepo: [
      "PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    setGithubActionsDefaultWorkflowPermissionsEnterprise: [
      "PUT /enterprises/{enterprise}/actions/permissions/workflow"
    ],
    setGithubActionsDefaultWorkflowPermissionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/workflow"
    ],
    setGithubActionsDefaultWorkflowPermissionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/workflow"
    ],
    setGithubActionsPermissionsOrganization: [
      "PUT /orgs/{org}/actions/permissions"
    ],
    setGithubActionsPermissionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
    ],
    setSelectedRepositoriesEnabledGithubActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/repositories"
    ],
    setWorkflowAccessToRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/access"
    ]
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
    deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
    deleteThreadSubscription: [
      "DELETE /notifications/threads/{thread_id}/subscription"
    ],
    getFeeds: ["GET /feeds"],
    getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
    getThread: ["GET /notifications/threads/{thread_id}"],
    getThreadSubscriptionForAuthenticatedUser: [
      "GET /notifications/threads/{thread_id}/subscription"
    ],
    listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
    listNotificationsForAuthenticatedUser: ["GET /notifications"],
    listOrgEventsForAuthenticatedUser: [
      "GET /users/{username}/events/orgs/{org}"
    ],
    listPublicEvents: ["GET /events"],
    listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
    listPublicEventsForUser: ["GET /users/{username}/events/public"],
    listPublicOrgEvents: ["GET /orgs/{org}/events"],
    listReceivedEventsForUser: ["GET /users/{username}/received_events"],
    listReceivedPublicEventsForUser: [
      "GET /users/{username}/received_events/public"
    ],
    listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
    listRepoNotificationsForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/notifications"
    ],
    listReposStarredByAuthenticatedUser: ["GET /user/starred"],
    listReposStarredByUser: ["GET /users/{username}/starred"],
    listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
    listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
    listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
    listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
    markNotificationsAsRead: ["PUT /notifications"],
    markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
    markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
    setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
    setThreadSubscription: [
      "PUT /notifications/threads/{thread_id}/subscription"
    ],
    starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
    unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
  },
  apps: {
    addRepoToInstallation: [
      "PUT /user/installations/{installation_id}/repositories/{repository_id}",
      {},
      { renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"] }
    ],
    addRepoToInstallationForAuthenticatedUser: [
      "PUT /user/installations/{installation_id}/repositories/{repository_id}"
    ],
    checkToken: ["POST /applications/{client_id}/token"],
    createFromManifest: ["POST /app-manifests/{code}/conversions"],
    createInstallationAccessToken: [
      "POST /app/installations/{installation_id}/access_tokens"
    ],
    deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
    deleteInstallation: ["DELETE /app/installations/{installation_id}"],
    deleteToken: ["DELETE /applications/{client_id}/token"],
    getAuthenticated: ["GET /app"],
    getBySlug: ["GET /apps/{app_slug}"],
    getInstallation: ["GET /app/installations/{installation_id}"],
    getOrgInstallation: ["GET /orgs/{org}/installation"],
    getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
    getSubscriptionPlanForAccount: [
      "GET /marketplace_listing/accounts/{account_id}"
    ],
    getSubscriptionPlanForAccountStubbed: [
      "GET /marketplace_listing/stubbed/accounts/{account_id}"
    ],
    getUserInstallation: ["GET /users/{username}/installation"],
    getWebhookConfigForApp: ["GET /app/hook/config"],
    getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
    listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
    listAccountsForPlanStubbed: [
      "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"
    ],
    listInstallationReposForAuthenticatedUser: [
      "GET /user/installations/{installation_id}/repositories"
    ],
    listInstallations: ["GET /app/installations"],
    listInstallationsForAuthenticatedUser: ["GET /user/installations"],
    listPlans: ["GET /marketplace_listing/plans"],
    listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
    listReposAccessibleToInstallation: ["GET /installation/repositories"],
    listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
    listSubscriptionsForAuthenticatedUserStubbed: [
      "GET /user/marketplace_purchases/stubbed"
    ],
    listWebhookDeliveries: ["GET /app/hook/deliveries"],
    redeliverWebhookDelivery: [
      "POST /app/hook/deliveries/{delivery_id}/attempts"
    ],
    removeRepoFromInstallation: [
      "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
      {},
      { renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"] }
    ],
    removeRepoFromInstallationForAuthenticatedUser: [
      "DELETE /user/installations/{installation_id}/repositories/{repository_id}"
    ],
    resetToken: ["PATCH /applications/{client_id}/token"],
    revokeInstallationAccessToken: ["DELETE /installation/token"],
    scopeToken: ["POST /applications/{client_id}/token/scoped"],
    suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
    unsuspendInstallation: [
      "DELETE /app/installations/{installation_id}/suspended"
    ],
    updateWebhookConfigForApp: ["PATCH /app/hook/config"]
  },
  billing: {
    getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
    getGithubActionsBillingUser: [
      "GET /users/{username}/settings/billing/actions"
    ],
    getGithubAdvancedSecurityBillingGhe: [
      "GET /enterprises/{enterprise}/settings/billing/advanced-security"
    ],
    getGithubAdvancedSecurityBillingOrg: [
      "GET /orgs/{org}/settings/billing/advanced-security"
    ],
    getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
    getGithubPackagesBillingUser: [
      "GET /users/{username}/settings/billing/packages"
    ],
    getSharedStorageBillingOrg: [
      "GET /orgs/{org}/settings/billing/shared-storage"
    ],
    getSharedStorageBillingUser: [
      "GET /users/{username}/settings/billing/shared-storage"
    ]
  },
  checks: {
    create: ["POST /repos/{owner}/{repo}/check-runs"],
    createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
    get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
    getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
    listAnnotations: [
      "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"
    ],
    listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
    listForSuite: [
      "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"
    ],
    listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
    rerequestRun: [
      "POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"
    ],
    rerequestSuite: [
      "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"
    ],
    setSuitesPreferences: [
      "PATCH /repos/{owner}/{repo}/check-suites/preferences"
    ],
    update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
  },
  codeScanning: {
    deleteAnalysis: [
      "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"
    ],
    getAlert: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
      {},
      { renamedParameters: { alert_id: "alert_number" } }
    ],
    getAnalysis: [
      "GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
    ],
    getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
    listAlertInstances: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/code-scanning/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
    listAlertsInstances: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
      {},
      { renamed: ["codeScanning", "listAlertInstances"] }
    ],
    listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
    ],
    uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
  },
  codesOfConduct: {
    getAllCodesOfConduct: ["GET /codes_of_conduct"],
    getConductCode: ["GET /codes_of_conduct/{key}"]
  },
  codespaces: {
    addRepositoryForSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    codespaceMachinesForAuthenticatedUser: [
      "GET /user/codespaces/{codespace_name}/machines"
    ],
    createForAuthenticatedUser: ["POST /user/codespaces"],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    createOrUpdateSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}"
    ],
    createWithPrForAuthenticatedUser: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"
    ],
    createWithRepoForAuthenticatedUser: [
      "POST /repos/{owner}/{repo}/codespaces"
    ],
    deleteForAuthenticatedUser: ["DELETE /user/codespaces/{codespace_name}"],
    deleteFromOrganization: [
      "DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"
    ],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    deleteSecretForAuthenticatedUser: [
      "DELETE /user/codespaces/secrets/{secret_name}"
    ],
    exportForAuthenticatedUser: [
      "POST /user/codespaces/{codespace_name}/exports"
    ],
    getExportDetailsForAuthenticatedUser: [
      "GET /user/codespaces/{codespace_name}/exports/{export_id}"
    ],
    getForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}"],
    getPublicKeyForAuthenticatedUser: [
      "GET /user/codespaces/secrets/public-key"
    ],
    getRepoPublicKey: [
      "GET /repos/{owner}/{repo}/codespaces/secrets/public-key"
    ],
    getRepoSecret: [
      "GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    getSecretForAuthenticatedUser: [
      "GET /user/codespaces/secrets/{secret_name}"
    ],
    listDevcontainersInRepositoryForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/devcontainers"
    ],
    listForAuthenticatedUser: ["GET /user/codespaces"],
    listInOrganization: [
      "GET /orgs/{org}/codespaces",
      {},
      { renamedParameters: { org_id: "org" } }
    ],
    listInRepositoryForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces"
    ],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/codespaces/secrets"],
    listRepositoriesForSecretForAuthenticatedUser: [
      "GET /user/codespaces/secrets/{secret_name}/repositories"
    ],
    listSecretsForAuthenticatedUser: ["GET /user/codespaces/secrets"],
    removeRepositoryForSecretForAuthenticatedUser: [
      "DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    repoMachinesForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/machines"
    ],
    setRepositoriesForSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}/repositories"
    ],
    startForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/start"],
    stopForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/stop"],
    stopInOrganization: [
      "POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"
    ],
    updateForAuthenticatedUser: ["PATCH /user/codespaces/{codespace_name}"]
  },
  dependabot: {
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
    ],
    createOrUpdateOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}"
    ],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    getOrgPublicKey: ["GET /orgs/{org}/dependabot/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}"],
    getRepoPublicKey: [
      "GET /repos/{owner}/{repo}/dependabot/secrets/public-key"
    ],
    getRepoSecret: [
      "GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    listOrgSecrets: ["GET /orgs/{org}/dependabot/secrets"],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/dependabot/secrets"],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
    ]
  },
  dependencyGraph: {
    createRepositorySnapshot: [
      "POST /repos/{owner}/{repo}/dependency-graph/snapshots"
    ],
    diffRange: [
      "GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"
    ]
  },
  emojis: { get: ["GET /emojis"] },
  enterpriseAdmin: {
    addCustomLabelsToSelfHostedRunnerForEnterprise: [
      "POST /enterprises/{enterprise}/actions/runners/{runner_id}/labels"
    ],
    disableSelectedOrganizationGithubActionsEnterprise: [
      "DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"
    ],
    enableSelectedOrganizationGithubActionsEnterprise: [
      "PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"
    ],
    getAllowedActionsEnterprise: [
      "GET /enterprises/{enterprise}/actions/permissions/selected-actions"
    ],
    getGithubActionsPermissionsEnterprise: [
      "GET /enterprises/{enterprise}/actions/permissions"
    ],
    getServerStatistics: [
      "GET /enterprise-installation/{enterprise_or_org}/server-statistics"
    ],
    listLabelsForSelfHostedRunnerForEnterprise: [
      "GET /enterprises/{enterprise}/actions/runners/{runner_id}/labels"
    ],
    listSelectedOrganizationsEnabledGithubActionsEnterprise: [
      "GET /enterprises/{enterprise}/actions/permissions/organizations"
    ],
    removeAllCustomLabelsFromSelfHostedRunnerForEnterprise: [
      "DELETE /enterprises/{enterprise}/actions/runners/{runner_id}/labels"
    ],
    removeCustomLabelFromSelfHostedRunnerForEnterprise: [
      "DELETE /enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}"
    ],
    setAllowedActionsEnterprise: [
      "PUT /enterprises/{enterprise}/actions/permissions/selected-actions"
    ],
    setCustomLabelsForSelfHostedRunnerForEnterprise: [
      "PUT /enterprises/{enterprise}/actions/runners/{runner_id}/labels"
    ],
    setGithubActionsPermissionsEnterprise: [
      "PUT /enterprises/{enterprise}/actions/permissions"
    ],
    setSelectedOrganizationsEnabledGithubActionsEnterprise: [
      "PUT /enterprises/{enterprise}/actions/permissions/organizations"
    ]
  },
  gists: {
    checkIsStarred: ["GET /gists/{gist_id}/star"],
    create: ["POST /gists"],
    createComment: ["POST /gists/{gist_id}/comments"],
    delete: ["DELETE /gists/{gist_id}"],
    deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
    fork: ["POST /gists/{gist_id}/forks"],
    get: ["GET /gists/{gist_id}"],
    getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
    getRevision: ["GET /gists/{gist_id}/{sha}"],
    list: ["GET /gists"],
    listComments: ["GET /gists/{gist_id}/comments"],
    listCommits: ["GET /gists/{gist_id}/commits"],
    listForUser: ["GET /users/{username}/gists"],
    listForks: ["GET /gists/{gist_id}/forks"],
    listPublic: ["GET /gists/public"],
    listStarred: ["GET /gists/starred"],
    star: ["PUT /gists/{gist_id}/star"],
    unstar: ["DELETE /gists/{gist_id}/star"],
    update: ["PATCH /gists/{gist_id}"],
    updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
  },
  git: {
    createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
    createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
    createRef: ["POST /repos/{owner}/{repo}/git/refs"],
    createTag: ["POST /repos/{owner}/{repo}/git/tags"],
    createTree: ["POST /repos/{owner}/{repo}/git/trees"],
    deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
    getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
    getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
    getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
    getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
    getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
    listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
    updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
  },
  gitignore: {
    getAllTemplates: ["GET /gitignore/templates"],
    getTemplate: ["GET /gitignore/templates/{name}"]
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
    getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
    getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
    getRestrictionsForYourPublicRepos: [
      "GET /user/interaction-limits",
      {},
      { renamed: ["interactions", "getRestrictionsForAuthenticatedUser"] }
    ],
    removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
    removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
    removeRestrictionsForRepo: [
      "DELETE /repos/{owner}/{repo}/interaction-limits"
    ],
    removeRestrictionsForYourPublicRepos: [
      "DELETE /user/interaction-limits",
      {},
      { renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"] }
    ],
    setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
    setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
    setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
    setRestrictionsForYourPublicRepos: [
      "PUT /user/interaction-limits",
      {},
      { renamed: ["interactions", "setRestrictionsForAuthenticatedUser"] }
    ]
  },
  issues: {
    addAssignees: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"
    ],
    addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
    create: ["POST /repos/{owner}/{repo}/issues"],
    createComment: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/comments"
    ],
    createLabel: ["POST /repos/{owner}/{repo}/labels"],
    createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
    deleteComment: [
      "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"
    ],
    deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
    deleteMilestone: [
      "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"
    ],
    get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
    getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
    getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
    getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
    list: ["GET /issues"],
    listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
    listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
    listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
    listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
    listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
    listEventsForTimeline: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"
    ],
    listForAuthenticatedUser: ["GET /user/issues"],
    listForOrg: ["GET /orgs/{org}/issues"],
    listForRepo: ["GET /repos/{owner}/{repo}/issues"],
    listLabelsForMilestone: [
      "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"
    ],
    listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
    listLabelsOnIssue: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/labels"
    ],
    listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
    lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
    removeAllLabels: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"
    ],
    removeAssignees: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"
    ],
    removeLabel: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"
    ],
    setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
    update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
    updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
    updateMilestone: [
      "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"
    ]
  },
  licenses: {
    get: ["GET /licenses/{license}"],
    getAllCommonlyUsed: ["GET /licenses"],
    getForRepo: ["GET /repos/{owner}/{repo}/license"]
  },
  markdown: {
    render: ["POST /markdown"],
    renderRaw: [
      "POST /markdown/raw",
      { headers: { "content-type": "text/plain; charset=utf-8" } }
    ]
  },
  meta: {
    get: ["GET /meta"],
    getOctocat: ["GET /octocat"],
    getZen: ["GET /zen"],
    root: ["GET /"]
  },
  migrations: {
    cancelImport: ["DELETE /repos/{owner}/{repo}/import"],
    deleteArchiveForAuthenticatedUser: [
      "DELETE /user/migrations/{migration_id}/archive"
    ],
    deleteArchiveForOrg: [
      "DELETE /orgs/{org}/migrations/{migration_id}/archive"
    ],
    downloadArchiveForOrg: [
      "GET /orgs/{org}/migrations/{migration_id}/archive"
    ],
    getArchiveForAuthenticatedUser: [
      "GET /user/migrations/{migration_id}/archive"
    ],
    getCommitAuthors: ["GET /repos/{owner}/{repo}/import/authors"],
    getImportStatus: ["GET /repos/{owner}/{repo}/import"],
    getLargeFiles: ["GET /repos/{owner}/{repo}/import/large_files"],
    getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
    getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
    listForAuthenticatedUser: ["GET /user/migrations"],
    listForOrg: ["GET /orgs/{org}/migrations"],
    listReposForAuthenticatedUser: [
      "GET /user/migrations/{migration_id}/repositories"
    ],
    listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
    listReposForUser: [
      "GET /user/migrations/{migration_id}/repositories",
      {},
      { renamed: ["migrations", "listReposForAuthenticatedUser"] }
    ],
    mapCommitAuthor: ["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],
    setLfsPreference: ["PATCH /repos/{owner}/{repo}/import/lfs"],
    startForAuthenticatedUser: ["POST /user/migrations"],
    startForOrg: ["POST /orgs/{org}/migrations"],
    startImport: ["PUT /repos/{owner}/{repo}/import"],
    unlockRepoForAuthenticatedUser: [
      "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"
    ],
    unlockRepoForOrg: [
      "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"
    ],
    updateImport: ["PATCH /repos/{owner}/{repo}/import"]
  },
  orgs: {
    blockUser: ["PUT /orgs/{org}/blocks/{username}"],
    cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
    checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
    checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
    checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
    convertMemberToOutsideCollaborator: [
      "PUT /orgs/{org}/outside_collaborators/{username}"
    ],
    createInvitation: ["POST /orgs/{org}/invitations"],
    createWebhook: ["POST /orgs/{org}/hooks"],
    deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
    get: ["GET /orgs/{org}"],
    getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
    getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
    getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
    getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
    getWebhookDelivery: [
      "GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"
    ],
    list: ["GET /organizations"],
    listAppInstallations: ["GET /orgs/{org}/installations"],
    listBlockedUsers: ["GET /orgs/{org}/blocks"],
    listCustomRoles: ["GET /organizations/{organization_id}/custom_roles"],
    listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
    listForAuthenticatedUser: ["GET /user/orgs"],
    listForUser: ["GET /users/{username}/orgs"],
    listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
    listMembers: ["GET /orgs/{org}/members"],
    listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
    listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
    listPendingInvitations: ["GET /orgs/{org}/invitations"],
    listPublicMembers: ["GET /orgs/{org}/public_members"],
    listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
    listWebhooks: ["GET /orgs/{org}/hooks"],
    pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
    redeliverWebhookDelivery: [
      "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    ],
    removeMember: ["DELETE /orgs/{org}/members/{username}"],
    removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
    removeOutsideCollaborator: [
      "DELETE /orgs/{org}/outside_collaborators/{username}"
    ],
    removePublicMembershipForAuthenticatedUser: [
      "DELETE /orgs/{org}/public_members/{username}"
    ],
    setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
    setPublicMembershipForAuthenticatedUser: [
      "PUT /orgs/{org}/public_members/{username}"
    ],
    unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
    update: ["PATCH /orgs/{org}"],
    updateMembershipForAuthenticatedUser: [
      "PATCH /user/memberships/orgs/{org}"
    ],
    updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
    updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
  },
  packages: {
    deletePackageForAuthenticatedUser: [
      "DELETE /user/packages/{package_type}/{package_name}"
    ],
    deletePackageForOrg: [
      "DELETE /orgs/{org}/packages/{package_type}/{package_name}"
    ],
    deletePackageForUser: [
      "DELETE /users/{username}/packages/{package_type}/{package_name}"
    ],
    deletePackageVersionForAuthenticatedUser: [
      "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    deletePackageVersionForOrg: [
      "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    deletePackageVersionForUser: [
      "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getAllPackageVersionsForAPackageOwnedByAnOrg: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
      {},
      { renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"] }
    ],
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions",
      {},
      {
        renamed: [
          "packages",
          "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"
        ]
      }
    ],
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions"
    ],
    getAllPackageVersionsForPackageOwnedByOrg: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions"
    ],
    getAllPackageVersionsForPackageOwnedByUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}/versions"
    ],
    getPackageForAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}"
    ],
    getPackageForOrganization: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}"
    ],
    getPackageForUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}"
    ],
    getPackageVersionForAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getPackageVersionForOrganization: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getPackageVersionForUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    listPackagesForAuthenticatedUser: ["GET /user/packages"],
    listPackagesForOrganization: ["GET /orgs/{org}/packages"],
    listPackagesForUser: ["GET /users/{username}/packages"],
    restorePackageForAuthenticatedUser: [
      "POST /user/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageForOrg: [
      "POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageForUser: [
      "POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageVersionForAuthenticatedUser: [
      "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ],
    restorePackageVersionForOrg: [
      "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ],
    restorePackageVersionForUser: [
      "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ]
  },
  projects: {
    addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
    createCard: ["POST /projects/columns/{column_id}/cards"],
    createColumn: ["POST /projects/{project_id}/columns"],
    createForAuthenticatedUser: ["POST /user/projects"],
    createForOrg: ["POST /orgs/{org}/projects"],
    createForRepo: ["POST /repos/{owner}/{repo}/projects"],
    delete: ["DELETE /projects/{project_id}"],
    deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
    deleteColumn: ["DELETE /projects/columns/{column_id}"],
    get: ["GET /projects/{project_id}"],
    getCard: ["GET /projects/columns/cards/{card_id}"],
    getColumn: ["GET /projects/columns/{column_id}"],
    getPermissionForUser: [
      "GET /projects/{project_id}/collaborators/{username}/permission"
    ],
    listCards: ["GET /projects/columns/{column_id}/cards"],
    listCollaborators: ["GET /projects/{project_id}/collaborators"],
    listColumns: ["GET /projects/{project_id}/columns"],
    listForOrg: ["GET /orgs/{org}/projects"],
    listForRepo: ["GET /repos/{owner}/{repo}/projects"],
    listForUser: ["GET /users/{username}/projects"],
    moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
    moveColumn: ["POST /projects/columns/{column_id}/moves"],
    removeCollaborator: [
      "DELETE /projects/{project_id}/collaborators/{username}"
    ],
    update: ["PATCH /projects/{project_id}"],
    updateCard: ["PATCH /projects/columns/cards/{card_id}"],
    updateColumn: ["PATCH /projects/columns/{column_id}"]
  },
  pulls: {
    checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
    create: ["POST /repos/{owner}/{repo}/pulls"],
    createReplyForReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
    ],
    createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
    createReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"
    ],
    deletePendingReview: [
      "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    deleteReviewComment: [
      "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"
    ],
    dismissReview: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
    ],
    get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
    getReview: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
    list: ["GET /repos/{owner}/{repo}/pulls"],
    listCommentsForReview: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
    ],
    listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
    listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
    listRequestedReviewers: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    listReviewComments: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"
    ],
    listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
    listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
    merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
    removeRequestedReviewers: [
      "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    requestReviewers: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    submitReview: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
    ],
    update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
    updateBranch: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"
    ],
    updateReview: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    updateReviewComment: [
      "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"
    ]
  },
  rateLimit: { get: ["GET /rate_limit"] },
  reactions: {
    createForCommitComment: [
      "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"
    ],
    createForIssue: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"
    ],
    createForIssueComment: [
      "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
    ],
    createForPullRequestReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
    ],
    createForRelease: [
      "POST /repos/{owner}/{repo}/releases/{release_id}/reactions"
    ],
    createForTeamDiscussionCommentInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
    ],
    createForTeamDiscussionInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
    ],
    deleteForCommitComment: [
      "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForIssue: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
    ],
    deleteForIssueComment: [
      "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForPullRequestComment: [
      "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForRelease: [
      "DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"
    ],
    deleteForTeamDiscussion: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
    ],
    deleteForTeamDiscussionComment: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
    ],
    listForCommitComment: [
      "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"
    ],
    listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
    listForIssueComment: [
      "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
    ],
    listForPullRequestReviewComment: [
      "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
    ],
    listForRelease: [
      "GET /repos/{owner}/{repo}/releases/{release_id}/reactions"
    ],
    listForTeamDiscussionCommentInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
    ],
    listForTeamDiscussionInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
    ]
  },
  repos: {
    acceptInvitation: [
      "PATCH /user/repository_invitations/{invitation_id}",
      {},
      { renamed: ["repos", "acceptInvitationForAuthenticatedUser"] }
    ],
    acceptInvitationForAuthenticatedUser: [
      "PATCH /user/repository_invitations/{invitation_id}"
    ],
    addAppAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
    addStatusCheckContexts: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    addTeamAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    addUserAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
    checkVulnerabilityAlerts: [
      "GET /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    codeownersErrors: ["GET /repos/{owner}/{repo}/codeowners/errors"],
    compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
    compareCommitsWithBasehead: [
      "GET /repos/{owner}/{repo}/compare/{basehead}"
    ],
    createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
    createCommitComment: [
      "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"
    ],
    createCommitSignatureProtection: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
    createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
    createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
    createDeploymentStatus: [
      "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
    ],
    createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
    createForAuthenticatedUser: ["POST /user/repos"],
    createFork: ["POST /repos/{owner}/{repo}/forks"],
    createInOrg: ["POST /orgs/{org}/repos"],
    createOrUpdateEnvironment: [
      "PUT /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
    createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
    createRelease: ["POST /repos/{owner}/{repo}/releases"],
    createTagProtection: ["POST /repos/{owner}/{repo}/tags/protection"],
    createUsingTemplate: [
      "POST /repos/{template_owner}/{template_repo}/generate"
    ],
    createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
    declineInvitation: [
      "DELETE /user/repository_invitations/{invitation_id}",
      {},
      { renamed: ["repos", "declineInvitationForAuthenticatedUser"] }
    ],
    declineInvitationForAuthenticatedUser: [
      "DELETE /user/repository_invitations/{invitation_id}"
    ],
    delete: ["DELETE /repos/{owner}/{repo}"],
    deleteAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
    ],
    deleteAdminBranchProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    deleteAnEnvironment: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
    deleteBranchProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
    deleteCommitSignatureProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
    deleteDeployment: [
      "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"
    ],
    deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
    deleteInvitation: [
      "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"
    ],
    deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
    deletePullRequestReviewProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
    deleteReleaseAsset: [
      "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"
    ],
    deleteTagProtection: [
      "DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"
    ],
    deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
    disableAutomatedSecurityFixes: [
      "DELETE /repos/{owner}/{repo}/automated-security-fixes"
    ],
    disableLfsForRepo: ["DELETE /repos/{owner}/{repo}/lfs"],
    disableVulnerabilityAlerts: [
      "DELETE /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    downloadArchive: [
      "GET /repos/{owner}/{repo}/zipball/{ref}",
      {},
      { renamed: ["repos", "downloadZipballArchive"] }
    ],
    downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
    downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
    enableAutomatedSecurityFixes: [
      "PUT /repos/{owner}/{repo}/automated-security-fixes"
    ],
    enableLfsForRepo: ["PUT /repos/{owner}/{repo}/lfs"],
    enableVulnerabilityAlerts: [
      "PUT /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    generateReleaseNotes: [
      "POST /repos/{owner}/{repo}/releases/generate-notes"
    ],
    get: ["GET /repos/{owner}/{repo}"],
    getAccessRestrictions: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
    ],
    getAdminBranchProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
    getAllStatusCheckContexts: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
    ],
    getAllTopics: ["GET /repos/{owner}/{repo}/topics"],
    getAppsWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
    ],
    getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
    getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
    getBranchProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
    getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
    getCollaboratorPermissionLevel: [
      "GET /repos/{owner}/{repo}/collaborators/{username}/permission"
    ],
    getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
    getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
    getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
    getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
    getCommitSignatureProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
    getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
    getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
    getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
    getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
    getDeploymentStatus: [
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
    ],
    getEnvironment: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
    getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
    getPages: ["GET /repos/{owner}/{repo}/pages"],
    getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
    getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
    getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
    getPullRequestReviewProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
    getReadme: ["GET /repos/{owner}/{repo}/readme"],
    getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
    getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
    getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
    getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
    getStatusChecksProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    getTeamsWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
    ],
    getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
    getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
    getUsersWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
    ],
    getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
    getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
    getWebhookConfigForRepo: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/config"
    ],
    getWebhookDelivery: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    ],
    listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
    listBranches: ["GET /repos/{owner}/{repo}/branches"],
    listBranchesForHeadCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
    ],
    listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
    listCommentsForCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"
    ],
    listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
    listCommitStatusesForRef: [
      "GET /repos/{owner}/{repo}/commits/{ref}/statuses"
    ],
    listCommits: ["GET /repos/{owner}/{repo}/commits"],
    listContributors: ["GET /repos/{owner}/{repo}/contributors"],
    listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
    listDeploymentStatuses: [
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
    ],
    listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
    listForAuthenticatedUser: ["GET /user/repos"],
    listForOrg: ["GET /orgs/{org}/repos"],
    listForUser: ["GET /users/{username}/repos"],
    listForks: ["GET /repos/{owner}/{repo}/forks"],
    listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
    listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
    listLanguages: ["GET /repos/{owner}/{repo}/languages"],
    listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
    listPublic: ["GET /repositories"],
    listPullRequestsAssociatedWithCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"
    ],
    listReleaseAssets: [
      "GET /repos/{owner}/{repo}/releases/{release_id}/assets"
    ],
    listReleases: ["GET /repos/{owner}/{repo}/releases"],
    listTagProtection: ["GET /repos/{owner}/{repo}/tags/protection"],
    listTags: ["GET /repos/{owner}/{repo}/tags"],
    listTeams: ["GET /repos/{owner}/{repo}/teams"],
    listWebhookDeliveries: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    ],
    listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
    merge: ["POST /repos/{owner}/{repo}/merges"],
    mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
    pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
    redeliverWebhookDelivery: [
      "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    ],
    removeAppAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    removeCollaborator: [
      "DELETE /repos/{owner}/{repo}/collaborators/{username}"
    ],
    removeStatusCheckContexts: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    removeStatusCheckProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    removeTeamAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    removeUserAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
    replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics"],
    requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
    setAdminBranchProtection: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    setAppAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    setStatusCheckContexts: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    setTeamAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    setUserAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
    transfer: ["POST /repos/{owner}/{repo}/transfer"],
    update: ["PATCH /repos/{owner}/{repo}"],
    updateBranchProtection: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
    updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
    updateInvitation: [
      "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"
    ],
    updatePullRequestReviewProtection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
    updateReleaseAsset: [
      "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"
    ],
    updateStatusCheckPotection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
      {},
      { renamed: ["repos", "updateStatusCheckProtection"] }
    ],
    updateStatusCheckProtection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
    updateWebhookConfigForRepo: [
      "PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"
    ],
    uploadReleaseAsset: [
      "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
      { baseUrl: "https://uploads.github.com" }
    ]
  },
  search: {
    code: ["GET /search/code"],
    commits: ["GET /search/commits"],
    issuesAndPullRequests: ["GET /search/issues"],
    labels: ["GET /search/labels"],
    repos: ["GET /search/repositories"],
    topics: ["GET /search/topics"],
    users: ["GET /search/users"]
  },
  secretScanning: {
    getAlert: [
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    ],
    listAlertsForEnterprise: [
      "GET /enterprises/{enterprise}/secret-scanning/alerts"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
    listLocationsForAlert: [
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
    ],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    ]
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    addOrUpdateProjectPermissionsInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    addOrUpdateRepoPermissionsInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    checkPermissionsForProjectInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    checkPermissionsForRepoInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    create: ["POST /orgs/{org}/teams"],
    createDiscussionCommentInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
    ],
    createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
    deleteDiscussionCommentInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    deleteDiscussionInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
    getByName: ["GET /orgs/{org}/teams/{team_slug}"],
    getDiscussionCommentInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    getDiscussionInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    getMembershipForUserInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    list: ["GET /orgs/{org}/teams"],
    listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
    listDiscussionCommentsInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
    ],
    listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
    listForAuthenticatedUser: ["GET /user/teams"],
    listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
    listPendingInvitationsInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/invitations"
    ],
    listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
    listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
    removeMembershipForUserInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    removeProjectInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    removeRepoInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    updateDiscussionCommentInOrg: [
      "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    updateDiscussionInOrg: [
      "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
  },
  users: {
    addEmailForAuthenticated: [
      "POST /user/emails",
      {},
      { renamed: ["users", "addEmailForAuthenticatedUser"] }
    ],
    addEmailForAuthenticatedUser: ["POST /user/emails"],
    block: ["PUT /user/blocks/{username}"],
    checkBlocked: ["GET /user/blocks/{username}"],
    checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
    checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
    createGpgKeyForAuthenticated: [
      "POST /user/gpg_keys",
      {},
      { renamed: ["users", "createGpgKeyForAuthenticatedUser"] }
    ],
    createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
    createPublicSshKeyForAuthenticated: [
      "POST /user/keys",
      {},
      { renamed: ["users", "createPublicSshKeyForAuthenticatedUser"] }
    ],
    createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
    deleteEmailForAuthenticated: [
      "DELETE /user/emails",
      {},
      { renamed: ["users", "deleteEmailForAuthenticatedUser"] }
    ],
    deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
    deleteGpgKeyForAuthenticated: [
      "DELETE /user/gpg_keys/{gpg_key_id}",
      {},
      { renamed: ["users", "deleteGpgKeyForAuthenticatedUser"] }
    ],
    deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
    deletePublicSshKeyForAuthenticated: [
      "DELETE /user/keys/{key_id}",
      {},
      { renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"] }
    ],
    deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
    follow: ["PUT /user/following/{username}"],
    getAuthenticated: ["GET /user"],
    getByUsername: ["GET /users/{username}"],
    getContextForUser: ["GET /users/{username}/hovercard"],
    getGpgKeyForAuthenticated: [
      "GET /user/gpg_keys/{gpg_key_id}",
      {},
      { renamed: ["users", "getGpgKeyForAuthenticatedUser"] }
    ],
    getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
    getPublicSshKeyForAuthenticated: [
      "GET /user/keys/{key_id}",
      {},
      { renamed: ["users", "getPublicSshKeyForAuthenticatedUser"] }
    ],
    getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
    list: ["GET /users"],
    listBlockedByAuthenticated: [
      "GET /user/blocks",
      {},
      { renamed: ["users", "listBlockedByAuthenticatedUser"] }
    ],
    listBlockedByAuthenticatedUser: ["GET /user/blocks"],
    listEmailsForAuthenticated: [
      "GET /user/emails",
      {},
      { renamed: ["users", "listEmailsForAuthenticatedUser"] }
    ],
    listEmailsForAuthenticatedUser: ["GET /user/emails"],
    listFollowedByAuthenticated: [
      "GET /user/following",
      {},
      { renamed: ["users", "listFollowedByAuthenticatedUser"] }
    ],
    listFollowedByAuthenticatedUser: ["GET /user/following"],
    listFollowersForAuthenticatedUser: ["GET /user/followers"],
    listFollowersForUser: ["GET /users/{username}/followers"],
    listFollowingForUser: ["GET /users/{username}/following"],
    listGpgKeysForAuthenticated: [
      "GET /user/gpg_keys",
      {},
      { renamed: ["users", "listGpgKeysForAuthenticatedUser"] }
    ],
    listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
    listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
    listPublicEmailsForAuthenticated: [
      "GET /user/public_emails",
      {},
      { renamed: ["users", "listPublicEmailsForAuthenticatedUser"] }
    ],
    listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
    listPublicKeysForUser: ["GET /users/{username}/keys"],
    listPublicSshKeysForAuthenticated: [
      "GET /user/keys",
      {},
      { renamed: ["users", "listPublicSshKeysForAuthenticatedUser"] }
    ],
    listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
    setPrimaryEmailVisibilityForAuthenticated: [
      "PATCH /user/email/visibility",
      {},
      { renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"] }
    ],
    setPrimaryEmailVisibilityForAuthenticatedUser: [
      "PATCH /user/email/visibility"
    ],
    unblock: ["DELETE /user/blocks/{username}"],
    unfollow: ["DELETE /user/following/{username}"],
    updateAuthenticated: ["PATCH /user"]
  }
}, Yl = "5.16.2";
function Jl(e, t) {
  const r = {};
  for (const [a, i] of Object.entries(t))
    for (const [s, o] of Object.entries(i)) {
      const [d, l, u] = o, [c, v] = d.split(/ /), T = Object.assign({ method: c, url: v }, l);
      r[a] || (r[a] = {});
      const g = r[a];
      if (u) {
        g[s] = R9(e, a, s, T, u);
        continue;
      }
      g[s] = e.request.defaults(T);
    }
  return r;
}
function R9(e, t, r, a, i) {
  const s = e.request.defaults(a);
  function o(...d) {
    let l = s.endpoint.merge(...d);
    if (i.mapToData)
      return l = Object.assign({}, l, {
        data: l[i.mapToData],
        [i.mapToData]: void 0
      }), s(l);
    if (i.renamed) {
      const [u, c] = i.renamed;
      e.log.warn(`octokit.${t}.${r}() has been renamed to octokit.${u}.${c}()`);
    }
    if (i.deprecated && e.log.warn(i.deprecated), i.renamedParameters) {
      const u = s.endpoint.merge(...d);
      for (const [c, v] of Object.entries(i.renamedParameters))
        c in u && (e.log.warn(`"${c}" parameter is deprecated for "octokit.${t}.${r}()". Use "${v}" instead`), v in u || (u[v] = u[c]), delete u[c]);
      return s(u);
    }
    return s(...d);
  }
  return Object.assign(o, s);
}
function Zl(e) {
  return {
    rest: Jl(e, Ql)
  };
}
Zl.VERSION = Yl;
function Xl(e) {
  const t = Jl(e, Ql);
  return {
    ...t,
    rest: t
  };
}
Xl.VERSION = Yl;
const O9 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  legacyRestEndpointMethods: Xl,
  restEndpointMethods: Zl
}, Symbol.toStringTag, { value: "Module" })), P9 = /* @__PURE__ */ Ja(O9), B9 = "2.21.3";
function F9(e) {
  if (!e.data)
    return {
      ...e,
      data: []
    };
  if (!("total_count" in e.data && !("url" in e.data)))
    return e;
  const r = e.data.incomplete_results, a = e.data.repository_selection, i = e.data.total_count;
  delete e.data.incomplete_results, delete e.data.repository_selection, delete e.data.total_count;
  const s = Object.keys(e.data)[0], o = e.data[s];
  return e.data = o, typeof r < "u" && (e.data.incomplete_results = r), typeof a < "u" && (e.data.repository_selection = a), e.data.total_count = i, e;
}
function Bs(e, t, r) {
  const a = typeof t == "function" ? t.endpoint(r) : e.request.endpoint(t, r), i = typeof t == "function" ? t : e.request, s = a.method, o = a.headers;
  let d = a.url;
  return {
    [Symbol.asyncIterator]: () => ({
      async next() {
        if (!d)
          return { done: !0 };
        try {
          const l = await i({ method: s, url: d, headers: o }), u = F9(l);
          return d = ((u.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1], { value: u };
        } catch (l) {
          if (l.status !== 409)
            throw l;
          return d = "", {
            value: {
              status: 200,
              headers: {},
              data: []
            }
          };
        }
      }
    })
  };
}
function e2(e, t, r, a) {
  return typeof r == "function" && (a = r, r = void 0), t2(e, [], Bs(e, t, r)[Symbol.asyncIterator](), a);
}
function t2(e, t, r, a) {
  return r.next().then((i) => {
    if (i.done)
      return t;
    let s = !1;
    function o() {
      s = !0;
    }
    return t = t.concat(a ? a(i.value, o) : i.value.data), s ? t : t2(e, t, r, a);
  });
}
const N9 = Object.assign(e2, {
  iterator: Bs
}), r2 = [
  "GET /app/hook/deliveries",
  "GET /app/installations",
  "GET /applications/grants",
  "GET /authorizations",
  "GET /enterprises/{enterprise}/actions/permissions/organizations",
  "GET /enterprises/{enterprise}/actions/runner-groups",
  "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations",
  "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners",
  "GET /enterprises/{enterprise}/actions/runners",
  "GET /enterprises/{enterprise}/audit-log",
  "GET /enterprises/{enterprise}/secret-scanning/alerts",
  "GET /enterprises/{enterprise}/settings/billing/advanced-security",
  "GET /events",
  "GET /gists",
  "GET /gists/public",
  "GET /gists/starred",
  "GET /gists/{gist_id}/comments",
  "GET /gists/{gist_id}/commits",
  "GET /gists/{gist_id}/forks",
  "GET /installation/repositories",
  "GET /issues",
  "GET /licenses",
  "GET /marketplace_listing/plans",
  "GET /marketplace_listing/plans/{plan_id}/accounts",
  "GET /marketplace_listing/stubbed/plans",
  "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
  "GET /networks/{owner}/{repo}/events",
  "GET /notifications",
  "GET /organizations",
  "GET /orgs/{org}/actions/cache/usage-by-repository",
  "GET /orgs/{org}/actions/permissions/repositories",
  "GET /orgs/{org}/actions/runner-groups",
  "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
  "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
  "GET /orgs/{org}/actions/runners",
  "GET /orgs/{org}/actions/secrets",
  "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/audit-log",
  "GET /orgs/{org}/blocks",
  "GET /orgs/{org}/code-scanning/alerts",
  "GET /orgs/{org}/codespaces",
  "GET /orgs/{org}/credential-authorizations",
  "GET /orgs/{org}/dependabot/secrets",
  "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/events",
  "GET /orgs/{org}/external-groups",
  "GET /orgs/{org}/failed_invitations",
  "GET /orgs/{org}/hooks",
  "GET /orgs/{org}/hooks/{hook_id}/deliveries",
  "GET /orgs/{org}/installations",
  "GET /orgs/{org}/invitations",
  "GET /orgs/{org}/invitations/{invitation_id}/teams",
  "GET /orgs/{org}/issues",
  "GET /orgs/{org}/members",
  "GET /orgs/{org}/migrations",
  "GET /orgs/{org}/migrations/{migration_id}/repositories",
  "GET /orgs/{org}/outside_collaborators",
  "GET /orgs/{org}/packages",
  "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
  "GET /orgs/{org}/projects",
  "GET /orgs/{org}/public_members",
  "GET /orgs/{org}/repos",
  "GET /orgs/{org}/secret-scanning/alerts",
  "GET /orgs/{org}/settings/billing/advanced-security",
  "GET /orgs/{org}/team-sync/groups",
  "GET /orgs/{org}/teams",
  "GET /orgs/{org}/teams/{team_slug}/discussions",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
  "GET /orgs/{org}/teams/{team_slug}/invitations",
  "GET /orgs/{org}/teams/{team_slug}/members",
  "GET /orgs/{org}/teams/{team_slug}/projects",
  "GET /orgs/{org}/teams/{team_slug}/repos",
  "GET /orgs/{org}/teams/{team_slug}/teams",
  "GET /projects/columns/{column_id}/cards",
  "GET /projects/{project_id}/collaborators",
  "GET /projects/{project_id}/columns",
  "GET /repos/{owner}/{repo}/actions/artifacts",
  "GET /repos/{owner}/{repo}/actions/caches",
  "GET /repos/{owner}/{repo}/actions/runners",
  "GET /repos/{owner}/{repo}/actions/runs",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
  "GET /repos/{owner}/{repo}/actions/secrets",
  "GET /repos/{owner}/{repo}/actions/workflows",
  "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
  "GET /repos/{owner}/{repo}/assignees",
  "GET /repos/{owner}/{repo}/branches",
  "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
  "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
  "GET /repos/{owner}/{repo}/code-scanning/alerts",
  "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
  "GET /repos/{owner}/{repo}/code-scanning/analyses",
  "GET /repos/{owner}/{repo}/codespaces",
  "GET /repos/{owner}/{repo}/codespaces/devcontainers",
  "GET /repos/{owner}/{repo}/codespaces/secrets",
  "GET /repos/{owner}/{repo}/collaborators",
  "GET /repos/{owner}/{repo}/comments",
  "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/commits",
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
  "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
  "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
  "GET /repos/{owner}/{repo}/commits/{ref}/status",
  "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
  "GET /repos/{owner}/{repo}/contributors",
  "GET /repos/{owner}/{repo}/dependabot/secrets",
  "GET /repos/{owner}/{repo}/deployments",
  "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
  "GET /repos/{owner}/{repo}/environments",
  "GET /repos/{owner}/{repo}/events",
  "GET /repos/{owner}/{repo}/forks",
  "GET /repos/{owner}/{repo}/git/matching-refs/{ref}",
  "GET /repos/{owner}/{repo}/hooks",
  "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
  "GET /repos/{owner}/{repo}/invitations",
  "GET /repos/{owner}/{repo}/issues",
  "GET /repos/{owner}/{repo}/issues/comments",
  "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/issues/events",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
  "GET /repos/{owner}/{repo}/keys",
  "GET /repos/{owner}/{repo}/labels",
  "GET /repos/{owner}/{repo}/milestones",
  "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
  "GET /repos/{owner}/{repo}/notifications",
  "GET /repos/{owner}/{repo}/pages/builds",
  "GET /repos/{owner}/{repo}/projects",
  "GET /repos/{owner}/{repo}/pulls",
  "GET /repos/{owner}/{repo}/pulls/comments",
  "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
  "GET /repos/{owner}/{repo}/releases",
  "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
  "GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
  "GET /repos/{owner}/{repo}/secret-scanning/alerts",
  "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
  "GET /repos/{owner}/{repo}/stargazers",
  "GET /repos/{owner}/{repo}/subscribers",
  "GET /repos/{owner}/{repo}/tags",
  "GET /repos/{owner}/{repo}/teams",
  "GET /repos/{owner}/{repo}/topics",
  "GET /repositories",
  "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
  "GET /search/code",
  "GET /search/commits",
  "GET /search/issues",
  "GET /search/labels",
  "GET /search/repositories",
  "GET /search/topics",
  "GET /search/users",
  "GET /teams/{team_id}/discussions",
  "GET /teams/{team_id}/discussions/{discussion_number}/comments",
  "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
  "GET /teams/{team_id}/discussions/{discussion_number}/reactions",
  "GET /teams/{team_id}/invitations",
  "GET /teams/{team_id}/members",
  "GET /teams/{team_id}/projects",
  "GET /teams/{team_id}/repos",
  "GET /teams/{team_id}/teams",
  "GET /user/blocks",
  "GET /user/codespaces",
  "GET /user/codespaces/secrets",
  "GET /user/emails",
  "GET /user/followers",
  "GET /user/following",
  "GET /user/gpg_keys",
  "GET /user/installations",
  "GET /user/installations/{installation_id}/repositories",
  "GET /user/issues",
  "GET /user/keys",
  "GET /user/marketplace_purchases",
  "GET /user/marketplace_purchases/stubbed",
  "GET /user/memberships/orgs",
  "GET /user/migrations",
  "GET /user/migrations/{migration_id}/repositories",
  "GET /user/orgs",
  "GET /user/packages",
  "GET /user/packages/{package_type}/{package_name}/versions",
  "GET /user/public_emails",
  "GET /user/repos",
  "GET /user/repository_invitations",
  "GET /user/starred",
  "GET /user/subscriptions",
  "GET /user/teams",
  "GET /users",
  "GET /users/{username}/events",
  "GET /users/{username}/events/orgs/{org}",
  "GET /users/{username}/events/public",
  "GET /users/{username}/followers",
  "GET /users/{username}/following",
  "GET /users/{username}/gists",
  "GET /users/{username}/gpg_keys",
  "GET /users/{username}/keys",
  "GET /users/{username}/orgs",
  "GET /users/{username}/packages",
  "GET /users/{username}/projects",
  "GET /users/{username}/received_events",
  "GET /users/{username}/received_events/public",
  "GET /users/{username}/repos",
  "GET /users/{username}/starred",
  "GET /users/{username}/subscriptions"
];
function k9(e) {
  return typeof e == "string" ? r2.includes(e) : !1;
}
function a2(e) {
  return {
    paginate: Object.assign(e2.bind(null, e), {
      iterator: Bs.bind(null, e)
    })
  };
}
a2.VERSION = B9;
const I9 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  composePaginateRest: N9,
  isPaginatingEndpoint: k9,
  paginateRest: a2,
  paginatingEndpoints: r2
}, Symbol.toStringTag, { value: "Module" })), G9 = /* @__PURE__ */ Ja(I9);
(function(e) {
  var t = D && D.__createBinding || (Object.create ? function(v, T, g, w) {
    w === void 0 && (w = g), Object.defineProperty(v, w, { enumerable: !0, get: function() {
      return T[g];
    } });
  } : function(v, T, g, w) {
    w === void 0 && (w = g), v[w] = T[g];
  }), r = D && D.__setModuleDefault || (Object.create ? function(v, T) {
    Object.defineProperty(v, "default", { enumerable: !0, value: T });
  } : function(v, T) {
    v.default = T;
  }), a = D && D.__importStar || function(v) {
    if (v && v.__esModule)
      return v;
    var T = {};
    if (v != null)
      for (var g in v)
        g !== "default" && Object.hasOwnProperty.call(v, g) && t(T, v, g);
    return r(T, v), T;
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), e.getOctokitOptions = e.GitHub = e.defaults = e.context = void 0;
  const i = a(t1), s = a(Xt), o = D9, d = P9, l = G9;
  e.context = new i.Context();
  const u = s.getApiBaseUrl();
  e.defaults = {
    baseUrl: u,
    request: {
      agent: s.getProxyAgent(u)
    }
  }, e.GitHub = o.Octokit.plugin(d.restEndpointMethods, l.paginateRest).defaults(e.defaults);
  function c(v, T) {
    const g = Object.assign({}, T || {}), w = s.getAuthString(v, g);
    return w && (g.auth = w), g;
  }
  e.getOctokitOptions = c;
})(gl);
var $9 = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), U9 = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), x9 = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && $9(t, e, r);
  return U9(t, e), t;
};
Object.defineProperty(ja, "__esModule", { value: !0 });
var i2 = ja.getOctokit = ja.context = void 0;
const V9 = x9(t1), zp = gl;
ja.context = new V9.Context();
function L9(e, t, ...r) {
  const a = zp.GitHub.plugin(...r);
  return new a(zp.getOctokitOptions(e, t));
}
i2 = ja.getOctokit = L9;
var Tr = {}, Ni = {}, ki = {}, j9 = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), M9 = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), q9 = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && j9(t, e, r);
  return M9(t, e), t;
};
Object.defineProperty(ki, "__esModule", { value: !0 });
ki.getOptions = void 0;
const Q1 = q9(Xe());
function W9(e) {
  const t = {
    followSymbolicLinks: !0,
    implicitDescendants: !0,
    matchDirectories: !0,
    omitBrokenSymbolicLinks: !0
  };
  return e && (typeof e.followSymbolicLinks == "boolean" && (t.followSymbolicLinks = e.followSymbolicLinks, Q1.debug(`followSymbolicLinks '${t.followSymbolicLinks}'`)), typeof e.implicitDescendants == "boolean" && (t.implicitDescendants = e.implicitDescendants, Q1.debug(`implicitDescendants '${t.implicitDescendants}'`)), typeof e.matchDirectories == "boolean" && (t.matchDirectories = e.matchDirectories, Q1.debug(`matchDirectories '${t.matchDirectories}'`)), typeof e.omitBrokenSymbolicLinks == "boolean" && (t.omitBrokenSymbolicLinks = e.omitBrokenSymbolicLinks, Q1.debug(`omitBrokenSymbolicLinks '${t.omitBrokenSymbolicLinks}'`))), t;
}
ki.getOptions = W9;
var er = {}, xe = {}, z9 = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), H9 = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), K9 = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && z9(t, e, r);
  return H9(t, e), t;
}, Q9 = D && D.__importDefault || function(e) {
  return e && e.__esModule ? e : { default: e };
};
Object.defineProperty(xe, "__esModule", { value: !0 });
xe.safeTrimTrailingSeparator = xe.normalizeSeparators = xe.hasRoot = xe.hasAbsoluteRoot = xe.ensureAbsoluteRoot = xe.dirname = void 0;
const mi = K9(ye), hr = Q9(Sr), rr = process.platform === "win32";
function Y9(e) {
  if (e = rs(e), rr && /^\\\\[^\\]+(\\[^\\]+)?$/.test(e))
    return e;
  let t = mi.dirname(e);
  return rr && /^\\\\[^\\]+\\[^\\]+\\$/.test(t) && (t = rs(t)), t;
}
xe.dirname = Y9;
function J9(e, t) {
  if (hr.default(e, "ensureAbsoluteRoot parameter 'root' must not be empty"), hr.default(t, "ensureAbsoluteRoot parameter 'itemPath' must not be empty"), ts(t))
    return t;
  if (rr) {
    if (t.match(/^[A-Z]:[^\\/]|^[A-Z]:$/i)) {
      let r = process.cwd();
      return hr.default(r.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${r}'`), t[0].toUpperCase() === r[0].toUpperCase() ? t.length === 2 ? `${t[0]}:\\${r.substr(3)}` : (r.endsWith("\\") || (r += "\\"), `${t[0]}:\\${r.substr(3)}${t.substr(2)}`) : `${t[0]}:\\${t.substr(2)}`;
    } else if (a1(t).match(/^\\$|^\\[^\\]/)) {
      const r = process.cwd();
      return hr.default(r.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${r}'`), `${r[0]}:\\${t.substr(1)}`;
    }
  }
  return hr.default(ts(e), "ensureAbsoluteRoot parameter 'root' must have an absolute root"), e.endsWith("/") || rr && e.endsWith("\\") || (e += mi.sep), e + t;
}
xe.ensureAbsoluteRoot = J9;
function ts(e) {
  return hr.default(e, "hasAbsoluteRoot parameter 'itemPath' must not be empty"), e = a1(e), rr ? e.startsWith("\\\\") || /^[A-Z]:\\/i.test(e) : e.startsWith("/");
}
xe.hasAbsoluteRoot = ts;
function Z9(e) {
  return hr.default(e, "isRooted parameter 'itemPath' must not be empty"), e = a1(e), rr ? e.startsWith("\\") || /^[A-Z]:/i.test(e) : e.startsWith("/");
}
xe.hasRoot = Z9;
function a1(e) {
  return e = e || "", rr ? (e = e.replace(/\//g, "\\"), (/^\\\\+[^\\]/.test(e) ? "\\" : "") + e.replace(/\\\\+/g, "\\")) : e.replace(/\/\/+/g, "/");
}
xe.normalizeSeparators = a1;
function rs(e) {
  return e ? (e = a1(e), !e.endsWith(mi.sep) || e === mi.sep || rr && /^[A-Z]:\\$/i.test(e) ? e : e.substr(0, e.length - 1)) : "";
}
xe.safeTrimTrailingSeparator = rs;
var Ii = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.MatchKind = void 0, function(t) {
    t[t.None = 0] = "None", t[t.Directory = 1] = "Directory", t[t.File = 2] = "File", t[t.All = 3] = "All";
  }(e.MatchKind || (e.MatchKind = {}));
})(Ii);
var X9 = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), ec = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), tc = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && X9(t, e, r);
  return ec(t, e), t;
};
Object.defineProperty(er, "__esModule", { value: !0 });
er.partialMatch = er.match = er.getSearchPaths = void 0;
const Hp = tc(xe), rc = Ii, Kp = process.platform === "win32";
function ac(e) {
  e = e.filter((a) => !a.negate);
  const t = {};
  for (const a of e) {
    const i = Kp ? a.searchPath.toUpperCase() : a.searchPath;
    t[i] = "candidate";
  }
  const r = [];
  for (const a of e) {
    const i = Kp ? a.searchPath.toUpperCase() : a.searchPath;
    if (t[i] === "included")
      continue;
    let s = !1, o = i, d = Hp.dirname(o);
    for (; d !== o; ) {
      if (t[d]) {
        s = !0;
        break;
      }
      o = d, d = Hp.dirname(o);
    }
    s || (r.push(a.searchPath), t[i] = "included");
  }
  return r;
}
er.getSearchPaths = ac;
function ic(e, t) {
  let r = rc.MatchKind.None;
  for (const a of e)
    a.negate ? r &= ~a.match(t) : r |= a.match(t);
  return r;
}
er.match = ic;
function nc(e, t) {
  return e.some((r) => !r.negate && r.partialMatch(t));
}
er.partialMatch = nc;
var Gi = {}, $i = {}, sc = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), oc = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), n2 = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && sc(t, e, r);
  return oc(t, e), t;
}, pc = D && D.__importDefault || function(e) {
  return e && e.__esModule ? e : { default: e };
};
Object.defineProperty($i, "__esModule", { value: !0 });
$i.Path = void 0;
const Pa = n2(ye), zt = n2(xe), Ba = pc(Sr), dc = process.platform === "win32";
class lc {
  /**
   * Constructs a Path
   * @param itemPath Path or array of segments
   */
  constructor(t) {
    if (this.segments = [], typeof t == "string")
      if (Ba.default(t, "Parameter 'itemPath' must not be empty"), t = zt.safeTrimTrailingSeparator(t), !zt.hasRoot(t))
        this.segments = t.split(Pa.sep);
      else {
        let r = t, a = zt.dirname(r);
        for (; a !== r; ) {
          const i = Pa.basename(r);
          this.segments.unshift(i), r = a, a = zt.dirname(r);
        }
        this.segments.unshift(r);
      }
    else {
      Ba.default(t.length > 0, "Parameter 'itemPath' must not be an empty array");
      for (let r = 0; r < t.length; r++) {
        let a = t[r];
        Ba.default(a, "Parameter 'itemPath' must not contain any empty segments"), a = zt.normalizeSeparators(t[r]), r === 0 && zt.hasRoot(a) ? (a = zt.safeTrimTrailingSeparator(a), Ba.default(a === zt.dirname(a), "Parameter 'itemPath' root segment contains information for multiple segments"), this.segments.push(a)) : (Ba.default(!a.includes(Pa.sep), "Parameter 'itemPath' contains unexpected path separators"), this.segments.push(a));
      }
    }
  }
  /**
   * Converts the path to it's string representation
   */
  toString() {
    let t = this.segments[0], r = t.endsWith(Pa.sep) || dc && /^[A-Z]:$/i.test(t);
    for (let a = 1; a < this.segments.length; a++)
      r ? r = !1 : t += Pa.sep, t += this.segments[a];
    return t;
  }
}
$i.Path = lc;
var uc = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), mc = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), Fs = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && uc(t, e, r);
  return mc(t, e), t;
}, cc = D && D.__importDefault || function(e) {
  return e && e.__esModule ? e : { default: e };
};
Object.defineProperty(Gi, "__esModule", { value: !0 });
Gi.Pattern = void 0;
const fc = Fs(ar), Fa = Fs(ye), Ke = Fs(xe), cr = cc(Sr), hc = Si, Un = Ii, Y1 = $i, Dt = process.platform === "win32";
class tt {
  constructor(t, r = !1, a, i) {
    this.negate = !1;
    let s;
    if (typeof t == "string")
      s = t.trim();
    else {
      a = a || [], cr.default(a.length, "Parameter 'segments' must not empty");
      const u = tt.getLiteral(a[0]);
      cr.default(u && Ke.hasAbsoluteRoot(u), "Parameter 'segments' first element must be a root path"), s = new Y1.Path(a).toString().trim(), t && (s = `!${s}`);
    }
    for (; s.startsWith("!"); )
      this.negate = !this.negate, s = s.substr(1).trim();
    s = tt.fixupPattern(s, i), this.segments = new Y1.Path(s).segments, this.trailingSeparator = Ke.normalizeSeparators(s).endsWith(Fa.sep), s = Ke.safeTrimTrailingSeparator(s);
    let o = !1;
    const d = this.segments.map((u) => tt.getLiteral(u)).filter((u) => !o && !(o = u === ""));
    this.searchPath = new Y1.Path(d).toString(), this.rootRegExp = new RegExp(tt.regExpEscape(d[0]), Dt ? "i" : ""), this.isImplicitPattern = r;
    const l = {
      dot: !0,
      nobrace: !0,
      nocase: Dt,
      nocomment: !0,
      noext: !0,
      nonegate: !0
    };
    s = Dt ? s.replace(/\\/g, "/") : s, this.minimatch = new hc.Minimatch(s, l);
  }
  /**
   * Matches the pattern against the specified path
   */
  match(t) {
    return this.segments[this.segments.length - 1] === "**" ? (t = Ke.normalizeSeparators(t), !t.endsWith(Fa.sep) && this.isImplicitPattern === !1 && (t = `${t}${Fa.sep}`)) : t = Ke.safeTrimTrailingSeparator(t), this.minimatch.match(t) ? this.trailingSeparator ? Un.MatchKind.Directory : Un.MatchKind.All : Un.MatchKind.None;
  }
  /**
   * Indicates whether the pattern may match descendants of the specified path
   */
  partialMatch(t) {
    return t = Ke.safeTrimTrailingSeparator(t), Ke.dirname(t) === t ? this.rootRegExp.test(t) : this.minimatch.matchOne(t.split(Dt ? /\\+/ : /\/+/), this.minimatch.set[0], !0);
  }
  /**
   * Escapes glob patterns within a path
   */
  static globEscape(t) {
    return (Dt ? t : t.replace(/\\/g, "\\\\")).replace(/(\[)(?=[^/]+\])/g, "[[]").replace(/\?/g, "[?]").replace(/\*/g, "[*]");
  }
  /**
   * Normalizes slashes and ensures absolute root
   */
  static fixupPattern(t, r) {
    cr.default(t, "pattern cannot be empty");
    const a = new Y1.Path(t).segments.map((i) => tt.getLiteral(i));
    if (cr.default(a.every((i, s) => (i !== "." || s === 0) && i !== ".."), `Invalid pattern '${t}'. Relative pathing '.' and '..' is not allowed.`), cr.default(!Ke.hasRoot(t) || a[0], `Invalid pattern '${t}'. Root segment must not contain globs.`), t = Ke.normalizeSeparators(t), t === "." || t.startsWith(`.${Fa.sep}`))
      t = tt.globEscape(process.cwd()) + t.substr(1);
    else if (t === "~" || t.startsWith(`~${Fa.sep}`))
      r = r || fc.homedir(), cr.default(r, "Unable to determine HOME directory"), cr.default(Ke.hasAbsoluteRoot(r), `Expected HOME directory to be a rooted path. Actual '${r}'`), t = tt.globEscape(r) + t.substr(1);
    else if (Dt && (t.match(/^[A-Z]:$/i) || t.match(/^[A-Z]:[^\\]/i))) {
      let i = Ke.ensureAbsoluteRoot("C:\\dummy-root", t.substr(0, 2));
      t.length > 2 && !i.endsWith("\\") && (i += "\\"), t = tt.globEscape(i) + t.substr(2);
    } else if (Dt && (t === "\\" || t.match(/^\\[^\\]/))) {
      let i = Ke.ensureAbsoluteRoot("C:\\dummy-root", "\\");
      i.endsWith("\\") || (i += "\\"), t = tt.globEscape(i) + t.substr(1);
    } else
      t = Ke.ensureAbsoluteRoot(tt.globEscape(process.cwd()), t);
    return Ke.normalizeSeparators(t);
  }
  /**
   * Attempts to unescape a pattern segment to create a literal path segment.
   * Otherwise returns empty string.
   */
  static getLiteral(t) {
    let r = "";
    for (let a = 0; a < t.length; a++) {
      const i = t[a];
      if (i === "\\" && !Dt && a + 1 < t.length) {
        r += t[++a];
        continue;
      } else {
        if (i === "*" || i === "?")
          return "";
        if (i === "[" && a + 1 < t.length) {
          let s = "", o = -1;
          for (let d = a + 1; d < t.length; d++) {
            const l = t[d];
            if (l === "\\" && !Dt && d + 1 < t.length) {
              s += t[++d];
              continue;
            } else if (l === "]") {
              o = d;
              break;
            } else
              s += l;
          }
          if (o >= 0) {
            if (s.length > 1)
              return "";
            if (s) {
              r += s, a = o;
              continue;
            }
          }
        }
      }
      r += i;
    }
    return r;
  }
  /**
   * Escapes regexp special characters
   * https://javascript.info/regexp-escaping
   */
  static regExpEscape(t) {
    return t.replace(/[[\\^$.|?*+()]/g, "\\$&");
  }
}
Gi.Pattern = tt;
var Ui = {};
Object.defineProperty(Ui, "__esModule", { value: !0 });
Ui.SearchState = void 0;
class gc {
  constructor(t, r) {
    this.path = t, this.level = r;
  }
}
Ui.SearchState = gc;
var vc = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), wc = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), i1 = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && vc(t, e, r);
  return wc(t, e), t;
}, xn = D && D.__awaiter || function(e, t, r, a) {
  function i(s) {
    return s instanceof r ? s : new r(function(o) {
      o(s);
    });
  }
  return new (r || (r = Promise))(function(s, o) {
    function d(c) {
      try {
        u(a.next(c));
      } catch (v) {
        o(v);
      }
    }
    function l(c) {
      try {
        u(a.throw(c));
      } catch (v) {
        o(v);
      }
    }
    function u(c) {
      c.done ? s(c.value) : i(c.value).then(d, l);
    }
    u((a = a.apply(e, t || [])).next());
  });
}, _c = D && D.__asyncValues || function(e) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var t = e[Symbol.asyncIterator], r;
  return t ? t.call(e) : (e = typeof __values == "function" ? __values(e) : e[Symbol.iterator](), r = {}, a("next"), a("throw"), a("return"), r[Symbol.asyncIterator] = function() {
    return this;
  }, r);
  function a(s) {
    r[s] = e[s] && function(o) {
      return new Promise(function(d, l) {
        o = e[s](o), i(d, l, o.done, o.value);
      });
    };
  }
  function i(s, o, d, l) {
    Promise.resolve(l).then(function(u) {
      s({ value: u, done: d });
    }, o);
  }
}, Jt = D && D.__await || function(e) {
  return this instanceof Jt ? (this.v = e, this) : new Jt(e);
}, bc = D && D.__asyncGenerator || function(e, t, r) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var a = r.apply(e, t || []), i, s = [];
  return i = {}, o("next"), o("throw"), o("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function o(T) {
    a[T] && (i[T] = function(g) {
      return new Promise(function(w, f) {
        s.push([T, g, w, f]) > 1 || d(T, g);
      });
    });
  }
  function d(T, g) {
    try {
      l(a[T](g));
    } catch (w) {
      v(s[0][3], w);
    }
  }
  function l(T) {
    T.value instanceof Jt ? Promise.resolve(T.value.v).then(u, c) : v(s[0][2], T);
  }
  function u(T) {
    d("next", T);
  }
  function c(T) {
    d("throw", T);
  }
  function v(T, g) {
    T(g), s.shift(), s.length && d(s[0][0], s[0][1]);
  }
};
Object.defineProperty(Ni, "__esModule", { value: !0 });
Ni.DefaultGlobber = void 0;
const Vn = i1(Xe()), Na = i1(Pe), Qp = i1(ki), yc = i1(ye), J1 = i1(er), Yp = Ii, Jp = Gi, Zp = Ui, Ec = process.platform === "win32";
class ci {
  constructor(t) {
    this.patterns = [], this.searchPaths = [], this.options = Qp.getOptions(t);
  }
  getSearchPaths() {
    return this.searchPaths.slice();
  }
  glob() {
    var t, r;
    return xn(this, void 0, void 0, function* () {
      const a = [];
      try {
        for (var i = _c(this.globGenerator()), s; s = yield i.next(), !s.done; ) {
          const o = s.value;
          a.push(o);
        }
      } catch (o) {
        t = { error: o };
      } finally {
        try {
          s && !s.done && (r = i.return) && (yield r.call(i));
        } finally {
          if (t)
            throw t.error;
        }
      }
      return a;
    });
  }
  globGenerator() {
    return bc(this, arguments, function* () {
      const r = Qp.getOptions(this.options), a = [];
      for (const o of this.patterns)
        a.push(o), r.implicitDescendants && (o.trailingSeparator || o.segments[o.segments.length - 1] !== "**") && a.push(new Jp.Pattern(o.negate, !0, o.segments.concat("**")));
      const i = [];
      for (const o of J1.getSearchPaths(a)) {
        Vn.debug(`Search path '${o}'`);
        try {
          yield Jt(Na.promises.lstat(o));
        } catch (d) {
          if (d.code === "ENOENT")
            continue;
          throw d;
        }
        i.unshift(new Zp.SearchState(o, 1));
      }
      const s = [];
      for (; i.length; ) {
        const o = i.pop(), d = J1.match(a, o.path), l = !!d || J1.partialMatch(a, o.path);
        if (!d && !l)
          continue;
        const u = yield Jt(
          ci.stat(o, r, s)
          // Broken symlink, or symlink cycle detected, or no longer exists
        );
        if (u)
          if (u.isDirectory()) {
            if (d & Yp.MatchKind.Directory && r.matchDirectories)
              yield yield Jt(o.path);
            else if (!l)
              continue;
            const c = o.level + 1, v = (yield Jt(Na.promises.readdir(o.path))).map((T) => new Zp.SearchState(yc.join(o.path, T), c));
            i.push(...v.reverse());
          } else
            d & Yp.MatchKind.File && (yield yield Jt(o.path));
      }
    });
  }
  /**
   * Constructs a DefaultGlobber
   */
  static create(t, r) {
    return xn(this, void 0, void 0, function* () {
      const a = new ci(r);
      Ec && (t = t.replace(/\r\n/g, `
`), t = t.replace(/\r/g, `
`));
      const i = t.split(`
`).map((s) => s.trim());
      for (const s of i)
        !s || s.startsWith("#") || a.patterns.push(new Jp.Pattern(s));
      return a.searchPaths.push(...J1.getSearchPaths(a.patterns)), a;
    });
  }
  static stat(t, r, a) {
    return xn(this, void 0, void 0, function* () {
      let i;
      if (r.followSymbolicLinks)
        try {
          i = yield Na.promises.stat(t.path);
        } catch (s) {
          if (s.code === "ENOENT") {
            if (r.omitBrokenSymbolicLinks) {
              Vn.debug(`Broken symlink '${t.path}'`);
              return;
            }
            throw new Error(`No information found for the path '${t.path}'. This may indicate a broken symbolic link.`);
          }
          throw s;
        }
      else
        i = yield Na.promises.lstat(t.path);
      if (i.isDirectory() && r.followSymbolicLinks) {
        const s = yield Na.promises.realpath(t.path);
        for (; a.length >= t.level; )
          a.pop();
        if (a.some((o) => o === s)) {
          Vn.debug(`Symlink cycle detected for path '${t.path}' and realpath '${s}'`);
          return;
        }
        a.push(s);
      }
      return i;
    });
  }
}
Ni.DefaultGlobber = ci;
var xi = {}, Tc = D && D.__createBinding || (Object.create ? function(e, t, r, a) {
  a === void 0 && (a = r), Object.defineProperty(e, a, { enumerable: !0, get: function() {
    return t[r];
  } });
} : function(e, t, r, a) {
  a === void 0 && (a = r), e[a] = t[r];
}), Sc = D && D.__setModuleDefault || (Object.create ? function(e, t) {
  Object.defineProperty(e, "default", { enumerable: !0, value: t });
} : function(e, t) {
  e.default = t;
}), sa = D && D.__importStar || function(e) {
  if (e && e.__esModule)
    return e;
  var t = {};
  if (e != null)
    for (var r in e)
      r !== "default" && Object.hasOwnProperty.call(e, r) && Tc(t, e, r);
  return Sc(t, e), t;
}, Ac = D && D.__awaiter || function(e, t, r, a) {
  function i(s) {
    return s instanceof r ? s : new r(function(o) {
      o(s);
    });
  }
  return new (r || (r = Promise))(function(s, o) {
    function d(c) {
      try {
        u(a.next(c));
      } catch (v) {
        o(v);
      }
    }
    function l(c) {
      try {
        u(a.throw(c));
      } catch (v) {
        o(v);
      }
    }
    function u(c) {
      c.done ? s(c.value) : i(c.value).then(d, l);
    }
    u((a = a.apply(e, t || [])).next());
  });
}, Cc = D && D.__asyncValues || function(e) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var t = e[Symbol.asyncIterator], r;
  return t ? t.call(e) : (e = typeof __values == "function" ? __values(e) : e[Symbol.iterator](), r = {}, a("next"), a("throw"), a("return"), r[Symbol.asyncIterator] = function() {
    return this;
  }, r);
  function a(s) {
    r[s] = e[s] && function(o) {
      return new Promise(function(d, l) {
        o = e[s](o), i(d, l, o.done, o.value);
      });
    };
  }
  function i(s, o, d, l) {
    Promise.resolve(l).then(function(u) {
      s({ value: u, done: d });
    }, o);
  }
};
Object.defineProperty(xi, "__esModule", { value: !0 });
xi.hashFiles = void 0;
const Xp = sa(as), ed = sa(Xe()), td = sa(Pe), Dc = sa(Ze), Rc = sa(Qa), Oc = sa(ye);
function Pc(e, t, r = !1) {
  var a, i, s;
  return Ac(this, void 0, void 0, function* () {
    const o = r ? ed.info : ed.debug;
    let d = !1;
    const l = t || ((s = process.env.GITHUB_WORKSPACE) !== null && s !== void 0 ? s : process.cwd()), u = Xp.createHash("sha256");
    let c = 0;
    try {
      for (var v = Cc(e.globGenerator()), T; T = yield v.next(), !T.done; ) {
        const g = T.value;
        if (o(g), !g.startsWith(`${l}${Oc.sep}`)) {
          o(`Ignore '${g}' since it is not under GITHUB_WORKSPACE.`);
          continue;
        }
        if (td.statSync(g).isDirectory()) {
          o(`Skip directory '${g}'.`);
          continue;
        }
        const w = Xp.createHash("sha256");
        yield Rc.promisify(Dc.pipeline)(td.createReadStream(g), w), u.write(w.digest()), c++, d || (d = !0);
      }
    } catch (g) {
      a = { error: g };
    } finally {
      try {
        T && !T.done && (i = v.return) && (yield i.call(v));
      } finally {
        if (a)
          throw a.error;
      }
    }
    return u.end(), d ? (o(`Found ${c} files to hash.`), u.digest("hex")) : (o("No matches found for glob"), "");
  });
}
xi.hashFiles = Pc;
var s2 = D && D.__awaiter || function(e, t, r, a) {
  function i(s) {
    return s instanceof r ? s : new r(function(o) {
      o(s);
    });
  }
  return new (r || (r = Promise))(function(s, o) {
    function d(c) {
      try {
        u(a.next(c));
      } catch (v) {
        o(v);
      }
    }
    function l(c) {
      try {
        u(a.throw(c));
      } catch (v) {
        o(v);
      }
    }
    function u(c) {
      c.done ? s(c.value) : i(c.value).then(d, l);
    }
    u((a = a.apply(e, t || [])).next());
  });
};
Object.defineProperty(Tr, "__esModule", { value: !0 });
var o2 = Tr.hashFiles = d2 = Tr.create = void 0;
const Bc = Ni, Fc = xi;
function p2(e, t) {
  return s2(this, void 0, void 0, function* () {
    return yield Bc.DefaultGlobber.create(e, t);
  });
}
var d2 = Tr.create = p2;
function Nc(e, t = "", r, a = !1) {
  return s2(this, void 0, void 0, function* () {
    let i = !0;
    r && typeof r.followSymbolicLinks == "boolean" && (i = r.followSymbolicLinks);
    const s = yield p2(e, { followSymbolicLinks: i });
    return Fc.hashFiles(s, t, a);
  });
}
o2 = Tr.hashFiles = Nc;
const kc = /* @__PURE__ */ Ya({
  __proto__: null,
  get create() {
    return d2;
  },
  default: Tr,
  get hashFiles() {
    return o2;
  }
}, [Tr]);
async function T5(e) {
  const t = at.getInput("name");
  let r = at.getInput("script", { required: !0 });
  const a = l2(
    "result",
    at.getInput("result-encoding") || process.env.INPUT_RESULT_ENCODING || ""
  ), i = at.getInput("cwd");
  i && i !== "." && process.chdir(i), Uc(r) === "path" && (r = await P0(r, "utf-8"));
  try {
    const s = await Ic(r, {
      ...Gc(at.getInput("github-token") || void 0),
      ...e
    });
    at.setOutput(
      "result",
      a === "json" ? JSON.stringify(s ?? null) : String(s ?? "")
    );
  } catch (s) {
    console.error(s.stack ?? s), at.setFailed(`Error in ${t}: ${s}`);
  }
}
async function Ic(e, t) {
  const r = Object.getPrototypeOf(async () => null).constructor;
  try {
    return await new r(
      ...Object.keys(t),
      e
    )(...Object.values(t));
  } catch (a) {
    throw at.error(a instanceof Error ? a : new Error(`${a}`)), a;
  }
}
function Gc(e) {
  const t = l2(
    "input",
    at.getInput("input-encoding") || process.env.INPUT_INPUT_ENCODING || ""
  ), r = at.getInput("input"), a = t === "json" ? JSON.parse(r || "null") : r, i = e ? i2(e) : null;
  return {
    input: a,
    env: process.env,
    shell: $c,
    core: Om,
    exec: Qm,
    fetch: cd,
    artifact: Dm,
    github: i,
    glob: kc,
    io: Gm
  };
}
async function $c(e, ...t) {
  const r = Array.isArray(t[0]) ? t.shift() : void 0, a = t[0] && typeof t[0] == "object" ? t.shift() : void 0;
  return !!(a != null && a.capture) ? Es(e, r, a) : Ts(e, r, a);
}
function Uc(e) {
  return !e.includes(`
`) && /[.][a-z]+sx?$/i.test(e) ? "path" : "inline";
}
function l2(e, t) {
  if (!["json", "string"].includes(t))
    throw new Error(
      `${e}-encoding option must be either "string" or "json", not ${JSON.stringify(
        t
      )}`
    );
  return t;
}
export {
  Ln as F,
  W0 as a,
  Ic as b,
  Om as c,
  Gc as d,
  Qm as e,
  $c as f,
  kc as g,
  Gm as i,
  T5 as r,
  Uc as s
};
//# sourceMappingURL=index-787186d0.js.map
